<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="80481"><g><title>std::sys::unix::thread::guard::current (29 samples, 0.04%)</title><rect x="0.0112%" y="261" width="0.0360%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="29"/><text x="0.2612%" y="271.50"></text></g><g><title>pthread_getattr_np (28 samples, 0.03%)</title><rect x="0.0124%" y="245" width="0.0348%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="28"/><text x="0.2624%" y="255.50"></text></g><g><title>malloc (28 samples, 0.03%)</title><rect x="0.0124%" y="229" width="0.0348%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="28"/><text x="0.2624%" y="239.50"></text></g><g><title>arena_get2.part.3 (27 samples, 0.03%)</title><rect x="0.0137%" y="213" width="0.0335%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="27"/><text x="0.2637%" y="223.50"></text></g><g><title>new_heap (19 samples, 0.02%)</title><rect x="0.0236%" y="197" width="0.0236%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="19"/><text x="0.2736%" y="207.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (11 samples, 0.01%)</title><rect x="0.4225%" y="213" width="0.0137%" height="15" fill="rgb(232,128,0)" fg:x="340" fg:w="11"/><text x="0.6725%" y="223.50"></text></g><g><title>async_task::header::Header::register (34 samples, 0.04%)</title><rect x="0.4026%" y="229" width="0.0422%" height="15" fill="rgb(207,160,47)" fg:x="324" fg:w="34"/><text x="0.6526%" y="239.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (58 samples, 0.07%)</title><rect x="0.4448%" y="229" width="0.0721%" height="15" fill="rgb(228,23,34)" fg:x="358" fg:w="58"/><text x="0.6948%" y="239.50"></text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (11 samples, 0.01%)</title><rect x="0.5032%" y="213" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="405" fg:w="11"/><text x="0.7532%" y="223.50"></text></g><g><title>parking::Unparker::unpark (25 samples, 0.03%)</title><rect x="0.5206%" y="229" width="0.0311%" height="15" fill="rgb(220,122,19)" fg:x="419" fg:w="25"/><text x="0.7706%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (33 samples, 0.04%)</title><rect x="0.9493%" y="181" width="0.0410%" height="15" fill="rgb(250,228,42)" fg:x="764" fg:w="33"/><text x="1.1993%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (39 samples, 0.05%)</title><rect x="1.0437%" y="165" width="0.0485%" height="15" fill="rgb(240,193,28)" fg:x="840" fg:w="39"/><text x="1.2937%" y="175.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (239 samples, 0.30%)</title><rect x="0.8462%" y="197" width="0.2970%" height="15" fill="rgb(216,20,37)" fg:x="681" fg:w="239"/><text x="1.0962%" y="207.50"></text></g><g><title>tracing_log::dispatch_record::_{{closure}} (123 samples, 0.15%)</title><rect x="0.9903%" y="181" width="0.1528%" height="15" fill="rgb(206,188,39)" fg:x="797" fg:w="123"/><text x="1.2403%" y="191.50"></text></g><g><title>tracing_log::loglevel_to_cs (41 samples, 0.05%)</title><rect x="1.0922%" y="165" width="0.0509%" height="15" fill="rgb(217,207,13)" fg:x="879" fg:w="41"/><text x="1.3422%" y="175.50"></text></g><g><title>__libc_disable_asynccancel (87 samples, 0.11%)</title><rect x="1.6774%" y="181" width="0.1081%" height="15" fill="rgb(231,73,38)" fg:x="1350" fg:w="87"/><text x="1.9274%" y="191.50"></text></g><g><title>__libc_enable_asynccancel (16 samples, 0.02%)</title><rect x="1.7855%" y="181" width="0.0199%" height="15" fill="rgb(225,20,46)" fg:x="1437" fg:w="16"/><text x="2.0355%" y="191.50"></text></g><g><title>apic_timer_interrupt (13 samples, 0.02%)</title><rect x="1.8054%" y="181" width="0.0162%" height="15" fill="rgb(210,31,41)" fg:x="1453" fg:w="13"/><text x="2.0554%" y="191.50"></text></g><g><title>irq_entries_start (10 samples, 0.01%)</title><rect x="1.8315%" y="181" width="0.0124%" height="15" fill="rgb(221,200,47)" fg:x="1474" fg:w="10"/><text x="2.0815%" y="191.50"></text></g><g><title>irq_work_interrupt (10 samples, 0.01%)</title><rect x="1.8439%" y="181" width="0.0124%" height="15" fill="rgb(226,26,5)" fg:x="1484" fg:w="10"/><text x="2.0939%" y="191.50"></text></g><g><title>[libc-2.24.so] (577 samples, 0.72%)</title><rect x="1.1431%" y="197" width="0.7169%" height="15" fill="rgb(249,33,26)" fg:x="920" fg:w="577"/><text x="1.3931%" y="207.50"></text></g><g><title>__pthread_enable_asynccancel (14 samples, 0.02%)</title><rect x="1.8973%" y="181" width="0.0174%" height="15" fill="rgb(235,183,28)" fg:x="1527" fg:w="14"/><text x="2.1473%" y="191.50"></text></g><g><title>__GI___libc_read (51 samples, 0.06%)</title><rect x="1.8601%" y="197" width="0.0634%" height="15" fill="rgb(221,5,38)" fg:x="1497" fg:w="51"/><text x="2.1101%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (30 samples, 0.04%)</title><rect x="1.9234%" y="197" width="0.0373%" height="15" fill="rgb(247,18,42)" fg:x="1548" fg:w="30"/><text x="2.1734%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (11 samples, 0.01%)</title><rect x="2.0638%" y="149" width="0.0137%" height="15" fill="rgb(241,131,45)" fg:x="1661" fg:w="11"/><text x="2.3138%" y="159.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (56 samples, 0.07%)</title><rect x="2.0204%" y="181" width="0.0696%" height="15" fill="rgb(249,31,29)" fg:x="1626" fg:w="56"/><text x="2.2704%" y="191.50"></text></g><g><title>tracing_log::dispatch_record::_{{closure}} (35 samples, 0.04%)</title><rect x="2.0464%" y="165" width="0.0435%" height="15" fill="rgb(225,111,53)" fg:x="1647" fg:w="35"/><text x="2.2964%" y="175.50"></text></g><g><title>tracing_log::loglevel_to_cs (10 samples, 0.01%)</title><rect x="2.0775%" y="149" width="0.0124%" height="15" fill="rgb(238,160,17)" fg:x="1672" fg:w="10"/><text x="2.3275%" y="159.50"></text></g><g><title>polling::epoll::Poller::modify (121 samples, 0.15%)</title><rect x="1.9707%" y="197" width="0.1503%" height="15" fill="rgb(214,148,48)" fg:x="1586" fg:w="121"/><text x="2.2207%" y="207.50"></text></g><g><title>epoll_ctl (25 samples, 0.03%)</title><rect x="2.0899%" y="181" width="0.0311%" height="15" fill="rgb(232,36,49)" fg:x="1682" fg:w="25"/><text x="2.3399%" y="191.50"></text></g><g><title>pthread_mutex_trylock (20 samples, 0.02%)</title><rect x="2.1210%" y="197" width="0.0249%" height="15" fill="rgb(209,103,24)" fg:x="1707" fg:w="20"/><text x="2.3710%" y="207.50"></text></g><g><title>runtime::executor::Polling::wait (1,295 samples, 1.61%)</title><rect x="0.5517%" y="229" width="1.6091%" height="15" fill="rgb(229,88,8)" fg:x="444" fg:w="1295"/><text x="0.8017%" y="239.50"></text></g><g><title>polling::Poller::wait (1,277 samples, 1.59%)</title><rect x="0.5740%" y="213" width="1.5867%" height="15" fill="rgb(213,181,19)" fg:x="462" fg:w="1277"/><text x="0.8240%" y="223.50"></text></g><g><title>syscall (9 samples, 0.01%)</title><rect x="2.1496%" y="197" width="0.0112%" height="15" fill="rgb(254,191,54)" fg:x="1730" fg:w="9"/><text x="2.3996%" y="207.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,706 samples, 2.12%)</title><rect x="0.0534%" y="245" width="2.1198%" height="15" fill="rgb(241,83,37)" fg:x="43" fg:w="1706"/><text x="0.3034%" y="255.50">&lt;..</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake_by_ref (10 samples, 0.01%)</title><rect x="2.1608%" y="229" width="0.0124%" height="15" fill="rgb(233,36,39)" fg:x="1739" fg:w="10"/><text x="2.4108%" y="239.50"></text></g><g><title>parking::Inner::park (11 samples, 0.01%)</title><rect x="2.1732%" y="245" width="0.0137%" height="15" fill="rgb(226,3,54)" fg:x="1749" fg:w="11"/><text x="2.4232%" y="255.50"></text></g><g><title>mi_page_queue_find_free_ex (9 samples, 0.01%)</title><rect x="2.1869%" y="213" width="0.0112%" height="15" fill="rgb(245,192,40)" fg:x="1760" fg:w="9"/><text x="2.4369%" y="223.50"></text></g><g><title>_mi_malloc_generic (27 samples, 0.03%)</title><rect x="2.1869%" y="229" width="0.0335%" height="15" fill="rgb(238,167,29)" fg:x="1760" fg:w="27"/><text x="2.4369%" y="239.50"></text></g><g><title>mi_thread_init (18 samples, 0.02%)</title><rect x="2.1980%" y="213" width="0.0224%" height="15" fill="rgb(232,182,51)" fg:x="1769" fg:w="18"/><text x="2.4480%" y="223.50"></text></g><g><title>runtime::executor::Executor::new (49 samples, 0.06%)</title><rect x="2.1869%" y="245" width="0.0609%" height="15" fill="rgb(231,60,39)" fg:x="1760" fg:w="49"/><text x="2.4369%" y="255.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (21 samples, 0.03%)</title><rect x="2.2216%" y="229" width="0.0261%" height="15" fill="rgb(208,69,12)" fg:x="1788" fg:w="21"/><text x="2.4716%" y="239.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (45 samples, 0.06%)</title><rect x="2.2477%" y="245" width="0.0559%" height="15" fill="rgb(235,93,37)" fg:x="1809" fg:w="45"/><text x="2.4977%" y="255.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,817 samples, 2.26%)</title><rect x="0.0472%" y="261" width="2.2577%" height="15" fill="rgb(213,116,39)" fg:x="38" fg:w="1817"/><text x="0.2972%" y="271.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,849 samples, 2.30%)</title><rect x="0.0087%" y="277" width="2.2974%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1849"/><text x="0.2587%" y="287.50">c..</text></g><g><title>__GI___mprotect (9 samples, 0.01%)</title><rect x="2.3161%" y="261" width="0.0112%" height="15" fill="rgb(206,96,30)" fg:x="1864" fg:w="9"/><text x="2.5661%" y="271.50"></text></g><g><title>__mmap64 (13 samples, 0.02%)</title><rect x="2.3285%" y="261" width="0.0162%" height="15" fill="rgb(218,138,4)" fg:x="1874" fg:w="13"/><text x="2.5785%" y="271.50"></text></g><g><title>__clone (1,891 samples, 2.35%)</title><rect x="0.0062%" y="325" width="2.3496%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1891"/><text x="0.2562%" y="335.50">_..</text></g><g><title>start_thread (1,891 samples, 2.35%)</title><rect x="0.0062%" y="309" width="2.3496%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1891"/><text x="0.2562%" y="319.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,891 samples, 2.35%)</title><rect x="0.0062%" y="293" width="2.3496%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1891"/><text x="0.2562%" y="303.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (40 samples, 0.05%)</title><rect x="2.3061%" y="277" width="0.0497%" height="15" fill="rgb(225,35,8)" fg:x="1856" fg:w="40"/><text x="2.5561%" y="287.50"></text></g><g><title>__sysconf (9 samples, 0.01%)</title><rect x="2.3447%" y="261" width="0.0112%" height="15" fill="rgb(250,213,24)" fg:x="1887" fg:w="9"/><text x="2.5947%" y="271.50"></text></g><g><title>async_page_fault (23 samples, 0.03%)</title><rect x="2.3571%" y="309" width="0.0286%" height="15" fill="rgb(247,123,22)" fg:x="1897" fg:w="23"/><text x="2.6071%" y="319.50"></text></g><g><title>__lll_unlock_wake (28 samples, 0.03%)</title><rect x="2.3571%" y="325" width="0.0348%" height="15" fill="rgb(231,138,38)" fg:x="1897" fg:w="28"/><text x="2.6071%" y="335.50"></text></g><g><title>polling::Poller::new (10 samples, 0.01%)</title><rect x="2.4093%" y="197" width="0.0124%" height="15" fill="rgb(231,145,46)" fg:x="1939" fg:w="10"/><text x="2.6593%" y="207.50"></text></g><g><title>storage::Storage::new (21 samples, 0.03%)</title><rect x="2.4093%" y="213" width="0.0261%" height="15" fill="rgb(251,118,11)" fg:x="1939" fg:w="21"/><text x="2.6593%" y="223.50"></text></g><g><title>std::sys::unix::thread::Thread::new (11 samples, 0.01%)</title><rect x="2.4217%" y="197" width="0.0137%" height="15" fill="rgb(217,147,25)" fg:x="1949" fg:w="11"/><text x="2.6717%" y="207.50"></text></g><g><title>pthread_create@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="2.4229%" y="181" width="0.0124%" height="15" fill="rgb(247,81,37)" fg:x="1950" fg:w="10"/><text x="2.6729%" y="191.50"></text></g><g><title>_start (28 samples, 0.03%)</title><rect x="2.4018%" y="325" width="0.0348%" height="15" fill="rgb(209,12,38)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="335.50"></text></g><g><title>__libc_start_main (28 samples, 0.03%)</title><rect x="2.4018%" y="309" width="0.0348%" height="15" fill="rgb(227,1,9)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="319.50"></text></g><g><title>main (28 samples, 0.03%)</title><rect x="2.4018%" y="293" width="0.0348%" height="15" fill="rgb(248,47,43)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="303.50"></text></g><g><title>std::rt::lang_start_internal (28 samples, 0.03%)</title><rect x="2.4018%" y="277" width="0.0348%" height="15" fill="rgb(221,10,30)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="287.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (28 samples, 0.03%)</title><rect x="2.4018%" y="261" width="0.0348%" height="15" fill="rgb(210,229,1)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="271.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 0.03%)</title><rect x="2.4018%" y="245" width="0.0348%" height="15" fill="rgb(222,148,37)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="255.50"></text></g><g><title>t0::main (28 samples, 0.03%)</title><rect x="2.4018%" y="229" width="0.0348%" height="15" fill="rgb(234,67,33)" fg:x="1933" fg:w="28"/><text x="2.6518%" y="239.50"></text></g><g><title>_mi_segment_page_start (9 samples, 0.01%)</title><rect x="2.4701%" y="213" width="0.0112%" height="15" fill="rgb(247,98,35)" fg:x="1988" fg:w="9"/><text x="2.7201%" y="223.50"></text></g><g><title>_mi_malloc_generic (174 samples, 0.22%)</title><rect x="2.4441%" y="245" width="0.2162%" height="15" fill="rgb(247,138,52)" fg:x="1967" fg:w="174"/><text x="2.6941%" y="255.50"></text></g><g><title>mi_page_queue_find_free_ex (174 samples, 0.22%)</title><rect x="2.4441%" y="229" width="0.2162%" height="15" fill="rgb(213,79,30)" fg:x="1967" fg:w="174"/><text x="2.6941%" y="239.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (140 samples, 0.17%)</title><rect x="2.4863%" y="213" width="0.1740%" height="15" fill="rgb(246,177,23)" fg:x="2001" fg:w="140"/><text x="2.7363%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.01%)</title><rect x="2.6603%" y="245" width="0.0137%" height="15" fill="rgb(230,62,27)" fg:x="2141" fg:w="11"/><text x="2.9103%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.01%)</title><rect x="2.6603%" y="229" width="0.0137%" height="15" fill="rgb(216,154,8)" fg:x="2141" fg:w="11"/><text x="2.9103%" y="239.50"></text></g><g><title>_mi_heap_realloc_zero (11 samples, 0.01%)</title><rect x="2.6603%" y="213" width="0.0137%" height="15" fill="rgb(244,35,45)" fg:x="2141" fg:w="11"/><text x="2.9103%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="2.6615%" y="197" width="0.0124%" height="15" fill="rgb(251,115,12)" fg:x="2142" fg:w="10"/><text x="2.9115%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (9 samples, 0.01%)</title><rect x="2.6963%" y="229" width="0.0112%" height="15" fill="rgb(240,54,50)" fg:x="2170" fg:w="9"/><text x="2.9463%" y="239.50"></text></g><g><title>event_listener::Inner::lock (25 samples, 0.03%)</title><rect x="2.7075%" y="229" width="0.0311%" height="15" fill="rgb(233,84,52)" fg:x="2179" fg:w="25"/><text x="2.9575%" y="239.50"></text></g><g><title>pthread_mutex_lock (19 samples, 0.02%)</title><rect x="2.7149%" y="213" width="0.0236%" height="15" fill="rgb(207,117,47)" fg:x="2185" fg:w="19"/><text x="2.9649%" y="223.50"></text></g><g><title>event_listener::Event::listen (53 samples, 0.07%)</title><rect x="2.6739%" y="245" width="0.0659%" height="15" fill="rgb(249,43,39)" fg:x="2152" fg:w="53"/><text x="2.9239%" y="255.50"></text></g><g><title>_int_free (38 samples, 0.05%)</title><rect x="2.7559%" y="197" width="0.0472%" height="15" fill="rgb(209,38,44)" fg:x="2218" fg:w="38"/><text x="3.0059%" y="207.50"></text></g><g><title>ra_clear (121 samples, 0.15%)</title><rect x="2.7559%" y="229" width="0.1503%" height="15" fill="rgb(236,212,23)" fg:x="2218" fg:w="121"/><text x="3.0059%" y="239.50"></text></g><g><title>ra_clear_containers (121 samples, 0.15%)</title><rect x="2.7559%" y="213" width="0.1503%" height="15" fill="rgb(242,79,21)" fg:x="2218" fg:w="121"/><text x="3.0059%" y="223.50"></text></g><g><title>array_container_free (83 samples, 0.10%)</title><rect x="2.8031%" y="197" width="0.1031%" height="15" fill="rgb(211,96,35)" fg:x="2256" fg:w="83"/><text x="3.0531%" y="207.50"></text></g><g><title>_int_free (83 samples, 0.10%)</title><rect x="2.8031%" y="181" width="0.1031%" height="15" fill="rgb(253,215,40)" fg:x="2256" fg:w="83"/><text x="3.0531%" y="191.50"></text></g><g><title>roaring_bitmap_free (170 samples, 0.21%)</title><rect x="2.7559%" y="245" width="0.2112%" height="15" fill="rgb(211,81,21)" fg:x="2218" fg:w="170"/><text x="3.0059%" y="255.50"></text></g><g><title>ra_clear_without_containers (49 samples, 0.06%)</title><rect x="2.9063%" y="229" width="0.0609%" height="15" fill="rgb(208,190,38)" fg:x="2339" fg:w="49"/><text x="3.1563%" y="239.50"></text></g><g><title>_int_free (49 samples, 0.06%)</title><rect x="2.9063%" y="213" width="0.0609%" height="15" fill="rgb(235,213,38)" fg:x="2339" fg:w="49"/><text x="3.1563%" y="223.50"></text></g><g><title>roaring_create_iterator (15 samples, 0.02%)</title><rect x="2.9672%" y="245" width="0.0186%" height="15" fill="rgb(237,122,38)" fg:x="2388" fg:w="15"/><text x="3.2172%" y="255.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="2.9672%" y="229" width="0.0186%" height="15" fill="rgb(244,218,35)" fg:x="2388" fg:w="15"/><text x="3.2172%" y="239.50"></text></g><g><title>_int_malloc (15 samples, 0.02%)</title><rect x="2.9672%" y="213" width="0.0186%" height="15" fill="rgb(240,68,47)" fg:x="2388" fg:w="15"/><text x="3.2172%" y="223.50"></text></g><g><title>__memcmp_sse4_1 (186 samples, 0.23%)</title><rect x="4.4706%" y="229" width="0.2311%" height="15" fill="rgb(210,16,53)" fg:x="3598" fg:w="186"/><text x="4.7206%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (183 samples, 0.23%)</title><rect x="4.7017%" y="229" width="0.2274%" height="15" fill="rgb(235,124,12)" fg:x="3784" fg:w="183"/><text x="4.9517%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (377 samples, 0.47%)</title><rect x="4.9291%" y="229" width="0.4684%" height="15" fill="rgb(224,169,11)" fg:x="3967" fg:w="377"/><text x="5.1791%" y="239.50"></text></g><g><title>roaring_bitmap_and_inplace (20 samples, 0.02%)</title><rect x="5.3975%" y="229" width="0.0249%" height="15" fill="rgb(250,166,2)" fg:x="4344" fg:w="20"/><text x="5.6475%" y="239.50"></text></g><g><title>malloc (9 samples, 0.01%)</title><rect x="5.4485%" y="213" width="0.0112%" height="15" fill="rgb(242,216,29)" fg:x="4385" fg:w="9"/><text x="5.6985%" y="223.50"></text></g><g><title>storage::chunk::Columns::lookup (1,994 samples, 2.48%)</title><rect x="2.9858%" y="245" width="2.4776%" height="15" fill="rgb(230,116,27)" fg:x="2403" fg:w="1994"/><text x="3.2358%" y="255.50">st..</text></g><g><title>roaring_bitmap_copy (33 samples, 0.04%)</title><rect x="5.4224%" y="229" width="0.0410%" height="15" fill="rgb(228,99,48)" fg:x="4364" fg:w="33"/><text x="5.6724%" y="239.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (19 samples, 0.02%)</title><rect x="5.4646%" y="213" width="0.0236%" height="15" fill="rgb(253,11,6)" fg:x="4398" fg:w="19"/><text x="5.7146%" y="223.50"></text></g><g><title>__lll_unlock_wake (13 samples, 0.02%)</title><rect x="5.4721%" y="197" width="0.0162%" height="15" fill="rgb(247,143,39)" fg:x="4404" fg:w="13"/><text x="5.7221%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,790 samples, 3.47%)</title><rect x="2.4366%" y="325" width="3.4667%" height="15" fill="rgb(236,97,10)" fg:x="1961" fg:w="2790"/><text x="2.6866%" y="335.50">cor..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,790 samples, 3.47%)</title><rect x="2.4366%" y="309" width="3.4667%" height="15" fill="rgb(233,208,19)" fg:x="1961" fg:w="2790"/><text x="2.6866%" y="319.50">std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,790 samples, 3.47%)</title><rect x="2.4366%" y="293" width="3.4667%" height="15" fill="rgb(216,164,2)" fg:x="1961" fg:w="2790"/><text x="2.6866%" y="303.50">&lt;co..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,790 samples, 3.47%)</title><rect x="2.4366%" y="277" width="3.4667%" height="15" fill="rgb(220,129,5)" fg:x="1961" fg:w="2790"/><text x="2.6866%" y="287.50">asy..</text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (2,790 samples, 3.47%)</title><rect x="2.4366%" y="261" width="3.4667%" height="15" fill="rgb(242,17,10)" fg:x="1961" fg:w="2790"/><text x="2.6866%" y="271.50">sto..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (354 samples, 0.44%)</title><rect x="5.4634%" y="245" width="0.4399%" height="15" fill="rgb(242,107,0)" fg:x="4397" fg:w="354"/><text x="5.7134%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (353 samples, 0.44%)</title><rect x="5.4646%" y="229" width="0.4386%" height="15" fill="rgb(251,28,31)" fg:x="4398" fg:w="353"/><text x="5.7146%" y="239.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (334 samples, 0.42%)</title><rect x="5.4883%" y="213" width="0.4150%" height="15" fill="rgb(233,223,10)" fg:x="4417" fg:w="334"/><text x="5.7383%" y="223.50"></text></g><g><title>pthread_mutex_lock (334 samples, 0.42%)</title><rect x="5.4883%" y="197" width="0.4150%" height="15" fill="rgb(215,21,27)" fg:x="4417" fg:w="334"/><text x="5.7383%" y="207.50"></text></g><g><title>epoll_ctl (18 samples, 0.02%)</title><rect x="5.9033%" y="325" width="0.0224%" height="15" fill="rgb(232,23,21)" fg:x="4751" fg:w="18"/><text x="6.1533%" y="335.50"></text></g><g><title>async_page_fault (18 samples, 0.02%)</title><rect x="5.9033%" y="309" width="0.0224%" height="15" fill="rgb(244,5,23)" fg:x="4751" fg:w="18"/><text x="6.1533%" y="319.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (34 samples, 0.04%)</title><rect x="15.2570%" y="213" width="0.0422%" height="15" fill="rgb(226,81,46)" fg:x="12279" fg:w="34"/><text x="15.5070%" y="223.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (13 samples, 0.02%)</title><rect x="15.3204%" y="197" width="0.0162%" height="15" fill="rgb(247,70,30)" fg:x="12330" fg:w="13"/><text x="15.5704%" y="207.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (35 samples, 0.04%)</title><rect x="15.2993%" y="213" width="0.0435%" height="15" fill="rgb(212,68,19)" fg:x="12313" fg:w="35"/><text x="15.5493%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.03%)</title><rect x="15.3428%" y="213" width="0.0311%" height="15" fill="rgb(240,187,13)" fg:x="12348" fg:w="25"/><text x="15.5928%" y="223.50"></text></g><g><title>__memcmp_sse4_1 (190 samples, 0.24%)</title><rect x="15.3738%" y="213" width="0.2361%" height="15" fill="rgb(223,113,26)" fg:x="12373" fg:w="190"/><text x="15.6238%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,794 samples, 2.23%)</title><rect x="15.6099%" y="213" width="2.2291%" height="15" fill="rgb(206,192,2)" fg:x="12563" fg:w="1794"/><text x="15.8599%" y="223.50">_..</text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="17.8390%" y="213" width="0.0186%" height="15" fill="rgb(241,108,4)" fg:x="14357" fg:w="15"/><text x="18.0890%" y="223.50"></text></g><g><title>_mi_free_block_mt (174 samples, 0.22%)</title><rect x="17.8576%" y="213" width="0.2162%" height="15" fill="rgb(247,173,49)" fg:x="14372" fg:w="174"/><text x="18.1076%" y="223.50"></text></g><g><title>__memset_avx2_unaligned_erms (25 samples, 0.03%)</title><rect x="18.3000%" y="197" width="0.0311%" height="15" fill="rgb(224,114,35)" fg:x="14728" fg:w="25"/><text x="18.5500%" y="207.50"></text></g><g><title>_mi_block_zero_init (15 samples, 0.02%)</title><rect x="18.3323%" y="197" width="0.0186%" height="15" fill="rgb(245,159,27)" fg:x="14754" fg:w="15"/><text x="18.5823%" y="207.50"></text></g><g><title>_mi_heap_malloc_zero (224 samples, 0.28%)</title><rect x="18.0738%" y="213" width="0.2783%" height="15" fill="rgb(245,172,44)" fg:x="14546" fg:w="224"/><text x="18.3238%" y="223.50"></text></g><g><title>_mi_deferred_free (12 samples, 0.01%)</title><rect x="18.3944%" y="197" width="0.0149%" height="15" fill="rgb(236,23,11)" fg:x="14804" fg:w="12"/><text x="18.6444%" y="207.50"></text></g><g><title>_mi_malloc_generic (50 samples, 0.06%)</title><rect x="18.3522%" y="213" width="0.0621%" height="15" fill="rgb(205,117,38)" fg:x="14770" fg:w="50"/><text x="18.6022%" y="223.50"></text></g><g><title>_mi_page_retire (171 samples, 0.21%)</title><rect x="18.4143%" y="213" width="0.2125%" height="15" fill="rgb(237,72,25)" fg:x="14820" fg:w="171"/><text x="18.6643%" y="223.50"></text></g><g><title>_mi_free_block_mt (3,600 samples, 4.47%)</title><rect x="18.7647%" y="197" width="4.4731%" height="15" fill="rgb(244,70,9)" fg:x="15102" fg:w="3600"/><text x="19.0147%" y="207.50">_mi_f..</text></g><g><title>mi_free (158 samples, 0.20%)</title><rect x="23.2378%" y="197" width="0.1963%" height="15" fill="rgb(217,125,39)" fg:x="18702" fg:w="158"/><text x="23.4878%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3,954 samples, 4.91%)</title><rect x="18.6280%" y="213" width="4.9130%" height="15" fill="rgb(235,36,10)" fg:x="14992" fg:w="3954"/><text x="18.8780%" y="223.50">alloc:..</text></g><g><title>mi_free_generic (86 samples, 0.11%)</title><rect x="23.4341%" y="197" width="0.1069%" height="15" fill="rgb(251,123,47)" fg:x="18860" fg:w="86"/><text x="23.6841%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (58 samples, 0.07%)</title><rect x="23.5447%" y="213" width="0.0721%" height="15" fill="rgb(221,13,13)" fg:x="18949" fg:w="58"/><text x="23.7947%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.03%)</title><rect x="23.5857%" y="197" width="0.0311%" height="15" fill="rgb(238,131,9)" fg:x="18982" fg:w="25"/><text x="23.8357%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (65 samples, 0.08%)</title><rect x="23.6168%" y="213" width="0.0808%" height="15" fill="rgb(211,50,8)" fg:x="19007" fg:w="65"/><text x="23.8668%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (61 samples, 0.08%)</title><rect x="23.6975%" y="213" width="0.0758%" height="15" fill="rgb(245,182,24)" fg:x="19072" fg:w="61"/><text x="23.9475%" y="223.50"></text></g><g><title>mi_free (238 samples, 0.30%)</title><rect x="23.7845%" y="213" width="0.2957%" height="15" fill="rgb(242,14,37)" fg:x="19142" fg:w="238"/><text x="24.0345%" y="223.50"></text></g><g><title>mi_free_generic (105 samples, 0.13%)</title><rect x="24.0802%" y="213" width="0.1305%" height="15" fill="rgb(246,228,12)" fg:x="19380" fg:w="105"/><text x="24.3302%" y="223.50"></text></g><g><title>mi_malloc (348 samples, 0.43%)</title><rect x="24.2107%" y="213" width="0.4324%" height="15" fill="rgb(213,55,15)" fg:x="19485" fg:w="348"/><text x="24.4607%" y="223.50"></text></g><g><title>roaring_advance_uint32_iterator (16 samples, 0.02%)</title><rect x="24.6530%" y="213" width="0.0199%" height="15" fill="rgb(209,9,3)" fg:x="19841" fg:w="16"/><text x="24.9030%" y="223.50"></text></g><g><title>roaring_bitmap_add (46 samples, 0.06%)</title><rect x="24.6729%" y="213" width="0.0572%" height="15" fill="rgb(230,59,30)" fg:x="19857" fg:w="46"/><text x="24.9229%" y="223.50"></text></g><g><title>ra_clear (12 samples, 0.01%)</title><rect x="24.7400%" y="197" width="0.0149%" height="15" fill="rgb(209,121,21)" fg:x="19911" fg:w="12"/><text x="24.9900%" y="207.50"></text></g><g><title>ra_clear_containers (9 samples, 0.01%)</title><rect x="24.7437%" y="181" width="0.0112%" height="15" fill="rgb(220,109,13)" fg:x="19914" fg:w="9"/><text x="24.9937%" y="191.50"></text></g><g><title>roaring_bitmap_free (30 samples, 0.04%)</title><rect x="24.7325%" y="213" width="0.0373%" height="15" fill="rgb(232,18,1)" fg:x="19905" fg:w="30"/><text x="24.9825%" y="223.50"></text></g><g><title>ra_clear_without_containers (12 samples, 0.01%)</title><rect x="24.7549%" y="197" width="0.0149%" height="15" fill="rgb(215,41,42)" fg:x="19923" fg:w="12"/><text x="25.0049%" y="207.50"></text></g><g><title>malloc (130 samples, 0.16%)</title><rect x="24.7860%" y="197" width="0.1615%" height="15" fill="rgb(224,123,36)" fg:x="19948" fg:w="130"/><text x="25.0360%" y="207.50"></text></g><g><title>roaring_create_iterator (161 samples, 0.20%)</title><rect x="24.7698%" y="213" width="0.2000%" height="15" fill="rgb(240,125,3)" fg:x="19935" fg:w="161"/><text x="25.0198%" y="223.50"></text></g><g><title>roaring_init_iterator (18 samples, 0.02%)</title><rect x="24.9475%" y="197" width="0.0224%" height="15" fill="rgb(205,98,50)" fg:x="20078" fg:w="18"/><text x="25.1975%" y="207.50"></text></g><g><title>loadfirstvalue (12 samples, 0.01%)</title><rect x="24.9550%" y="181" width="0.0149%" height="15" fill="rgb(205,185,37)" fg:x="20084" fg:w="12"/><text x="25.2050%" y="191.50"></text></g><g><title>roaring_free_uint32_iterator (20 samples, 0.02%)</title><rect x="24.9699%" y="213" width="0.0249%" height="15" fill="rgb(238,207,15)" fg:x="20096" fg:w="20"/><text x="25.2199%" y="223.50"></text></g><g><title>storage::chunk::Columns::lookup (31 samples, 0.04%)</title><rect x="24.9947%" y="213" width="0.0385%" height="15" fill="rgb(213,199,42)" fg:x="20116" fg:w="31"/><text x="25.2447%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (326 samples, 0.41%)</title><rect x="25.1786%" y="197" width="0.4051%" height="15" fill="rgb(235,201,11)" fg:x="20264" fg:w="326"/><text x="25.4286%" y="207.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (127 samples, 0.16%)</title><rect x="25.5837%" y="197" width="0.1578%" height="15" fill="rgb(207,46,11)" fg:x="20590" fg:w="127"/><text x="25.8337%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (327 samples, 0.41%)</title><rect x="25.7663%" y="181" width="0.4063%" height="15" fill="rgb(241,35,35)" fg:x="20737" fg:w="327"/><text x="26.0163%" y="191.50"></text></g><g><title>start_thread (16,302 samples, 20.26%)</title><rect x="5.9281%" y="325" width="20.2557%" height="15" fill="rgb(243,32,47)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="335.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (16,302 samples, 20.26%)</title><rect x="5.9281%" y="309" width="20.2557%" height="15" fill="rgb(247,202,23)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="319.50">std::sys::unix::thread::Thread::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (16,302 samples, 20.26%)</title><rect x="5.9281%" y="293" width="20.2557%" height="15" fill="rgb(219,102,11)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="303.50">core::ops::function::FnOnce::cal..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16,302 samples, 20.26%)</title><rect x="5.9281%" y="277" width="20.2557%" height="15" fill="rgb(243,110,44)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="287.50">std::sys_common::backtrace::__ru..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,302 samples, 20.26%)</title><rect x="5.9281%" y="261" width="20.2557%" height="15" fill="rgb(222,74,54)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="271.50">&lt;core::future::from_generator::G..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (16,302 samples, 20.26%)</title><rect x="5.9281%" y="245" width="20.2557%" height="15" fill="rgb(216,99,12)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="255.50">async_task::raw::RawTask&lt;F,T,S&gt;:..</text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (16,302 samples, 20.26%)</title><rect x="5.9281%" y="229" width="20.2557%" height="15" fill="rgb(226,22,26)" fg:x="4771" fg:w="16302"/><text x="6.1781%" y="239.50">storage::Storage::new::_{{closur..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (926 samples, 1.15%)</title><rect x="25.0332%" y="213" width="1.1506%" height="15" fill="rgb(217,163,10)" fg:x="20147" fg:w="926"/><text x="25.2832%" y="223.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (356 samples, 0.44%)</title><rect x="25.7415%" y="197" width="0.4423%" height="15" fill="rgb(213,25,53)" fg:x="20717" fg:w="356"/><text x="25.9915%" y="207.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (13 samples, 0.02%)</title><rect x="26.1838%" y="213" width="0.0162%" height="15" fill="rgb(252,105,26)" fg:x="21073" fg:w="13"/><text x="26.4338%" y="223.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="26.1838%" y="229" width="0.0224%" height="15" fill="rgb(220,39,43)" fg:x="21073" fg:w="18"/><text x="26.4338%" y="239.50"></text></g><g><title>event_listener::Inner::lock (80 samples, 0.10%)</title><rect x="26.2062%" y="213" width="0.0994%" height="15" fill="rgb(229,68,48)" fg:x="21091" fg:w="80"/><text x="26.4562%" y="223.50"></text></g><g><title>pthread_mutex_lock (79 samples, 0.10%)</title><rect x="26.2074%" y="197" width="0.0982%" height="15" fill="rgb(252,8,32)" fg:x="21092" fg:w="79"/><text x="26.4574%" y="207.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (87 samples, 0.11%)</title><rect x="26.2062%" y="229" width="0.1081%" height="15" fill="rgb(223,20,43)" fg:x="21091" fg:w="87"/><text x="26.4562%" y="239.50"></text></g><g><title>_int_free (134 samples, 0.17%)</title><rect x="26.3143%" y="229" width="0.1665%" height="15" fill="rgb(229,81,49)" fg:x="21178" fg:w="134"/><text x="26.5643%" y="239.50"></text></g><g><title>_mi_heap_malloc_zero (17 samples, 0.02%)</title><rect x="26.4808%" y="229" width="0.0211%" height="15" fill="rgb(236,28,36)" fg:x="21312" fg:w="17"/><text x="26.7308%" y="239.50"></text></g><g><title>_mi_malloc_generic (9 samples, 0.01%)</title><rect x="26.4907%" y="213" width="0.0112%" height="15" fill="rgb(249,185,26)" fg:x="21320" fg:w="9"/><text x="26.7407%" y="223.50"></text></g><g><title>_mi_page_free_collect (26 samples, 0.03%)</title><rect x="26.5031%" y="213" width="0.0323%" height="15" fill="rgb(249,174,33)" fg:x="21330" fg:w="26"/><text x="26.7531%" y="223.50"></text></g><g><title>_mi_malloc_generic (28 samples, 0.03%)</title><rect x="26.5019%" y="229" width="0.0348%" height="15" fill="rgb(233,201,37)" fg:x="21329" fg:w="28"/><text x="26.7519%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (684 samples, 0.85%)</title><rect x="26.5367%" y="229" width="0.8499%" height="15" fill="rgb(221,78,26)" fg:x="21357" fg:w="684"/><text x="26.7867%" y="239.50"></text></g><g><title>mi_free_generic (684 samples, 0.85%)</title><rect x="26.5367%" y="213" width="0.8499%" height="15" fill="rgb(250,127,30)" fg:x="21357" fg:w="684"/><text x="26.7867%" y="223.50"></text></g><g><title>roaring_bitmap_add (63 samples, 0.08%)</title><rect x="27.3866%" y="229" width="0.0783%" height="15" fill="rgb(230,49,44)" fg:x="22041" fg:w="63"/><text x="27.6366%" y="239.50"></text></g><g><title>container_add (62 samples, 0.08%)</title><rect x="27.3878%" y="213" width="0.0770%" height="15" fill="rgb(229,67,23)" fg:x="22042" fg:w="62"/><text x="27.6378%" y="223.50"></text></g><g><title>roaring_bitmap_free (16 samples, 0.02%)</title><rect x="27.4649%" y="229" width="0.0199%" height="15" fill="rgb(249,83,47)" fg:x="22104" fg:w="16"/><text x="27.7149%" y="239.50"></text></g><g><title>ra_clear (16 samples, 0.02%)</title><rect x="27.4649%" y="213" width="0.0199%" height="15" fill="rgb(215,43,3)" fg:x="22104" fg:w="16"/><text x="27.7149%" y="223.50"></text></g><g><title>ra_clear_containers (16 samples, 0.02%)</title><rect x="27.4649%" y="197" width="0.0199%" height="15" fill="rgb(238,154,13)" fg:x="22104" fg:w="16"/><text x="27.7149%" y="207.50"></text></g><g><title>array_container_free (15 samples, 0.02%)</title><rect x="27.4661%" y="181" width="0.0186%" height="15" fill="rgb(219,56,2)" fg:x="22105" fg:w="15"/><text x="27.7161%" y="191.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,366 samples, 1.70%)</title><rect x="26.1838%" y="325" width="1.6973%" height="15" fill="rgb(233,0,4)" fg:x="21073" fg:w="1366"/><text x="26.4338%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,366 samples, 1.70%)</title><rect x="26.1838%" y="309" width="1.6973%" height="15" fill="rgb(235,30,7)" fg:x="21073" fg:w="1366"/><text x="26.4338%" y="319.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,366 samples, 1.70%)</title><rect x="26.1838%" y="293" width="1.6973%" height="15" fill="rgb(250,79,13)" fg:x="21073" fg:w="1366"/><text x="26.4338%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,366 samples, 1.70%)</title><rect x="26.1838%" y="277" width="1.6973%" height="15" fill="rgb(211,146,34)" fg:x="21073" fg:w="1366"/><text x="26.4338%" y="287.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,366 samples, 1.70%)</title><rect x="26.1838%" y="261" width="1.6973%" height="15" fill="rgb(228,22,38)" fg:x="21073" fg:w="1366"/><text x="26.4338%" y="271.50"></text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (1,366 samples, 1.70%)</title><rect x="26.1838%" y="245" width="1.6973%" height="15" fill="rgb(235,168,5)" fg:x="21073" fg:w="1366"/><text x="26.4338%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (319 samples, 0.40%)</title><rect x="27.4847%" y="229" width="0.3964%" height="15" fill="rgb(221,155,16)" fg:x="22120" fg:w="319"/><text x="27.7347%" y="239.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (316 samples, 0.39%)</title><rect x="27.4885%" y="213" width="0.3926%" height="15" fill="rgb(215,215,53)" fg:x="22123" fg:w="316"/><text x="27.7385%" y="223.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (316 samples, 0.39%)</title><rect x="27.4885%" y="197" width="0.3926%" height="15" fill="rgb(223,4,10)" fg:x="22123" fg:w="316"/><text x="27.7385%" y="207.50"></text></g><g><title>pthread_mutex_lock (58 samples, 0.07%)</title><rect x="27.8090%" y="181" width="0.0721%" height="15" fill="rgb(234,103,6)" fg:x="22381" fg:w="58"/><text x="28.0590%" y="191.50"></text></g><g><title>mi_segment_find_free (12 samples, 0.01%)</title><rect x="27.8911%" y="213" width="0.0149%" height="15" fill="rgb(227,97,0)" fg:x="22447" fg:w="12"/><text x="28.1411%" y="223.50"></text></g><g><title>_mi_segment_page_alloc (23 samples, 0.03%)</title><rect x="27.8811%" y="229" width="0.0286%" height="15" fill="rgb(234,150,53)" fg:x="22439" fg:w="23"/><text x="28.1311%" y="239.50"></text></g><g><title>_mi_malloc_generic (37 samples, 0.05%)</title><rect x="27.8811%" y="261" width="0.0460%" height="15" fill="rgb(228,201,54)" fg:x="22439" fg:w="37"/><text x="28.1311%" y="271.50"></text></g><g><title>mi_page_queue_find_free_ex (37 samples, 0.05%)</title><rect x="27.8811%" y="245" width="0.0460%" height="15" fill="rgb(222,22,37)" fg:x="22439" fg:w="37"/><text x="28.1311%" y="255.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (14 samples, 0.02%)</title><rect x="27.9097%" y="229" width="0.0174%" height="15" fill="rgb(237,53,32)" fg:x="22462" fg:w="14"/><text x="28.1597%" y="239.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (14 samples, 0.02%)</title><rect x="27.9097%" y="213" width="0.0174%" height="15" fill="rgb(233,25,53)" fg:x="22462" fg:w="14"/><text x="28.1597%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="27.9432%" y="261" width="0.0162%" height="15" fill="rgb(210,40,34)" fg:x="22489" fg:w="13"/><text x="28.1932%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="27.9432%" y="245" width="0.0162%" height="15" fill="rgb(241,220,44)" fg:x="22489" fg:w="13"/><text x="28.1932%" y="255.50"></text></g><g><title>_mi_malloc_generic (13 samples, 0.02%)</title><rect x="27.9432%" y="229" width="0.0162%" height="15" fill="rgb(235,28,35)" fg:x="22489" fg:w="13"/><text x="28.1932%" y="239.50"></text></g><g><title>mi_page_queue_find_free_ex (13 samples, 0.02%)</title><rect x="27.9432%" y="213" width="0.0162%" height="15" fill="rgb(210,56,17)" fg:x="22489" fg:w="13"/><text x="28.1932%" y="223.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (10 samples, 0.01%)</title><rect x="27.9470%" y="197" width="0.0124%" height="15" fill="rgb(224,130,29)" fg:x="22492" fg:w="10"/><text x="28.1970%" y="207.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (10 samples, 0.01%)</title><rect x="27.9470%" y="181" width="0.0124%" height="15" fill="rgb(235,212,8)" fg:x="22492" fg:w="10"/><text x="28.1970%" y="191.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (12 samples, 0.01%)</title><rect x="28.2203%" y="245" width="0.0149%" height="15" fill="rgb(223,33,50)" fg:x="22712" fg:w="12"/><text x="28.4703%" y="255.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (349 samples, 0.43%)</title><rect x="27.9594%" y="261" width="0.4336%" height="15" fill="rgb(219,149,13)" fg:x="22502" fg:w="349"/><text x="28.2094%" y="271.50"></text></g><g><title>syscall (127 samples, 0.16%)</title><rect x="28.2352%" y="245" width="0.1578%" height="15" fill="rgb(250,156,29)" fg:x="22724" fg:w="127"/><text x="28.4852%" y="255.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (36 samples, 0.04%)</title><rect x="28.3930%" y="261" width="0.0447%" height="15" fill="rgb(216,193,19)" fg:x="22851" fg:w="36"/><text x="28.6430%" y="271.50"></text></g><g><title>array_container_grow (16 samples, 0.02%)</title><rect x="28.4378%" y="229" width="0.0199%" height="15" fill="rgb(216,135,14)" fg:x="22887" fg:w="16"/><text x="28.6878%" y="239.50"></text></g><g><title>realloc (16 samples, 0.02%)</title><rect x="28.4378%" y="213" width="0.0199%" height="15" fill="rgb(241,47,5)" fg:x="22887" fg:w="16"/><text x="28.6878%" y="223.50"></text></g><g><title>_int_realloc (13 samples, 0.02%)</title><rect x="28.4415%" y="197" width="0.0162%" height="15" fill="rgb(233,42,35)" fg:x="22890" fg:w="13"/><text x="28.6915%" y="207.50"></text></g><g><title>container_add (17 samples, 0.02%)</title><rect x="28.4378%" y="245" width="0.0211%" height="15" fill="rgb(231,13,6)" fg:x="22887" fg:w="17"/><text x="28.6878%" y="255.50"></text></g><g><title>roaring_bitmap_add (23 samples, 0.03%)</title><rect x="28.4378%" y="261" width="0.0286%" height="15" fill="rgb(207,181,40)" fg:x="22887" fg:w="23"/><text x="28.6878%" y="271.50"></text></g><g><title>_int_free (75 samples, 0.09%)</title><rect x="28.9025%" y="229" width="0.0932%" height="15" fill="rgb(254,173,49)" fg:x="23261" fg:w="75"/><text x="29.1525%" y="239.50"></text></g><g><title>array_bitset_container_intersection (3,887 samples, 4.83%)</title><rect x="28.9957%" y="229" width="4.8297%" height="15" fill="rgb(221,1,38)" fg:x="23336" fg:w="3887"/><text x="29.2457%" y="239.50">array_..</text></g><g><title>_int_free (29 samples, 0.04%)</title><rect x="33.8341%" y="213" width="0.0360%" height="15" fill="rgb(206,124,46)" fg:x="27230" fg:w="29"/><text x="34.0841%" y="223.50"></text></g><g><title>array_container_free (43 samples, 0.05%)</title><rect x="33.8266%" y="229" width="0.0534%" height="15" fill="rgb(249,21,11)" fg:x="27224" fg:w="43"/><text x="34.0766%" y="239.50"></text></g><g><title>intersect_skewed_uint16 (427 samples, 0.53%)</title><rect x="33.9024%" y="213" width="0.5306%" height="15" fill="rgb(222,201,40)" fg:x="27285" fg:w="427"/><text x="34.1524%" y="223.50"></text></g><g><title>array_container_intersection_inplace (13,802 samples, 17.15%)</title><rect x="33.8800%" y="229" width="17.1494%" height="15" fill="rgb(235,61,29)" fg:x="27267" fg:w="13802"/><text x="34.1300%" y="239.50">array_container_intersectio..</text></g><g><title>intersect_uint16 (13,357 samples, 16.60%)</title><rect x="34.4330%" y="213" width="16.5965%" height="15" fill="rgb(219,207,3)" fg:x="27712" fg:w="13357"/><text x="34.6830%" y="223.50">intersect_uint16</text></g><g><title>_avx2_bitset_container_and_justcard.isra.51 (775 samples, 0.96%)</title><rect x="51.0543%" y="213" width="0.9630%" height="15" fill="rgb(222,56,46)" fg:x="41089" fg:w="775"/><text x="51.3043%" y="223.50"></text></g><g><title>array_container_create_given_capacity (471 samples, 0.59%)</title><rect x="52.0172%" y="213" width="0.5852%" height="15" fill="rgb(239,76,54)" fg:x="41864" fg:w="471"/><text x="52.2672%" y="223.50"></text></g><g><title>malloc (470 samples, 0.58%)</title><rect x="52.0185%" y="197" width="0.5840%" height="15" fill="rgb(231,124,27)" fg:x="41865" fg:w="470"/><text x="52.2685%" y="207.50"></text></g><g><title>_int_malloc (342 samples, 0.42%)</title><rect x="52.1775%" y="181" width="0.4249%" height="15" fill="rgb(249,195,6)" fg:x="41993" fg:w="342"/><text x="52.4275%" y="191.50"></text></g><g><title>malloc_consolidate (223 samples, 0.28%)</title><rect x="52.3254%" y="165" width="0.2771%" height="15" fill="rgb(237,174,47)" fg:x="42112" fg:w="223"/><text x="52.5754%" y="175.50"></text></g><g><title>bitset_container_and_justcard (15 samples, 0.02%)</title><rect x="52.6025%" y="213" width="0.0186%" height="15" fill="rgb(206,201,31)" fg:x="42335" fg:w="15"/><text x="52.8525%" y="223.50"></text></g><g><title>bitset_bitset_container_intersection_inplace (9,999 samples, 12.42%)</title><rect x="51.0294%" y="229" width="12.4241%" height="15" fill="rgb(231,57,52)" fg:x="41069" fg:w="9999"/><text x="51.2794%" y="239.50">bitset_bitset_conta..</text></g><g><title>bitset_extract_intersection_setbits_uint16 (8,718 samples, 10.83%)</title><rect x="52.6211%" y="213" width="10.8324%" height="15" fill="rgb(248,177,22)" fg:x="42350" fg:w="8718"/><text x="52.8711%" y="223.50">bitset_extract_i..</text></g><g><title>_int_free (140 samples, 0.17%)</title><rect x="63.4783%" y="213" width="0.1740%" height="15" fill="rgb(215,211,37)" fg:x="51088" fg:w="140"/><text x="63.7283%" y="223.50"></text></g><g><title>bitset_container_free (189 samples, 0.23%)</title><rect x="63.4535%" y="229" width="0.2348%" height="15" fill="rgb(241,128,51)" fg:x="51068" fg:w="189"/><text x="63.7035%" y="239.50"></text></g><g><title>free (29 samples, 0.04%)</title><rect x="63.6523%" y="213" width="0.0360%" height="15" fill="rgb(227,165,31)" fg:x="51228" fg:w="29"/><text x="63.9023%" y="223.50"></text></g><g><title>container_free (11 samples, 0.01%)</title><rect x="63.6883%" y="229" width="0.0137%" height="15" fill="rgb(228,167,24)" fg:x="51257" fg:w="11"/><text x="63.9383%" y="239.50"></text></g><g><title>ra_downsize (9 samples, 0.01%)</title><rect x="63.7082%" y="229" width="0.0112%" height="15" fill="rgb(228,143,12)" fg:x="51273" fg:w="9"/><text x="63.9582%" y="239.50"></text></g><g><title>roaring_bitmap_and_inplace (28,470 samples, 35.37%)</title><rect x="28.4701%" y="245" width="35.3748%" height="15" fill="rgb(249,149,8)" fg:x="22913" fg:w="28470"/><text x="28.7201%" y="255.50">roaring_bitmap_and_inplace</text></g><g><title>ra_get_key_at_index (101 samples, 0.13%)</title><rect x="63.7194%" y="229" width="0.1255%" height="15" fill="rgb(243,35,44)" fg:x="51282" fg:w="101"/><text x="63.9694%" y="239.50"></text></g><g><title>malloc (241 samples, 0.30%)</title><rect x="63.8449%" y="229" width="0.2994%" height="15" fill="rgb(246,89,9)" fg:x="51383" fg:w="241"/><text x="64.0949%" y="239.50"></text></g><g><title>_int_malloc (82 samples, 0.10%)</title><rect x="64.0424%" y="213" width="0.1019%" height="15" fill="rgb(233,213,13)" fg:x="51542" fg:w="82"/><text x="64.2924%" y="223.50"></text></g><g><title>malloc (109 samples, 0.14%)</title><rect x="64.1505%" y="213" width="0.1354%" height="15" fill="rgb(233,141,41)" fg:x="51629" fg:w="109"/><text x="64.4005%" y="223.50"></text></g><g><title>_int_malloc (41 samples, 0.05%)</title><rect x="64.2350%" y="197" width="0.0509%" height="15" fill="rgb(239,167,4)" fg:x="51697" fg:w="41"/><text x="64.4850%" y="207.50"></text></g><g><title>ra_init_with_capacity (119 samples, 0.15%)</title><rect x="64.1443%" y="229" width="0.1479%" height="15" fill="rgb(209,217,16)" fg:x="51624" fg:w="119"/><text x="64.3943%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.03%)</title><rect x="64.3270%" y="213" width="0.0261%" height="15" fill="rgb(219,88,35)" fg:x="51771" fg:w="21"/><text x="64.5770%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (111 samples, 0.14%)</title><rect x="64.3618%" y="197" width="0.1379%" height="15" fill="rgb(220,193,23)" fg:x="51799" fg:w="111"/><text x="64.6118%" y="207.50"></text></g><g><title>malloc_consolidate (53 samples, 0.07%)</title><rect x="64.6003%" y="149" width="0.0659%" height="15" fill="rgb(230,90,52)" fg:x="51991" fg:w="53"/><text x="64.8503%" y="159.50"></text></g><g><title>array_container_clone (255 samples, 0.32%)</title><rect x="64.3531%" y="213" width="0.3168%" height="15" fill="rgb(252,106,19)" fg:x="51792" fg:w="255"/><text x="64.6031%" y="223.50"></text></g><g><title>array_container_create_given_capacity (137 samples, 0.17%)</title><rect x="64.4997%" y="197" width="0.1702%" height="15" fill="rgb(206,74,20)" fg:x="51910" fg:w="137"/><text x="64.7497%" y="207.50"></text></g><g><title>malloc (133 samples, 0.17%)</title><rect x="64.5047%" y="181" width="0.1653%" height="15" fill="rgb(230,138,44)" fg:x="51914" fg:w="133"/><text x="64.7547%" y="191.50"></text></g><g><title>_int_malloc (102 samples, 0.13%)</title><rect x="64.5432%" y="165" width="0.1267%" height="15" fill="rgb(235,182,43)" fg:x="51945" fg:w="102"/><text x="64.7932%" y="175.50"></text></g><g><title>_int_free (55 samples, 0.07%)</title><rect x="65.5882%" y="149" width="0.0683%" height="15" fill="rgb(242,16,51)" fg:x="52786" fg:w="55"/><text x="65.8382%" y="159.50"></text></g><g><title>__posix_memalign (526 samples, 0.65%)</title><rect x="65.4316%" y="197" width="0.6536%" height="15" fill="rgb(248,9,4)" fg:x="52660" fg:w="526"/><text x="65.6816%" y="207.50"></text></g><g><title>_mid_memalign (501 samples, 0.62%)</title><rect x="65.4627%" y="181" width="0.6225%" height="15" fill="rgb(210,31,22)" fg:x="52685" fg:w="501"/><text x="65.7127%" y="191.50"></text></g><g><title>_int_memalign (441 samples, 0.55%)</title><rect x="65.5372%" y="165" width="0.5480%" height="15" fill="rgb(239,54,39)" fg:x="52745" fg:w="441"/><text x="65.7872%" y="175.50"></text></g><g><title>_int_malloc (345 samples, 0.43%)</title><rect x="65.6565%" y="149" width="0.4287%" height="15" fill="rgb(230,99,41)" fg:x="52841" fg:w="345"/><text x="65.9065%" y="159.50"></text></g><g><title>malloc_consolidate (223 samples, 0.28%)</title><rect x="65.8081%" y="133" width="0.2771%" height="15" fill="rgb(253,106,12)" fg:x="52963" fg:w="223"/><text x="66.0581%" y="143.50"></text></g><g><title>bitset_container_clone (1,234 samples, 1.53%)</title><rect x="64.6699%" y="213" width="1.5333%" height="15" fill="rgb(213,46,41)" fg:x="52047" fg:w="1234"/><text x="64.9199%" y="223.50"></text></g><g><title>malloc (95 samples, 0.12%)</title><rect x="66.0852%" y="197" width="0.1180%" height="15" fill="rgb(215,133,35)" fg:x="53186" fg:w="95"/><text x="66.3352%" y="207.50"></text></g><g><title>_int_malloc (29 samples, 0.04%)</title><rect x="66.1672%" y="181" width="0.0360%" height="15" fill="rgb(213,28,5)" fg:x="53252" fg:w="29"/><text x="66.4172%" y="191.50"></text></g><g><title>container_clone (12 samples, 0.01%)</title><rect x="66.2032%" y="213" width="0.0149%" height="15" fill="rgb(215,77,49)" fg:x="53281" fg:w="12"/><text x="66.4532%" y="223.50"></text></g><g><title>storage::chunk::Columns::lookup (30,388 samples, 37.76%)</title><rect x="28.4663%" y="261" width="37.7580%" height="15" fill="rgb(248,100,22)" fg:x="22910" fg:w="30388"/><text x="28.7163%" y="271.50">storage::chunk::Columns::lookup</text></g><g><title>roaring_bitmap_copy (1,915 samples, 2.38%)</title><rect x="63.8449%" y="245" width="2.3794%" height="15" fill="rgb(208,67,9)" fg:x="51383" fg:w="1915"/><text x="64.0949%" y="255.50">ro..</text></g><g><title>ra_overwrite (1,555 samples, 1.93%)</title><rect x="64.2922%" y="229" width="1.9321%" height="15" fill="rgb(219,133,21)" fg:x="51743" fg:w="1555"/><text x="64.5422%" y="239.50">r..</text></g><g><title>storage::table::Table::new_mutable_chunk (12 samples, 0.01%)</title><rect x="66.2243%" y="261" width="0.0149%" height="15" fill="rgb(246,46,29)" fg:x="53298" fg:w="12"/><text x="66.4743%" y="271.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (31,394 samples, 39.01%)</title><rect x="27.8811%" y="325" width="39.0080%" height="15" fill="rgb(246,185,52)" fg:x="22439" fg:w="31394"/><text x="28.1311%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31,394 samples, 39.01%)</title><rect x="27.8811%" y="309" width="39.0080%" height="15" fill="rgb(252,136,11)" fg:x="22439" fg:w="31394"/><text x="28.1311%" y="319.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::fut..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (31,394 samples, 39.01%)</title><rect x="27.8811%" y="293" width="39.0080%" height="15" fill="rgb(219,138,53)" fg:x="22439" fg:w="31394"/><text x="28.1311%" y="303.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (31,394 samples, 39.01%)</title><rect x="27.8811%" y="277" width="39.0080%" height="15" fill="rgb(211,51,23)" fg:x="22439" fg:w="31394"/><text x="28.1311%" y="287.50">storage::Storage::new::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::task::waker::wake_by_val (523 samples, 0.65%)</title><rect x="66.2392%" y="261" width="0.6498%" height="15" fill="rgb(247,221,28)" fg:x="53310" fg:w="523"/><text x="66.4892%" y="271.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (523 samples, 0.65%)</title><rect x="66.2392%" y="245" width="0.6498%" height="15" fill="rgb(251,222,45)" fg:x="53310" fg:w="523"/><text x="66.4892%" y="255.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (523 samples, 0.65%)</title><rect x="66.2392%" y="229" width="0.6498%" height="15" fill="rgb(217,162,53)" fg:x="53310" fg:w="523"/><text x="66.4892%" y="239.50"></text></g><g><title>pthread_mutex_lock (523 samples, 0.65%)</title><rect x="66.2392%" y="213" width="0.6498%" height="15" fill="rgb(229,93,14)" fg:x="53310" fg:w="523"/><text x="66.4892%" y="223.50"></text></g><g><title>__lll_lock_wait (521 samples, 0.65%)</title><rect x="66.2417%" y="197" width="0.6474%" height="15" fill="rgb(209,67,49)" fg:x="53312" fg:w="521"/><text x="66.4917%" y="207.50"></text></g><g><title>[unknown] (53,832 samples, 66.89%)</title><rect x="0.0062%" y="341" width="66.8878%" height="15" fill="rgb(213,87,29)" fg:x="5" fg:w="53832"/><text x="0.2562%" y="351.50">[unknown]</text></g><g><title>__clone (93 samples, 0.12%)</title><rect x="66.8940%" y="341" width="0.1156%" height="15" fill="rgb(205,151,52)" fg:x="53837" fg:w="93"/><text x="67.1440%" y="351.50"></text></g><g><title>async_page_fault (12 samples, 0.01%)</title><rect x="67.0419%" y="325" width="0.0149%" height="15" fill="rgb(253,215,39)" fg:x="53956" fg:w="12"/><text x="67.2919%" y="335.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (22 samples, 0.03%)</title><rect x="67.0394%" y="341" width="0.0273%" height="15" fill="rgb(221,220,41)" fg:x="53954" fg:w="22"/><text x="67.2894%" y="351.50"></text></g><g><title>t0 (53,987 samples, 67.08%)</title><rect x="0.0000%" y="357" width="67.0804%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="53987"/><text x="0.2500%" y="367.50">t0</text></g><g><title>pthread_getattr_np (18 samples, 0.02%)</title><rect x="67.0804%" y="245" width="0.0224%" height="15" fill="rgb(221,193,43)" fg:x="53987" fg:w="18"/><text x="67.3304%" y="255.50"></text></g><g><title>malloc (17 samples, 0.02%)</title><rect x="67.0817%" y="229" width="0.0211%" height="15" fill="rgb(240,128,52)" fg:x="53988" fg:w="17"/><text x="67.3317%" y="239.50"></text></g><g><title>arena_get2.part.3 (17 samples, 0.02%)</title><rect x="67.0817%" y="213" width="0.0211%" height="15" fill="rgb(253,114,12)" fg:x="53988" fg:w="17"/><text x="67.3317%" y="223.50"></text></g><g><title>new_heap (15 samples, 0.02%)</title><rect x="67.0842%" y="197" width="0.0186%" height="15" fill="rgb(215,223,47)" fg:x="53990" fg:w="15"/><text x="67.3342%" y="207.50"></text></g><g><title>std::sys::unix::thread::guard::current (19 samples, 0.02%)</title><rect x="67.0804%" y="261" width="0.0236%" height="15" fill="rgb(248,225,23)" fg:x="53987" fg:w="19"/><text x="67.3304%" y="271.50"></text></g><g><title>pthread_mutex_lock (37 samples, 0.05%)</title><rect x="67.2594%" y="213" width="0.0460%" height="15" fill="rgb(250,108,0)" fg:x="54131" fg:w="37"/><text x="67.5094%" y="223.50"></text></g><g><title>__lll_lock_wait (13 samples, 0.02%)</title><rect x="67.2892%" y="197" width="0.0162%" height="15" fill="rgb(228,208,7)" fg:x="54155" fg:w="13"/><text x="67.5392%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (327 samples, 0.41%)</title><rect x="67.9639%" y="197" width="0.4063%" height="15" fill="rgb(244,45,10)" fg:x="54698" fg:w="327"/><text x="68.2139%" y="207.50"></text></g><g><title>__lll_unlock_wake (13 samples, 0.02%)</title><rect x="68.3540%" y="181" width="0.0162%" height="15" fill="rgb(207,125,25)" fg:x="55012" fg:w="13"/><text x="68.6040%" y="191.50"></text></g><g><title>apic_timer_interrupt (10 samples, 0.01%)</title><rect x="70.6900%" y="165" width="0.0124%" height="15" fill="rgb(210,195,18)" fg:x="56892" fg:w="10"/><text x="70.9400%" y="175.50"></text></g><g><title>__lll_lock_wait (1,509 samples, 1.87%)</title><rect x="68.8473%" y="181" width="1.8750%" height="15" fill="rgb(249,80,12)" fg:x="55409" fg:w="1509"/><text x="69.0973%" y="191.50">_..</text></g><g><title>pthread_mutex_lock (1,895 samples, 2.35%)</title><rect x="68.3702%" y="197" width="2.3546%" height="15" fill="rgb(221,65,9)" fg:x="55025" fg:w="1895"/><text x="68.6202%" y="207.50">p..</text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (2,753 samples, 3.42%)</title><rect x="67.3053%" y="213" width="3.4207%" height="15" fill="rgb(235,49,36)" fg:x="54168" fg:w="2753"/><text x="67.5553%" y="223.50">tok..</text></g><g><title>__pthread_mutex_unlock_usercnt (9 samples, 0.01%)</title><rect x="70.8403%" y="181" width="0.0112%" height="15" fill="rgb(225,32,20)" fg:x="57013" fg:w="9"/><text x="71.0903%" y="191.50"></text></g><g><title>__pthread_disable_asynccancel (76 samples, 0.09%)</title><rect x="72.2481%" y="165" width="0.0944%" height="15" fill="rgb(215,141,46)" fg:x="58146" fg:w="76"/><text x="72.4981%" y="175.50"></text></g><g><title>__pthread_mutex_cond_lock (17 samples, 0.02%)</title><rect x="72.3425%" y="165" width="0.0211%" height="15" fill="rgb(250,160,47)" fg:x="58222" fg:w="17"/><text x="72.5925%" y="175.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (1,236 samples, 1.54%)</title><rect x="70.8515%" y="181" width="1.5358%" height="15" fill="rgb(216,222,40)" fg:x="57022" fg:w="1236"/><text x="71.1015%" y="191.50"></text></g><g><title>__clock_gettime (9 samples, 0.01%)</title><rect x="72.3972%" y="165" width="0.0112%" height="15" fill="rgb(234,217,39)" fg:x="58266" fg:w="9"/><text x="72.6472%" y="175.50"></text></g><g><title>__libc_disable_asynccancel (22 samples, 0.03%)</title><rect x="73.1974%" y="133" width="0.0273%" height="15" fill="rgb(207,178,40)" fg:x="58910" fg:w="22"/><text x="73.4474%" y="143.50"></text></g><g><title>[libc-2.24.so] (617 samples, 0.77%)</title><rect x="72.4668%" y="149" width="0.7666%" height="15" fill="rgb(221,136,13)" fg:x="58322" fg:w="617"/><text x="72.7168%" y="159.50"></text></g><g><title>tokio::io::driver::Driver::turn (670 samples, 0.83%)</title><rect x="72.4196%" y="165" width="0.8325%" height="15" fill="rgb(249,199,10)" fg:x="58284" fg:w="670"/><text x="72.6696%" y="175.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (11 samples, 0.01%)</title><rect x="73.2384%" y="149" width="0.0137%" height="15" fill="rgb(249,222,13)" fg:x="58943" fg:w="11"/><text x="73.4884%" y="159.50"></text></g><g><title>pthread_mutex_lock (9 samples, 0.01%)</title><rect x="73.2409%" y="133" width="0.0112%" height="15" fill="rgb(244,185,38)" fg:x="58945" fg:w="9"/><text x="73.4909%" y="143.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (20 samples, 0.02%)</title><rect x="73.2521%" y="165" width="0.0249%" height="15" fill="rgb(236,202,9)" fg:x="58954" fg:w="20"/><text x="73.5021%" y="175.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (2,022 samples, 2.51%)</title><rect x="70.7658%" y="197" width="2.5124%" height="15" fill="rgb(250,229,37)" fg:x="56953" fg:w="2022"/><text x="71.0158%" y="207.50">&lt;t..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (714 samples, 0.89%)</title><rect x="72.3910%" y="181" width="0.8872%" height="15" fill="rgb(206,174,23)" fg:x="58261" fg:w="714"/><text x="72.6410%" y="191.50"></text></g><g><title>tokio::io::driver::Driver::turn (12 samples, 0.01%)</title><rect x="73.3204%" y="165" width="0.0149%" height="15" fill="rgb(211,33,43)" fg:x="59009" fg:w="12"/><text x="73.5704%" y="175.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (11 samples, 0.01%)</title><rect x="73.3353%" y="165" width="0.0137%" height="15" fill="rgb(245,58,50)" fg:x="59021" fg:w="11"/><text x="73.5853%" y="175.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2,113 samples, 2.63%)</title><rect x="70.7260%" y="213" width="2.6255%" height="15" fill="rgb(244,68,36)" fg:x="56921" fg:w="2113"/><text x="70.9760%" y="223.50">to..</text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (59 samples, 0.07%)</title><rect x="73.2782%" y="197" width="0.0733%" height="15" fill="rgb(232,229,15)" fg:x="58975" fg:w="59"/><text x="73.5282%" y="207.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (49 samples, 0.06%)</title><rect x="73.2906%" y="181" width="0.0609%" height="15" fill="rgb(254,30,23)" fg:x="58985" fg:w="49"/><text x="73.5406%" y="191.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (28 samples, 0.03%)</title><rect x="73.4695%" y="197" width="0.0348%" height="15" fill="rgb(235,160,14)" fg:x="59129" fg:w="28"/><text x="73.7195%" y="207.50"></text></g><g><title>pthread_mutex_lock (10 samples, 0.01%)</title><rect x="73.4919%" y="181" width="0.0124%" height="15" fill="rgb(212,155,44)" fg:x="59147" fg:w="10"/><text x="73.7419%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.02%)</title><rect x="78.1166%" y="149" width="0.0186%" height="15" fill="rgb(226,2,50)" fg:x="62869" fg:w="15"/><text x="78.3666%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (129 samples, 0.16%)</title><rect x="78.1352%" y="149" width="0.1603%" height="15" fill="rgb(234,177,6)" fg:x="62884" fg:w="129"/><text x="78.3852%" y="159.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (23 samples, 0.03%)</title><rect x="78.2955%" y="149" width="0.0286%" height="15" fill="rgb(217,24,9)" fg:x="63013" fg:w="23"/><text x="78.5455%" y="159.50"></text></g><g><title>_mi_free_block_mt (1,007 samples, 1.25%)</title><rect x="78.3241%" y="149" width="1.2512%" height="15" fill="rgb(220,13,46)" fg:x="63036" fg:w="1007"/><text x="78.5741%" y="159.50"></text></g><g><title>_mi_page_free_collect (1,318 samples, 1.64%)</title><rect x="79.6884%" y="101" width="1.6377%" height="15" fill="rgb(239,221,27)" fg:x="64134" fg:w="1318"/><text x="79.9384%" y="111.50"></text></g><g><title>_mi_heap_delayed_free (1,440 samples, 1.79%)</title><rect x="79.5902%" y="133" width="1.7892%" height="15" fill="rgb(222,198,25)" fg:x="64055" fg:w="1440"/><text x="79.8402%" y="143.50">_..</text></g><g><title>_mi_free_delayed_block (1,371 samples, 1.70%)</title><rect x="79.6759%" y="117" width="1.7035%" height="15" fill="rgb(211,99,13)" fg:x="64124" fg:w="1371"/><text x="79.9259%" y="127.50"></text></g><g><title>_mi_page_use_delayed_free (42 samples, 0.05%)</title><rect x="81.3273%" y="101" width="0.0522%" height="15" fill="rgb(232,111,31)" fg:x="65453" fg:w="42"/><text x="81.5773%" y="111.50"></text></g><g><title>_mi_segment_page_alloc (18 samples, 0.02%)</title><rect x="81.3857%" y="117" width="0.0224%" height="15" fill="rgb(245,82,37)" fg:x="65500" fg:w="18"/><text x="81.6357%" y="127.50"></text></g><g><title>mi_segment_reclaim_or_alloc (14 samples, 0.02%)</title><rect x="81.3906%" y="101" width="0.0174%" height="15" fill="rgb(227,149,46)" fg:x="65504" fg:w="14"/><text x="81.6406%" y="111.50"></text></g><g><title>mi_segment_init.constprop.103 (14 samples, 0.02%)</title><rect x="81.3906%" y="85" width="0.0174%" height="15" fill="rgb(218,36,50)" fg:x="65504" fg:w="14"/><text x="81.6406%" y="95.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (24 samples, 0.03%)</title><rect x="81.4080%" y="117" width="0.0298%" height="15" fill="rgb(226,80,48)" fg:x="65518" fg:w="24"/><text x="81.6580%" y="127.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (23 samples, 0.03%)</title><rect x="81.4093%" y="101" width="0.0286%" height="15" fill="rgb(238,224,15)" fg:x="65519" fg:w="23"/><text x="81.6593%" y="111.50"></text></g><g><title>mi_page_queue_find_free_ex (74 samples, 0.09%)</title><rect x="81.3832%" y="133" width="0.0919%" height="15" fill="rgb(241,136,10)" fg:x="65498" fg:w="74"/><text x="81.6332%" y="143.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (30 samples, 0.04%)</title><rect x="81.4379%" y="117" width="0.0373%" height="15" fill="rgb(208,32,45)" fg:x="65542" fg:w="30"/><text x="81.6879%" y="127.50"></text></g><g><title>_mi_malloc_generic (1,547 samples, 1.92%)</title><rect x="79.5753%" y="149" width="1.9222%" height="15" fill="rgb(207,135,9)" fg:x="64043" fg:w="1547"/><text x="79.8253%" y="159.50">_..</text></g><g><title>mi_thread_init (18 samples, 0.02%)</title><rect x="81.4751%" y="133" width="0.0224%" height="15" fill="rgb(206,86,44)" fg:x="65572" fg:w="18"/><text x="81.7251%" y="143.50"></text></g><g><title>_mi_page_free_collect (278 samples, 0.35%)</title><rect x="81.5484%" y="69" width="0.3454%" height="15" fill="rgb(245,177,15)" fg:x="65631" fg:w="278"/><text x="81.7984%" y="79.50"></text></g><g><title>_mi_heap_delayed_free (298 samples, 0.37%)</title><rect x="81.5323%" y="101" width="0.3703%" height="15" fill="rgb(206,64,50)" fg:x="65618" fg:w="298"/><text x="81.7823%" y="111.50"></text></g><g><title>_mi_free_delayed_block (286 samples, 0.36%)</title><rect x="81.5472%" y="85" width="0.3554%" height="15" fill="rgb(234,36,40)" fg:x="65630" fg:w="286"/><text x="81.7972%" y="95.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (12 samples, 0.01%)</title><rect x="81.9026%" y="85" width="0.0149%" height="15" fill="rgb(213,64,8)" fg:x="65916" fg:w="12"/><text x="82.1526%" y="95.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (11 samples, 0.01%)</title><rect x="81.9038%" y="69" width="0.0137%" height="15" fill="rgb(210,75,36)" fg:x="65917" fg:w="11"/><text x="82.1538%" y="79.50"></text></g><g><title>_mi_malloc_generic (319 samples, 0.40%)</title><rect x="81.5286%" y="117" width="0.3964%" height="15" fill="rgb(229,88,21)" fg:x="65615" fg:w="319"/><text x="81.7786%" y="127.50"></text></g><g><title>mi_page_queue_find_free_ex (18 samples, 0.02%)</title><rect x="81.9026%" y="101" width="0.0224%" height="15" fill="rgb(252,204,47)" fg:x="65916" fg:w="18"/><text x="82.1526%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (536 samples, 0.67%)</title><rect x="81.4975%" y="149" width="0.6660%" height="15" fill="rgb(208,77,27)" fg:x="65590" fg:w="536"/><text x="81.7475%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (521 samples, 0.65%)</title><rect x="81.5161%" y="133" width="0.6474%" height="15" fill="rgb(221,76,26)" fg:x="65605" fg:w="521"/><text x="81.7661%" y="143.50"></text></g><g><title>mi_malloc (192 samples, 0.24%)</title><rect x="81.9249%" y="117" width="0.2386%" height="15" fill="rgb(225,139,18)" fg:x="65934" fg:w="192"/><text x="82.1749%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (23 samples, 0.03%)</title><rect x="82.1635%" y="149" width="0.0286%" height="15" fill="rgb(230,137,11)" fg:x="66126" fg:w="23"/><text x="82.4135%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;proto::prometheus::Exemplar&gt;&gt; (60 samples, 0.07%)</title><rect x="82.1933%" y="149" width="0.0746%" height="15" fill="rgb(212,28,1)" fg:x="66150" fg:w="60"/><text x="82.4433%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;runtime::Runtime&lt;storage::Request&gt;::send::{{closure}}&gt;&gt; (9 samples, 0.01%)</title><rect x="82.2741%" y="149" width="0.0112%" height="15" fill="rgb(248,164,17)" fg:x="66215" fg:w="9"/><text x="82.5241%" y="159.50"></text></g><g><title>event_listener::Inner::lock (692 samples, 0.86%)</title><rect x="82.2952%" y="149" width="0.8598%" height="15" fill="rgb(222,171,42)" fg:x="66232" fg:w="692"/><text x="82.5452%" y="159.50"></text></g><g><title>pthread_mutex_lock (667 samples, 0.83%)</title><rect x="82.3263%" y="133" width="0.8288%" height="15" fill="rgb(243,84,45)" fg:x="66257" fg:w="667"/><text x="82.5763%" y="143.50"></text></g><g><title>__lll_lock_wait (587 samples, 0.73%)</title><rect x="82.4257%" y="117" width="0.7294%" height="15" fill="rgb(252,49,23)" fg:x="66337" fg:w="587"/><text x="82.6757%" y="127.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (9 samples, 0.01%)</title><rect x="83.1786%" y="133" width="0.0112%" height="15" fill="rgb(215,19,7)" fg:x="66943" fg:w="9"/><text x="83.4286%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (10 samples, 0.01%)</title><rect x="83.5042%" y="53" width="0.0124%" height="15" fill="rgb(238,81,41)" fg:x="67205" fg:w="10"/><text x="83.7542%" y="63.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (30 samples, 0.04%)</title><rect x="83.4855%" y="85" width="0.0373%" height="15" fill="rgb(210,199,37)" fg:x="67190" fg:w="30"/><text x="83.7355%" y="95.50"></text></g><g><title>tracing_log::dispatch_record::_{{closure}} (21 samples, 0.03%)</title><rect x="83.4967%" y="69" width="0.0261%" height="15" fill="rgb(244,192,49)" fg:x="67199" fg:w="21"/><text x="83.7467%" y="79.50"></text></g><g><title>__pthread_disable_asynccancel (9 samples, 0.01%)</title><rect x="83.5377%" y="69" width="0.0112%" height="15" fill="rgb(226,211,11)" fg:x="67232" fg:w="9"/><text x="83.7877%" y="79.50"></text></g><g><title>event_listener::List::notify (319 samples, 0.40%)</title><rect x="83.1550%" y="149" width="0.3964%" height="15" fill="rgb(236,162,54)" fg:x="66924" fg:w="319"/><text x="83.4050%" y="159.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (291 samples, 0.36%)</title><rect x="83.1898%" y="133" width="0.3616%" height="15" fill="rgb(220,229,9)" fg:x="66952" fg:w="291"/><text x="83.4398%" y="143.50"></text></g><g><title>runtime::executor::schedule::_{{closure}}::_{{closure}} (239 samples, 0.30%)</title><rect x="83.2544%" y="117" width="0.2970%" height="15" fill="rgb(250,87,22)" fg:x="67004" fg:w="239"/><text x="83.5044%" y="127.50"></text></g><g><title>polling::Poller::notify (95 samples, 0.12%)</title><rect x="83.4334%" y="101" width="0.1180%" height="15" fill="rgb(239,43,17)" fg:x="67148" fg:w="95"/><text x="83.6834%" y="111.50"></text></g><g><title>__GI___libc_write (23 samples, 0.03%)</title><rect x="83.5228%" y="85" width="0.0286%" height="15" fill="rgb(231,177,25)" fg:x="67220" fg:w="23"/><text x="83.7728%" y="95.50"></text></g><g><title>mi_free (131 samples, 0.16%)</title><rect x="83.5514%" y="149" width="0.1628%" height="15" fill="rgb(219,179,1)" fg:x="67243" fg:w="131"/><text x="83.8014%" y="159.50"></text></g><g><title>mi_free_generic (207 samples, 0.26%)</title><rect x="83.7142%" y="149" width="0.2572%" height="15" fill="rgb(238,219,53)" fg:x="67374" fg:w="207"/><text x="83.9642%" y="159.50"></text></g><g><title>mi_malloc (783 samples, 0.97%)</title><rect x="83.9714%" y="149" width="0.9729%" height="15" fill="rgb(232,167,36)" fg:x="67581" fg:w="783"/><text x="84.2214%" y="159.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (21 samples, 0.03%)</title><rect x="85.1953%" y="117" width="0.0261%" height="15" fill="rgb(244,19,51)" fg:x="68566" fg:w="21"/><text x="85.4453%" y="127.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (28 samples, 0.03%)</title><rect x="85.2487%" y="101" width="0.0348%" height="15" fill="rgb(224,6,22)" fg:x="68609" fg:w="28"/><text x="85.4987%" y="111.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (112 samples, 0.14%)</title><rect x="85.1704%" y="133" width="0.1392%" height="15" fill="rgb(224,145,5)" fg:x="68546" fg:w="112"/><text x="85.4204%" y="143.50"></text></g><g><title>tracing_log::dispatch_record::_{{closure}} (68 samples, 0.08%)</title><rect x="85.2251%" y="117" width="0.0845%" height="15" fill="rgb(234,130,49)" fg:x="68590" fg:w="68"/><text x="85.4751%" y="127.50"></text></g><g><title>tracing_log::loglevel_to_cs (21 samples, 0.03%)</title><rect x="85.2835%" y="101" width="0.0261%" height="15" fill="rgb(254,6,2)" fg:x="68637" fg:w="21"/><text x="85.5335%" y="111.50"></text></g><g><title>polling::Poller::notify (303 samples, 0.38%)</title><rect x="84.9443%" y="149" width="0.3765%" height="15" fill="rgb(208,96,46)" fg:x="68364" fg:w="303"/><text x="85.1943%" y="159.50"></text></g><g><title>__GI___libc_write (9 samples, 0.01%)</title><rect x="85.3096%" y="133" width="0.0112%" height="15" fill="rgb(239,3,39)" fg:x="68658" fg:w="9"/><text x="85.5596%" y="143.50"></text></g><g><title>prost::encoding::decode_varint (135 samples, 0.17%)</title><rect x="85.3208%" y="149" width="0.1677%" height="15" fill="rgb(233,210,1)" fg:x="68667" fg:w="135"/><text x="85.5708%" y="159.50"></text></g><g><title>prost::encoding::double::merge (26 samples, 0.03%)</title><rect x="85.4885%" y="149" width="0.0323%" height="15" fill="rgb(244,137,37)" fg:x="68802" fg:w="26"/><text x="85.7385%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.03%)</title><rect x="87.0578%" y="85" width="0.0311%" height="15" fill="rgb(240,136,2)" fg:x="70065" fg:w="25"/><text x="87.3078%" y="95.50"></text></g><g><title>_mi_page_free_collect (206 samples, 0.26%)</title><rect x="87.1050%" y="37" width="0.2560%" height="15" fill="rgb(239,18,37)" fg:x="70103" fg:w="206"/><text x="87.3550%" y="47.50"></text></g><g><title>_mi_heap_delayed_free (227 samples, 0.28%)</title><rect x="87.0901%" y="69" width="0.2821%" height="15" fill="rgb(218,185,22)" fg:x="70091" fg:w="227"/><text x="87.3401%" y="79.50"></text></g><g><title>_mi_free_delayed_block (216 samples, 0.27%)</title><rect x="87.1038%" y="53" width="0.2684%" height="15" fill="rgb(225,218,4)" fg:x="70102" fg:w="216"/><text x="87.3538%" y="63.50"></text></g><g><title>_mi_page_use_delayed_free (9 samples, 0.01%)</title><rect x="87.3610%" y="37" width="0.0112%" height="15" fill="rgb(230,182,32)" fg:x="70309" fg:w="9"/><text x="87.6110%" y="47.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (9 samples, 0.01%)</title><rect x="87.3722%" y="53" width="0.0112%" height="15" fill="rgb(242,56,43)" fg:x="70318" fg:w="9"/><text x="87.6222%" y="63.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (9 samples, 0.01%)</title><rect x="87.3722%" y="37" width="0.0112%" height="15" fill="rgb(233,99,24)" fg:x="70318" fg:w="9"/><text x="87.6222%" y="47.50"></text></g><g><title>_mi_malloc_generic (250 samples, 0.31%)</title><rect x="87.0889%" y="85" width="0.3106%" height="15" fill="rgb(234,209,42)" fg:x="70090" fg:w="250"/><text x="87.3389%" y="95.50"></text></g><g><title>mi_page_queue_find_free_ex (22 samples, 0.03%)</title><rect x="87.3722%" y="69" width="0.0273%" height="15" fill="rgb(227,7,12)" fg:x="70318" fg:w="22"/><text x="87.6222%" y="79.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (13 samples, 0.02%)</title><rect x="87.3834%" y="53" width="0.0162%" height="15" fill="rgb(245,203,43)" fg:x="70327" fg:w="13"/><text x="87.6334%" y="63.50"></text></g><g><title>_mi_page_retire (34 samples, 0.04%)</title><rect x="87.3995%" y="85" width="0.0422%" height="15" fill="rgb(238,205,33)" fg:x="70340" fg:w="34"/><text x="87.6495%" y="95.50"></text></g><g><title>_mi_heap_realloc_zero (534 samples, 0.66%)</title><rect x="86.7981%" y="101" width="0.6635%" height="15" fill="rgb(231,56,7)" fg:x="69856" fg:w="534"/><text x="87.0481%" y="111.50"></text></g><g><title>mi_free (16 samples, 0.02%)</title><rect x="87.4418%" y="85" width="0.0199%" height="15" fill="rgb(244,186,29)" fg:x="70374" fg:w="16"/><text x="87.6918%" y="95.50"></text></g><g><title>_mi_page_free_collect (1,295 samples, 1.61%)</title><rect x="87.5349%" y="53" width="1.6091%" height="15" fill="rgb(234,111,31)" fg:x="70449" fg:w="1295"/><text x="87.7849%" y="63.50"></text></g><g><title>_mi_heap_delayed_free (1,389 samples, 1.73%)</title><rect x="87.4728%" y="85" width="1.7259%" height="15" fill="rgb(241,149,10)" fg:x="70399" fg:w="1389"/><text x="87.7228%" y="95.50"></text></g><g><title>_mi_free_delayed_block (1,347 samples, 1.67%)</title><rect x="87.5250%" y="69" width="1.6737%" height="15" fill="rgb(249,206,44)" fg:x="70441" fg:w="1347"/><text x="87.7750%" y="79.50"></text></g><g><title>_mi_page_use_delayed_free (44 samples, 0.05%)</title><rect x="89.1440%" y="53" width="0.0547%" height="15" fill="rgb(251,153,30)" fg:x="71744" fg:w="44"/><text x="89.3940%" y="63.50"></text></g><g><title>_mi_malloc_generic (1,408 samples, 1.75%)</title><rect x="87.4616%" y="101" width="1.7495%" height="15" fill="rgb(239,152,38)" fg:x="70390" fg:w="1408"/><text x="87.7116%" y="111.50"></text></g><g><title>mi_malloc (79 samples, 0.10%)</title><rect x="89.2186%" y="101" width="0.0982%" height="15" fill="rgb(249,139,47)" fg:x="71804" fg:w="79"/><text x="89.4686%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,078 samples, 2.58%)</title><rect x="86.7497%" y="133" width="2.5820%" height="15" fill="rgb(244,64,35)" fg:x="69817" fg:w="2078"/><text x="86.9997%" y="143.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (2,049 samples, 2.55%)</title><rect x="86.7857%" y="117" width="2.5459%" height="15" fill="rgb(216,46,15)" fg:x="69846" fg:w="2049"/><text x="87.0357%" y="127.50">al..</text></g><g><title>mi_realloc (12 samples, 0.01%)</title><rect x="89.3167%" y="101" width="0.0149%" height="15" fill="rgb(250,74,19)" fg:x="71883" fg:w="12"/><text x="89.5667%" y="111.50"></text></g><g><title>prost::encoding::decode_varint (197 samples, 0.24%)</title><rect x="89.3316%" y="133" width="0.2448%" height="15" fill="rgb(249,42,33)" fg:x="71895" fg:w="197"/><text x="89.5816%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (102 samples, 0.13%)</title><rect x="92.0925%" y="117" width="0.1267%" height="15" fill="rgb(242,149,17)" fg:x="74117" fg:w="102"/><text x="92.3425%" y="127.50"></text></g><g><title>_mi_page_free_collect (252 samples, 0.31%)</title><rect x="92.2367%" y="69" width="0.3131%" height="15" fill="rgb(244,29,21)" fg:x="74233" fg:w="252"/><text x="92.4867%" y="79.50"></text></g><g><title>_mi_heap_delayed_free (279 samples, 0.35%)</title><rect x="92.2193%" y="101" width="0.3467%" height="15" fill="rgb(220,130,37)" fg:x="74219" fg:w="279"/><text x="92.4693%" y="111.50"></text></g><g><title>_mi_free_delayed_block (266 samples, 0.33%)</title><rect x="92.2354%" y="85" width="0.3305%" height="15" fill="rgb(211,67,2)" fg:x="74232" fg:w="266"/><text x="92.4854%" y="95.50"></text></g><g><title>_mi_page_use_delayed_free (13 samples, 0.02%)</title><rect x="92.5498%" y="69" width="0.0162%" height="15" fill="rgb(235,68,52)" fg:x="74485" fg:w="13"/><text x="92.7998%" y="79.50"></text></g><g><title>_mi_page_free_collect (10 samples, 0.01%)</title><rect x="92.5659%" y="101" width="0.0124%" height="15" fill="rgb(246,142,3)" fg:x="74498" fg:w="10"/><text x="92.8159%" y="111.50"></text></g><g><title>_mi_malloc_generic (317 samples, 0.39%)</title><rect x="92.2193%" y="117" width="0.3939%" height="15" fill="rgb(241,25,7)" fg:x="74219" fg:w="317"/><text x="92.4693%" y="127.50"></text></g><g><title>mi_page_queue_find_free_ex (28 samples, 0.03%)</title><rect x="92.5784%" y="101" width="0.0348%" height="15" fill="rgb(242,119,39)" fg:x="74508" fg:w="28"/><text x="92.8284%" y="111.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (21 samples, 0.03%)</title><rect x="92.5871%" y="85" width="0.0261%" height="15" fill="rgb(241,98,45)" fg:x="74515" fg:w="21"/><text x="92.8371%" y="95.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (21 samples, 0.03%)</title><rect x="92.5871%" y="69" width="0.0261%" height="15" fill="rgb(254,28,30)" fg:x="74515" fg:w="21"/><text x="92.8371%" y="79.50"></text></g><g><title>_mi_page_free_collect (240 samples, 0.30%)</title><rect x="92.8629%" y="37" width="0.2982%" height="15" fill="rgb(241,142,54)" fg:x="74737" fg:w="240"/><text x="93.1129%" y="47.50"></text></g><g><title>_mi_heap_delayed_free (263 samples, 0.33%)</title><rect x="92.8443%" y="69" width="0.3268%" height="15" fill="rgb(222,85,15)" fg:x="74722" fg:w="263"/><text x="93.0943%" y="79.50"></text></g><g><title>_mi_free_delayed_block (253 samples, 0.31%)</title><rect x="92.8567%" y="53" width="0.3144%" height="15" fill="rgb(210,85,47)" fg:x="74732" fg:w="253"/><text x="93.1067%" y="63.50"></text></g><g><title>_mi_page_free_collect (15 samples, 0.02%)</title><rect x="93.1711%" y="69" width="0.0186%" height="15" fill="rgb(224,206,25)" fg:x="74985" fg:w="15"/><text x="93.4211%" y="79.50"></text></g><g><title>_mi_malloc_generic (286 samples, 0.36%)</title><rect x="92.8418%" y="85" width="0.3554%" height="15" fill="rgb(243,201,19)" fg:x="74720" fg:w="286"/><text x="93.0918%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,322 samples, 1.64%)</title><rect x="92.6132%" y="117" width="1.6426%" height="15" fill="rgb(236,59,4)" fg:x="74536" fg:w="1322"/><text x="92.8632%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,231 samples, 1.53%)</title><rect x="92.7262%" y="101" width="1.5296%" height="15" fill="rgb(254,179,45)" fg:x="74627" fg:w="1231"/><text x="92.9762%" y="111.50"></text></g><g><title>mi_malloc (852 samples, 1.06%)</title><rect x="93.1972%" y="85" width="1.0586%" height="15" fill="rgb(226,14,10)" fg:x="75006" fg:w="852"/><text x="93.4472%" y="95.50"></text></g><g><title>bytes::bytes::promotable_even_drop (59 samples, 0.07%)</title><rect x="94.2558%" y="117" width="0.0733%" height="15" fill="rgb(244,27,41)" fg:x="75858" fg:w="59"/><text x="94.5058%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (366 samples, 0.45%)</title><rect x="94.3291%" y="117" width="0.4548%" height="15" fill="rgb(235,35,32)" fg:x="75917" fg:w="366"/><text x="94.5791%" y="127.50"></text></g><g><title>mi_free (292 samples, 0.36%)</title><rect x="94.7851%" y="117" width="0.3628%" height="15" fill="rgb(218,68,31)" fg:x="76284" fg:w="292"/><text x="95.0351%" y="127.50"></text></g><g><title>mi_malloc (1,156 samples, 1.44%)</title><rect x="95.1479%" y="117" width="1.4364%" height="15" fill="rgb(207,120,37)" fg:x="76576" fg:w="1156"/><text x="95.3979%" y="127.50"></text></g><g><title>prost::encoding::message::merge_repeated (9,124 samples, 11.34%)</title><rect x="85.5208%" y="149" width="11.3368%" height="15" fill="rgb(227,98,0)" fg:x="68828" fg:w="9124"/><text x="85.7708%" y="159.50">prost::encoding::..</text></g><g><title>prost::encoding::string::merge (5,860 samples, 7.28%)</title><rect x="89.5764%" y="133" width="7.2812%" height="15" fill="rgb(207,7,3)" fg:x="72092" fg:w="5860"/><text x="89.8264%" y="143.50">prost::enc..</text></g><g><title>prost::encoding::decode_varint (220 samples, 0.27%)</title><rect x="96.5843%" y="117" width="0.2734%" height="15" fill="rgb(206,98,19)" fg:x="77732" fg:w="220"/><text x="96.8343%" y="127.50"></text></g><g><title>__memcmp_sse4_1 (666 samples, 0.83%)</title><rect x="97.9560%" y="133" width="0.8275%" height="15" fill="rgb(217,5,26)" fg:x="78836" fg:w="666"/><text x="98.2060%" y="143.50"></text></g><g><title>_mi_page_free_collect (188 samples, 0.23%)</title><rect x="98.8047%" y="85" width="0.2336%" height="15" fill="rgb(235,190,38)" fg:x="79519" fg:w="188"/><text x="99.0547%" y="95.50"></text></g><g><title>_mi_heap_delayed_free (215 samples, 0.27%)</title><rect x="98.7860%" y="117" width="0.2671%" height="15" fill="rgb(247,86,24)" fg:x="79504" fg:w="215"/><text x="99.0360%" y="127.50"></text></g><g><title>_mi_free_delayed_block (203 samples, 0.25%)</title><rect x="98.8010%" y="101" width="0.2522%" height="15" fill="rgb(205,101,16)" fg:x="79516" fg:w="203"/><text x="99.0510%" y="111.50"></text></g><g><title>_mi_page_use_delayed_free (12 samples, 0.01%)</title><rect x="99.0383%" y="85" width="0.0149%" height="15" fill="rgb(246,168,33)" fg:x="79707" fg:w="12"/><text x="99.2883%" y="95.50"></text></g><g><title>_mi_malloc_generic (218 samples, 0.27%)</title><rect x="98.7836%" y="133" width="0.2709%" height="15" fill="rgb(231,114,1)" fg:x="79502" fg:w="218"/><text x="99.0336%" y="143.50"></text></g><g><title>mi_free (45 samples, 0.06%)</title><rect x="99.0544%" y="133" width="0.0559%" height="15" fill="rgb(207,184,53)" fg:x="79720" fg:w="45"/><text x="99.3044%" y="143.50"></text></g><g><title>storage::Storage::hash_labels (1,898 samples, 2.36%)</title><rect x="96.8639%" y="149" width="2.3583%" height="15" fill="rgb(224,95,51)" fg:x="77957" fg:w="1898"/><text x="97.1139%" y="159.50">s..</text></g><g><title>mi_malloc (90 samples, 0.11%)</title><rect x="99.1103%" y="133" width="0.1118%" height="15" fill="rgb(212,188,45)" fg:x="79765" fg:w="90"/><text x="99.3603%" y="143.50"></text></g><g><title>__pthread_disable_asynccancel (12 samples, 0.01%)</title><rect x="99.2669%" y="117" width="0.0149%" height="15" fill="rgb(223,154,38)" fg:x="79891" fg:w="12"/><text x="99.5169%" y="127.50"></text></g><g><title>__pthread_enable_asynccancel (17 samples, 0.02%)</title><rect x="99.2818%" y="117" width="0.0211%" height="15" fill="rgb(251,22,52)" fg:x="79903" fg:w="17"/><text x="99.5318%" y="127.50"></text></g><g><title>__libc_recv (55 samples, 0.07%)</title><rect x="99.2458%" y="133" width="0.0683%" height="15" fill="rgb(229,209,22)" fg:x="79874" fg:w="55"/><text x="99.4958%" y="143.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (293 samples, 0.36%)</title><rect x="99.2222%" y="149" width="0.3641%" height="15" fill="rgb(234,138,34)" fg:x="79855" fg:w="293"/><text x="99.4722%" y="159.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (219 samples, 0.27%)</title><rect x="99.3141%" y="133" width="0.2721%" height="15" fill="rgb(212,95,11)" fg:x="79929" fg:w="219"/><text x="99.5641%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::poll (21,018 samples, 26.12%)</title><rect x="73.5118%" y="197" width="26.1155%" height="15" fill="rgb(240,179,47)" fg:x="59163" fg:w="21018"/><text x="73.7618%" y="207.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::poll_future (20,871 samples, 25.93%)</title><rect x="73.6944%" y="181" width="25.9328%" height="15" fill="rgb(240,163,11)" fg:x="59310" fg:w="20871"/><text x="73.9444%" y="191.50">tokio::runtime::task::harness::poll_future</text></g><g><title>t0::tcp::Server::serve::_{{closure}}::_{{closure}} (20,849 samples, 25.91%)</title><rect x="73.7217%" y="165" width="25.9055%" height="15" fill="rgb(236,37,12)" fg:x="59332" fg:w="20849"/><text x="73.9717%" y="175.50">t0::tcp::Server::serve::_{{closure}}::_{{..</text></g><g><title>tokio::runtime::task::waker::clone_waker (33 samples, 0.04%)</title><rect x="99.5862%" y="149" width="0.0410%" height="15" fill="rgb(232,164,16)" fg:x="80148" fg:w="33"/><text x="99.8362%" y="159.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (21,173 samples, 26.31%)</title><rect x="73.3515%" y="213" width="26.3081%" height="15" fill="rgb(244,205,15)" fg:x="59034" fg:w="21173"/><text x="73.6015%" y="223.50">tokio::runtime::thread_pool::worker::Conte..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (26 samples, 0.03%)</title><rect x="99.6272%" y="197" width="0.0323%" height="15" fill="rgb(223,117,47)" fg:x="80181" fg:w="26"/><text x="99.8772%" y="207.50"></text></g><g><title>pthread_mutex_lock (9 samples, 0.01%)</title><rect x="99.6484%" y="181" width="0.0112%" height="15" fill="rgb(244,107,35)" fg:x="80198" fg:w="9"/><text x="99.8984%" y="191.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (17 samples, 0.02%)</title><rect x="99.7006%" y="197" width="0.0211%" height="15" fill="rgb(205,140,8)" fg:x="80240" fg:w="17"/><text x="99.9506%" y="207.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (245 samples, 0.30%)</title><rect x="99.6595%" y="213" width="0.3044%" height="15" fill="rgb(228,84,46)" fg:x="80207" fg:w="245"/><text x="99.9095%" y="223.50"></text></g><g><title>pthread_mutex_lock (195 samples, 0.24%)</title><rect x="99.7217%" y="197" width="0.2423%" height="15" fill="rgb(254,188,9)" fg:x="80257" fg:w="195"/><text x="99.9717%" y="207.50"></text></g><g><title>__lll_lock_wait (153 samples, 0.19%)</title><rect x="99.7739%" y="181" width="0.1901%" height="15" fill="rgb(206,112,54)" fg:x="80299" fg:w="153"/><text x="100.0239%" y="191.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26,447 samples, 32.86%)</title><rect x="67.1040%" y="261" width="32.8612%" height="15" fill="rgb(216,84,49)" fg:x="54006" fg:w="26447"/><text x="67.3540%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtr..</text></g><g><title>tokio::runtime::task::raw::poll (26,441 samples, 32.85%)</title><rect x="67.1115%" y="245" width="32.8537%" height="15" fill="rgb(214,194,35)" fg:x="54012" fg:w="26441"/><text x="67.3615%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::thread_pool::worker::run (26,441 samples, 32.85%)</title><rect x="67.1115%" y="229" width="32.8537%" height="15" fill="rgb(249,28,3)" fg:x="54012" fg:w="26441"/><text x="67.3615%" y="239.50">tokio::runtime::thread_pool::worker::run</text></g><g><title>__clone (26,467 samples, 32.89%)</title><rect x="67.0804%" y="325" width="32.8860%" height="15" fill="rgb(222,56,52)" fg:x="53987" fg:w="26467"/><text x="67.3304%" y="335.50">__clone</text></g><g><title>start_thread (26,467 samples, 32.89%)</title><rect x="67.0804%" y="309" width="32.8860%" height="15" fill="rgb(245,217,50)" fg:x="53987" fg:w="26467"/><text x="67.3304%" y="319.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (26,467 samples, 32.89%)</title><rect x="67.0804%" y="293" width="32.8860%" height="15" fill="rgb(213,201,24)" fg:x="53987" fg:w="26467"/><text x="67.3304%" y="303.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (26,467 samples, 32.89%)</title><rect x="67.0804%" y="277" width="32.8860%" height="15" fill="rgb(248,116,28)" fg:x="53987" fg:w="26467"/><text x="67.3304%" y="287.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>[unknown] (26,487 samples, 32.91%)</title><rect x="67.0804%" y="341" width="32.9109%" height="15" fill="rgb(219,72,43)" fg:x="53987" fg:w="26487"/><text x="67.3304%" y="351.50">[unknown]</text></g><g><title>all (80,481 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(209,138,14)" fg:x="0" fg:w="80481"/><text x="0.2500%" y="383.50"></text></g><g><title>tokio-runtime-w (26,494 samples, 32.92%)</title><rect x="67.0804%" y="357" width="32.9196%" height="15" fill="rgb(222,18,33)" fg:x="53987" fg:w="26494"/><text x="67.3304%" y="367.50">tokio-runtime-w</text></g></svg></svg>