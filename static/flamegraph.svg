<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="54245"><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.02%)</title><rect x="0.0018%" y="389" width="0.0221%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="12"/><text x="0.2518%" y="399.50"></text></g><g><title>&lt;hyper::server::tcp::AddrIncoming as hyper::server::accept::Accept&gt;::poll_accept (12 samples, 0.02%)</title><rect x="0.0018%" y="373" width="0.0221%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="12"/><text x="0.2518%" y="383.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::poll_accept (12 samples, 0.02%)</title><rect x="0.0018%" y="357" width="0.0221%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="12"/><text x="0.2518%" y="367.50"></text></g><g><title>tokio::util::slab::Allocator&lt;T&gt;::allocate (9 samples, 0.02%)</title><rect x="0.0074%" y="341" width="0.0166%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="9"/><text x="0.2574%" y="351.50"></text></g><g><title>std::sys::unix::thread::guard::current (18 samples, 0.03%)</title><rect x="0.0295%" y="325" width="0.0332%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="18"/><text x="0.2795%" y="335.50"></text></g><g><title>pthread_getattr_np (18 samples, 0.03%)</title><rect x="0.0295%" y="309" width="0.0332%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="18"/><text x="0.2795%" y="319.50"></text></g><g><title>malloc (18 samples, 0.03%)</title><rect x="0.0295%" y="293" width="0.0332%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="18"/><text x="0.2795%" y="303.50"></text></g><g><title>arena_get2.part.3 (18 samples, 0.03%)</title><rect x="0.0295%" y="277" width="0.0332%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="18"/><text x="0.2795%" y="287.50"></text></g><g><title>new_heap (13 samples, 0.02%)</title><rect x="0.0387%" y="261" width="0.0240%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="13"/><text x="0.2887%" y="271.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (12 samples, 0.02%)</title><rect x="0.1807%" y="293" width="0.0221%" height="15" fill="rgb(220,122,19)" fg:x="98" fg:w="12"/><text x="0.4307%" y="303.50"></text></g><g><title>__libc_disable_asynccancel (10 samples, 0.02%)</title><rect x="0.4351%" y="245" width="0.0184%" height="15" fill="rgb(250,228,42)" fg:x="236" fg:w="10"/><text x="0.6851%" y="255.50"></text></g><g><title>[libc-2.24.so] (91 samples, 0.17%)</title><rect x="0.3005%" y="261" width="0.1678%" height="15" fill="rgb(240,193,28)" fg:x="163" fg:w="91"/><text x="0.5505%" y="271.50"></text></g><g><title>__GI___libc_read (12 samples, 0.02%)</title><rect x="0.4682%" y="261" width="0.0221%" height="15" fill="rgb(216,20,37)" fg:x="254" fg:w="12"/><text x="0.7182%" y="271.50"></text></g><g><title>__pthread_enable_asynccancel (6 samples, 0.01%)</title><rect x="0.4793%" y="245" width="0.0111%" height="15" fill="rgb(206,188,39)" fg:x="260" fg:w="6"/><text x="0.7293%" y="255.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (6 samples, 0.01%)</title><rect x="0.4904%" y="261" width="0.0111%" height="15" fill="rgb(217,207,13)" fg:x="266" fg:w="6"/><text x="0.7404%" y="271.50"></text></g><g><title>polling::epoll::Poller::modify (18 samples, 0.03%)</title><rect x="0.5070%" y="261" width="0.0332%" height="15" fill="rgb(231,73,38)" fg:x="275" fg:w="18"/><text x="0.7570%" y="271.50"></text></g><g><title>epoll_ctl (9 samples, 0.02%)</title><rect x="0.5236%" y="245" width="0.0166%" height="15" fill="rgb(225,20,46)" fg:x="284" fg:w="9"/><text x="0.7736%" y="255.50"></text></g><g><title>runtime::executor::Polling::wait (189 samples, 0.35%)</title><rect x="0.2120%" y="293" width="0.3484%" height="15" fill="rgb(210,31,41)" fg:x="115" fg:w="189"/><text x="0.4620%" y="303.50"></text></g><g><title>polling::Poller::wait (183 samples, 0.34%)</title><rect x="0.2231%" y="277" width="0.3374%" height="15" fill="rgb(221,200,47)" fg:x="121" fg:w="183"/><text x="0.4731%" y="287.50"></text></g><g><title>syscall (6 samples, 0.01%)</title><rect x="0.5494%" y="261" width="0.0111%" height="15" fill="rgb(226,26,5)" fg:x="298" fg:w="6"/><text x="0.7994%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (272 samples, 0.50%)</title><rect x="0.0664%" y="309" width="0.5014%" height="15" fill="rgb(249,33,26)" fg:x="36" fg:w="272"/><text x="0.3164%" y="319.50"></text></g><g><title>mi_page_queue_find_free_ex (6 samples, 0.01%)</title><rect x="0.5696%" y="261" width="0.0111%" height="15" fill="rgb(235,183,28)" fg:x="309" fg:w="6"/><text x="0.8196%" y="271.50"></text></g><g><title>runtime::executor::Executor::new (42 samples, 0.08%)</title><rect x="0.5696%" y="309" width="0.0774%" height="15" fill="rgb(221,5,38)" fg:x="309" fg:w="42"/><text x="0.8196%" y="319.50"></text></g><g><title>_mi_heap_malloc_zero (42 samples, 0.08%)</title><rect x="0.5696%" y="293" width="0.0774%" height="15" fill="rgb(247,18,42)" fg:x="309" fg:w="42"/><text x="0.8196%" y="303.50"></text></g><g><title>_mi_malloc_generic (42 samples, 0.08%)</title><rect x="0.5696%" y="277" width="0.0774%" height="15" fill="rgb(241,131,45)" fg:x="309" fg:w="42"/><text x="0.8196%" y="287.50"></text></g><g><title>mi_thread_init (36 samples, 0.07%)</title><rect x="0.5807%" y="261" width="0.0664%" height="15" fill="rgb(249,31,29)" fg:x="315" fg:w="36"/><text x="0.8307%" y="271.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (43 samples, 0.08%)</title><rect x="0.6471%" y="309" width="0.0793%" height="15" fill="rgb(225,111,53)" fg:x="351" fg:w="43"/><text x="0.8971%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (384 samples, 0.71%)</title><rect x="0.0240%" y="341" width="0.7079%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="384"/><text x="0.2740%" y="351.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (363 samples, 0.67%)</title><rect x="0.0627%" y="325" width="0.6692%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="363"/><text x="0.3127%" y="335.50"></text></g><g><title>__mmap64 (13 samples, 0.02%)</title><rect x="0.7429%" y="325" width="0.0240%" height="15" fill="rgb(232,36,49)" fg:x="403" fg:w="13"/><text x="0.9929%" y="335.50"></text></g><g><title>__clone (408 samples, 0.75%)</title><rect x="0.0240%" y="389" width="0.7521%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="408"/><text x="0.2740%" y="399.50"></text></g><g><title>start_thread (408 samples, 0.75%)</title><rect x="0.0240%" y="373" width="0.7521%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="408"/><text x="0.2740%" y="383.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (408 samples, 0.75%)</title><rect x="0.0240%" y="357" width="0.7521%" height="15" fill="rgb(213,181,19)" fg:x="13" fg:w="408"/><text x="0.2740%" y="367.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (24 samples, 0.04%)</title><rect x="0.7319%" y="341" width="0.0442%" height="15" fill="rgb(254,191,54)" fg:x="397" fg:w="24"/><text x="0.9819%" y="351.50"></text></g><g><title>async_page_fault (25 samples, 0.05%)</title><rect x="0.7761%" y="373" width="0.0461%" height="15" fill="rgb(241,83,37)" fg:x="421" fg:w="25"/><text x="1.0261%" y="383.50"></text></g><g><title>__lll_unlock_wake (26 samples, 0.05%)</title><rect x="0.7761%" y="389" width="0.0479%" height="15" fill="rgb(233,36,39)" fg:x="421" fg:w="26"/><text x="1.0261%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.8388%" y="309" width="0.0147%" height="15" fill="rgb(226,3,54)" fg:x="455" fg:w="8"/><text x="1.0888%" y="319.50"></text></g><g><title>event_listener::Inner::lock (8 samples, 0.01%)</title><rect x="0.8388%" y="293" width="0.0147%" height="15" fill="rgb(245,192,40)" fg:x="455" fg:w="8"/><text x="1.0888%" y="303.50"></text></g><g><title>pthread_mutex_lock (8 samples, 0.01%)</title><rect x="0.8388%" y="277" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="455" fg:w="8"/><text x="1.0888%" y="287.50"></text></g><g><title>_mi_page_free_collect (8 samples, 0.01%)</title><rect x="0.8591%" y="293" width="0.0147%" height="15" fill="rgb(232,182,51)" fg:x="466" fg:w="8"/><text x="1.1091%" y="303.50"></text></g><g><title>_mi_malloc_generic (23 samples, 0.04%)</title><rect x="0.8591%" y="309" width="0.0424%" height="15" fill="rgb(231,60,39)" fg:x="466" fg:w="23"/><text x="1.1091%" y="319.50"></text></g><g><title>mi_page_queue_find_free_ex (15 samples, 0.03%)</title><rect x="0.8738%" y="293" width="0.0277%" height="15" fill="rgb(208,69,12)" fg:x="474" fg:w="15"/><text x="1.1238%" y="303.50"></text></g><g><title>_mi_segment_page_start (9 samples, 0.02%)</title><rect x="0.8849%" y="277" width="0.0166%" height="15" fill="rgb(235,93,37)" fg:x="480" fg:w="9"/><text x="1.1349%" y="287.50"></text></g><g><title>event_listener::Event::listen (6 samples, 0.01%)</title><rect x="0.9052%" y="309" width="0.0111%" height="15" fill="rgb(213,116,39)" fg:x="491" fg:w="6"/><text x="1.1552%" y="319.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (13 samples, 0.02%)</title><rect x="0.9217%" y="261" width="0.0240%" height="15" fill="rgb(222,207,29)" fg:x="500" fg:w="13"/><text x="1.1717%" y="271.50"></text></g><g><title>event_listener::List::notify (34 samples, 0.06%)</title><rect x="0.9217%" y="309" width="0.0627%" height="15" fill="rgb(206,96,30)" fg:x="500" fg:w="34"/><text x="1.1717%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (34 samples, 0.06%)</title><rect x="0.9217%" y="293" width="0.0627%" height="15" fill="rgb(218,138,4)" fg:x="500" fg:w="34"/><text x="1.1717%" y="303.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (34 samples, 0.06%)</title><rect x="0.9217%" y="277" width="0.0627%" height="15" fill="rgb(250,191,14)" fg:x="500" fg:w="34"/><text x="1.1717%" y="287.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (21 samples, 0.04%)</title><rect x="0.9457%" y="261" width="0.0387%" height="15" fill="rgb(239,60,40)" fg:x="513" fg:w="21"/><text x="1.1957%" y="271.50"></text></g><g><title>pthread_mutex_lock (6 samples, 0.01%)</title><rect x="0.9734%" y="245" width="0.0111%" height="15" fill="rgb(206,27,48)" fg:x="528" fg:w="6"/><text x="1.2234%" y="255.50"></text></g><g><title>roaring_bitmap_add (23 samples, 0.04%)</title><rect x="0.9863%" y="309" width="0.0424%" height="15" fill="rgb(225,35,8)" fg:x="535" fg:w="23"/><text x="1.2363%" y="319.50"></text></g><g><title>container_add (23 samples, 0.04%)</title><rect x="0.9863%" y="293" width="0.0424%" height="15" fill="rgb(250,213,24)" fg:x="535" fg:w="23"/><text x="1.2363%" y="303.50"></text></g><g><title>roaring_bitmap_free (18 samples, 0.03%)</title><rect x="1.0287%" y="309" width="0.0332%" height="15" fill="rgb(247,123,22)" fg:x="558" fg:w="18"/><text x="1.2787%" y="319.50"></text></g><g><title>ra_clear_without_containers (14 samples, 0.03%)</title><rect x="1.0360%" y="293" width="0.0258%" height="15" fill="rgb(231,138,38)" fg:x="562" fg:w="14"/><text x="1.2860%" y="303.50"></text></g><g><title>_int_free (14 samples, 0.03%)</title><rect x="1.0360%" y="277" width="0.0258%" height="15" fill="rgb(231,145,46)" fg:x="562" fg:w="14"/><text x="1.2860%" y="287.50"></text></g><g><title>roaring_create_iterator (7 samples, 0.01%)</title><rect x="1.0618%" y="309" width="0.0129%" height="15" fill="rgb(251,118,11)" fg:x="576" fg:w="7"/><text x="1.3118%" y="319.50"></text></g><g><title>malloc (7 samples, 0.01%)</title><rect x="1.0618%" y="293" width="0.0129%" height="15" fill="rgb(217,147,25)" fg:x="576" fg:w="7"/><text x="1.3118%" y="303.50"></text></g><g><title>_int_malloc (7 samples, 0.01%)</title><rect x="1.0618%" y="277" width="0.0129%" height="15" fill="rgb(247,81,37)" fg:x="576" fg:w="7"/><text x="1.3118%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (615 samples, 1.13%)</title><rect x="0.8369%" y="389" width="1.1337%" height="15" fill="rgb(209,12,38)" fg:x="454" fg:w="615"/><text x="1.0869%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (615 samples, 1.13%)</title><rect x="0.8369%" y="373" width="1.1337%" height="15" fill="rgb(227,1,9)" fg:x="454" fg:w="615"/><text x="1.0869%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (615 samples, 1.13%)</title><rect x="0.8369%" y="357" width="1.1337%" height="15" fill="rgb(248,47,43)" fg:x="454" fg:w="615"/><text x="1.0869%" y="367.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (615 samples, 1.13%)</title><rect x="0.8369%" y="341" width="1.1337%" height="15" fill="rgb(221,10,30)" fg:x="454" fg:w="615"/><text x="1.0869%" y="351.50"></text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (615 samples, 1.13%)</title><rect x="0.8369%" y="325" width="1.1337%" height="15" fill="rgb(210,229,1)" fg:x="454" fg:w="615"/><text x="1.0869%" y="335.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (486 samples, 0.90%)</title><rect x="1.0748%" y="309" width="0.8959%" height="15" fill="rgb(222,148,37)" fg:x="583" fg:w="486"/><text x="1.3248%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (486 samples, 0.90%)</title><rect x="1.0748%" y="293" width="0.8959%" height="15" fill="rgb(234,67,33)" fg:x="583" fg:w="486"/><text x="1.3248%" y="303.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (486 samples, 0.90%)</title><rect x="1.0748%" y="277" width="0.8959%" height="15" fill="rgb(247,98,35)" fg:x="583" fg:w="486"/><text x="1.3248%" y="287.50"></text></g><g><title>pthread_mutex_lock (244 samples, 0.45%)</title><rect x="1.5209%" y="261" width="0.4498%" height="15" fill="rgb(247,138,52)" fg:x="825" fg:w="244"/><text x="1.7709%" y="271.50"></text></g><g><title>__memcmp_sse4_1 (65 samples, 0.12%)</title><rect x="8.2496%" y="277" width="0.1198%" height="15" fill="rgb(213,79,30)" fg:x="4475" fg:w="65"/><text x="8.4996%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (860 samples, 1.59%)</title><rect x="8.3694%" y="277" width="1.5854%" height="15" fill="rgb(246,177,23)" fg:x="4540" fg:w="860"/><text x="8.6194%" y="287.50"></text></g><g><title>_mi_free_block_mt (101 samples, 0.19%)</title><rect x="9.9696%" y="277" width="0.1862%" height="15" fill="rgb(230,62,27)" fg:x="5408" fg:w="101"/><text x="10.2196%" y="287.50"></text></g><g><title>__memset_avx2_unaligned_erms (16 samples, 0.03%)</title><rect x="10.2848%" y="261" width="0.0295%" height="15" fill="rgb(216,154,8)" fg:x="5579" fg:w="16"/><text x="10.5348%" y="271.50"></text></g><g><title>_mi_heap_malloc_zero (95 samples, 0.18%)</title><rect x="10.1558%" y="277" width="0.1751%" height="15" fill="rgb(244,35,45)" fg:x="5509" fg:w="95"/><text x="10.4058%" y="287.50"></text></g><g><title>_mi_block_zero_init (7 samples, 0.01%)</title><rect x="10.3180%" y="261" width="0.0129%" height="15" fill="rgb(251,115,12)" fg:x="5597" fg:w="7"/><text x="10.5680%" y="271.50"></text></g><g><title>_mi_page_retire (53 samples, 0.10%)</title><rect x="10.3346%" y="277" width="0.0977%" height="15" fill="rgb(240,54,50)" fg:x="5606" fg:w="53"/><text x="10.5846%" y="287.50"></text></g><g><title>_mi_free_block_mt (73 samples, 0.13%)</title><rect x="10.4839%" y="261" width="0.1346%" height="15" fill="rgb(233,84,52)" fg:x="5687" fg:w="73"/><text x="10.7339%" y="271.50"></text></g><g><title>_mi_free_block_mt (7 samples, 0.01%)</title><rect x="10.6683%" y="245" width="0.0129%" height="15" fill="rgb(207,117,47)" fg:x="5787" fg:w="7"/><text x="10.9183%" y="255.50"></text></g><g><title>mi_free (16 samples, 0.03%)</title><rect x="10.6812%" y="245" width="0.0295%" height="15" fill="rgb(249,43,39)" fg:x="5794" fg:w="16"/><text x="10.9312%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;storage::WriteRequest&gt; (53 samples, 0.10%)</title><rect x="10.6185%" y="261" width="0.0977%" height="15" fill="rgb(209,38,44)" fg:x="5760" fg:w="53"/><text x="10.8685%" y="271.50"></text></g><g><title>mi_free (6 samples, 0.01%)</title><rect x="10.7162%" y="261" width="0.0111%" height="15" fill="rgb(236,212,23)" fg:x="5813" fg:w="6"/><text x="10.9662%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (160 samples, 0.29%)</title><rect x="10.4341%" y="277" width="0.2950%" height="15" fill="rgb(242,79,21)" fg:x="5660" fg:w="160"/><text x="10.6841%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.01%)</title><rect x="10.7309%" y="277" width="0.0111%" height="15" fill="rgb(211,96,35)" fg:x="5821" fg:w="6"/><text x="10.9809%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (211 samples, 0.39%)</title><rect x="10.7420%" y="277" width="0.3890%" height="15" fill="rgb(253,215,40)" fg:x="5827" fg:w="211"/><text x="10.9920%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (39 samples, 0.07%)</title><rect x="11.1310%" y="277" width="0.0719%" height="15" fill="rgb(211,81,21)" fg:x="6038" fg:w="39"/><text x="11.3810%" y="287.50"></text></g><g><title>event_listener::Inner::lock (8 samples, 0.01%)</title><rect x="11.2066%" y="277" width="0.0147%" height="15" fill="rgb(208,190,38)" fg:x="6079" fg:w="8"/><text x="11.4566%" y="287.50"></text></g><g><title>event_listener::List::notify (13 samples, 0.02%)</title><rect x="11.2213%" y="277" width="0.0240%" height="15" fill="rgb(235,213,38)" fg:x="6087" fg:w="13"/><text x="11.4713%" y="287.50"></text></g><g><title>free (8 samples, 0.01%)</title><rect x="11.2453%" y="277" width="0.0147%" height="15" fill="rgb(237,122,38)" fg:x="6100" fg:w="8"/><text x="11.4953%" y="287.50"></text></g><g><title>mi_free (101 samples, 0.19%)</title><rect x="11.2637%" y="277" width="0.1862%" height="15" fill="rgb(244,218,35)" fg:x="6110" fg:w="101"/><text x="11.5137%" y="287.50"></text></g><g><title>mi_free_generic (44 samples, 0.08%)</title><rect x="11.4499%" y="277" width="0.0811%" height="15" fill="rgb(240,68,47)" fg:x="6211" fg:w="44"/><text x="11.6999%" y="287.50"></text></g><g><title>mi_malloc (186 samples, 0.34%)</title><rect x="11.5310%" y="277" width="0.3429%" height="15" fill="rgb(210,16,53)" fg:x="6255" fg:w="186"/><text x="11.7810%" y="287.50"></text></g><g><title>mi_zalloc (7 samples, 0.01%)</title><rect x="11.8739%" y="277" width="0.0129%" height="15" fill="rgb(235,124,12)" fg:x="6441" fg:w="7"/><text x="12.1239%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (8 samples, 0.01%)</title><rect x="11.8868%" y="277" width="0.0147%" height="15" fill="rgb(224,169,11)" fg:x="6448" fg:w="8"/><text x="12.1368%" y="287.50"></text></g><g><title>roaring_bitmap_add (10 samples, 0.02%)</title><rect x="11.9145%" y="277" width="0.0184%" height="15" fill="rgb(250,166,2)" fg:x="6463" fg:w="10"/><text x="12.1645%" y="287.50"></text></g><g><title>roaring_bitmap_free (9 samples, 0.02%)</title><rect x="11.9329%" y="277" width="0.0166%" height="15" fill="rgb(242,216,29)" fg:x="6473" fg:w="9"/><text x="12.1829%" y="287.50"></text></g><g><title>malloc (30 samples, 0.06%)</title><rect x="11.9716%" y="261" width="0.0553%" height="15" fill="rgb(230,116,27)" fg:x="6494" fg:w="30"/><text x="12.2216%" y="271.50"></text></g><g><title>roaring_create_iterator (45 samples, 0.08%)</title><rect x="11.9495%" y="277" width="0.0830%" height="15" fill="rgb(228,99,48)" fg:x="6482" fg:w="45"/><text x="12.1995%" y="287.50"></text></g><g><title>roaring_free_uint32_iterator (8 samples, 0.01%)</title><rect x="12.0324%" y="277" width="0.0147%" height="15" fill="rgb(253,11,6)" fg:x="6527" fg:w="8"/><text x="12.2824%" y="287.50"></text></g><g><title>storage::chunk::Columns::lookup (14 samples, 0.03%)</title><rect x="12.0472%" y="277" width="0.0258%" height="15" fill="rgb(247,143,39)" fg:x="6535" fg:w="14"/><text x="12.2972%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (201 samples, 0.37%)</title><rect x="12.1928%" y="261" width="0.3705%" height="15" fill="rgb(236,97,10)" fg:x="6614" fg:w="201"/><text x="12.4428%" y="271.50"></text></g><g><title>start_thread (5,748 samples, 10.60%)</title><rect x="1.9799%" y="389" width="10.5964%" height="15" fill="rgb(233,208,19)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="399.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5,748 samples, 10.60%)</title><rect x="1.9799%" y="373" width="10.5964%" height="15" fill="rgb(216,164,2)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="383.50">std::sys::unix:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5,748 samples, 10.60%)</title><rect x="1.9799%" y="357" width="10.5964%" height="15" fill="rgb(220,129,5)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="367.50">core::ops::func..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,748 samples, 10.60%)</title><rect x="1.9799%" y="341" width="10.5964%" height="15" fill="rgb(242,17,10)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="351.50">std::sys_common..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,748 samples, 10.60%)</title><rect x="1.9799%" y="325" width="10.5964%" height="15" fill="rgb(242,107,0)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="335.50">&lt;core::future::..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,748 samples, 10.60%)</title><rect x="1.9799%" y="309" width="10.5964%" height="15" fill="rgb(251,28,31)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="319.50">async_task::raw..</text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (5,748 samples, 10.60%)</title><rect x="1.9799%" y="293" width="10.5964%" height="15" fill="rgb(233,223,10)" fg:x="1074" fg:w="5748"/><text x="2.2299%" y="303.50">storage::Storag..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (273 samples, 0.50%)</title><rect x="12.0730%" y="277" width="0.5033%" height="15" fill="rgb(215,21,27)" fg:x="6549" fg:w="273"/><text x="12.3230%" y="287.50"></text></g><g><title>__pthread_disable_asynccancel (7 samples, 0.01%)</title><rect x="12.7127%" y="309" width="0.0129%" height="15" fill="rgb(232,23,21)" fg:x="6896" fg:w="7"/><text x="12.9627%" y="319.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (84 samples, 0.15%)</title><rect x="12.5763%" y="389" width="0.1549%" height="15" fill="rgb(244,5,23)" fg:x="6822" fg:w="84"/><text x="12.8263%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (84 samples, 0.15%)</title><rect x="12.5763%" y="373" width="0.1549%" height="15" fill="rgb(226,81,46)" fg:x="6822" fg:w="84"/><text x="12.8263%" y="383.50"></text></g><g><title>t0::main (84 samples, 0.15%)</title><rect x="12.5763%" y="357" width="0.1549%" height="15" fill="rgb(247,70,30)" fg:x="6822" fg:w="84"/><text x="12.8263%" y="367.50"></text></g><g><title>tokio::park::thread::Inner::park (84 samples, 0.15%)</title><rect x="12.5763%" y="341" width="0.1549%" height="15" fill="rgb(212,68,19)" fg:x="6822" fg:w="84"/><text x="12.8263%" y="351.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (84 samples, 0.15%)</title><rect x="12.5763%" y="325" width="0.1549%" height="15" fill="rgb(240,187,13)" fg:x="6822" fg:w="84"/><text x="12.8263%" y="335.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (6 samples, 0.01%)</title><rect x="12.7514%" y="277" width="0.0111%" height="15" fill="rgb(223,113,26)" fg:x="6917" fg:w="6"/><text x="13.0014%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.02%)</title><rect x="12.7403%" y="293" width="0.0240%" height="15" fill="rgb(206,192,2)" fg:x="6911" fg:w="13"/><text x="12.9903%" y="303.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="12.7643%" y="293" width="0.0295%" height="15" fill="rgb(241,108,4)" fg:x="6924" fg:w="16"/><text x="13.0143%" y="303.50"></text></g><g><title>_int_free (34 samples, 0.06%)</title><rect x="12.7938%" y="293" width="0.0627%" height="15" fill="rgb(247,173,49)" fg:x="6940" fg:w="34"/><text x="13.0438%" y="303.50"></text></g><g><title>_mi_deferred_free (9 samples, 0.02%)</title><rect x="12.8823%" y="277" width="0.0166%" height="15" fill="rgb(224,114,35)" fg:x="6988" fg:w="9"/><text x="13.1323%" y="287.50"></text></g><g><title>_mi_malloc_generic (28 samples, 0.05%)</title><rect x="12.8620%" y="293" width="0.0516%" height="15" fill="rgb(245,159,27)" fg:x="6977" fg:w="28"/><text x="13.1120%" y="303.50"></text></g><g><title>_mi_free_block_mt (888 samples, 1.64%)</title><rect x="12.9136%" y="261" width="1.6370%" height="15" fill="rgb(245,172,44)" fg:x="7005" fg:w="888"/><text x="13.1636%" y="271.50"></text></g><g><title>mi_free (101 samples, 0.19%)</title><rect x="14.5506%" y="261" width="0.1862%" height="15" fill="rgb(236,23,11)" fg:x="7893" fg:w="101"/><text x="14.8006%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;storage::WriteRequest&gt; (1,211 samples, 2.23%)</title><rect x="12.9136%" y="277" width="2.2325%" height="15" fill="rgb(205,117,38)" fg:x="7005" fg:w="1211"/><text x="13.1636%" y="287.50">c..</text></g><g><title>mi_free_generic (222 samples, 0.41%)</title><rect x="14.7368%" y="261" width="0.4093%" height="15" fill="rgb(237,72,25)" fg:x="7994" fg:w="222"/><text x="14.9868%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,218 samples, 2.25%)</title><rect x="12.9136%" y="293" width="2.2454%" height="15" fill="rgb(244,70,9)" fg:x="7005" fg:w="1218"/><text x="13.1636%" y="303.50">a..</text></g><g><title>mi_free_generic (7 samples, 0.01%)</title><rect x="15.1461%" y="277" width="0.0129%" height="15" fill="rgb(217,125,39)" fg:x="8216" fg:w="7"/><text x="15.3961%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.04%)</title><rect x="15.1590%" y="293" width="0.0387%" height="15" fill="rgb(235,36,10)" fg:x="8223" fg:w="21"/><text x="15.4090%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="15.1756%" y="277" width="0.0221%" height="15" fill="rgb(251,123,47)" fg:x="8232" fg:w="12"/><text x="15.4256%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (11 samples, 0.02%)</title><rect x="15.2051%" y="261" width="0.0203%" height="15" fill="rgb(221,13,13)" fg:x="8248" fg:w="11"/><text x="15.4551%" y="271.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (6 samples, 0.01%)</title><rect x="15.2254%" y="261" width="0.0111%" height="15" fill="rgb(238,131,9)" fg:x="8259" fg:w="6"/><text x="15.4754%" y="271.50"></text></g><g><title>event_listener::List::notify (19 samples, 0.04%)</title><rect x="15.2032%" y="293" width="0.0350%" height="15" fill="rgb(211,50,8)" fg:x="8247" fg:w="19"/><text x="15.4532%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (19 samples, 0.04%)</title><rect x="15.2032%" y="277" width="0.0350%" height="15" fill="rgb(245,182,24)" fg:x="8247" fg:w="19"/><text x="15.4532%" y="287.50"></text></g><g><title>roaring_bitmap_add (25 samples, 0.05%)</title><rect x="15.2383%" y="293" width="0.0461%" height="15" fill="rgb(242,14,37)" fg:x="8266" fg:w="25"/><text x="15.4883%" y="303.50"></text></g><g><title>roaring_bitmap_free (6 samples, 0.01%)</title><rect x="15.2844%" y="293" width="0.0111%" height="15" fill="rgb(246,228,12)" fg:x="8291" fg:w="6"/><text x="15.5344%" y="303.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (73 samples, 0.13%)</title><rect x="15.3046%" y="277" width="0.1346%" height="15" fill="rgb(213,55,15)" fg:x="8302" fg:w="73"/><text x="15.5546%" y="287.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (201 samples, 0.37%)</title><rect x="15.4576%" y="261" width="0.3705%" height="15" fill="rgb(209,9,3)" fg:x="8385" fg:w="201"/><text x="15.7076%" y="271.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,677 samples, 3.09%)</title><rect x="12.7403%" y="389" width="3.0915%" height="15" fill="rgb(230,59,30)" fg:x="6911" fg:w="1677"/><text x="12.9903%" y="399.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,677 samples, 3.09%)</title><rect x="12.7403%" y="373" width="3.0915%" height="15" fill="rgb(209,121,21)" fg:x="6911" fg:w="1677"/><text x="12.9903%" y="383.50">cor..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,677 samples, 3.09%)</title><rect x="12.7403%" y="357" width="3.0915%" height="15" fill="rgb(220,109,13)" fg:x="6911" fg:w="1677"/><text x="12.9903%" y="367.50">std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,677 samples, 3.09%)</title><rect x="12.7403%" y="341" width="3.0915%" height="15" fill="rgb(232,18,1)" fg:x="6911" fg:w="1677"/><text x="12.9903%" y="351.50">&lt;co..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,677 samples, 3.09%)</title><rect x="12.7403%" y="325" width="3.0915%" height="15" fill="rgb(215,41,42)" fg:x="6911" fg:w="1677"/><text x="12.9903%" y="335.50">asy..</text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (1,677 samples, 3.09%)</title><rect x="12.7403%" y="309" width="3.0915%" height="15" fill="rgb(224,123,36)" fg:x="6911" fg:w="1677"/><text x="12.9903%" y="319.50">sto..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (287 samples, 0.53%)</title><rect x="15.3028%" y="293" width="0.5291%" height="15" fill="rgb(240,125,3)" fg:x="8301" fg:w="287"/><text x="15.5528%" y="303.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (213 samples, 0.39%)</title><rect x="15.4392%" y="277" width="0.3927%" height="15" fill="rgb(205,98,50)" fg:x="8375" fg:w="213"/><text x="15.6892%" y="287.50"></text></g><g><title>_mi_clock_now (6 samples, 0.01%)</title><rect x="15.8374%" y="277" width="0.0111%" height="15" fill="rgb(205,185,37)" fg:x="8591" fg:w="6"/><text x="16.0874%" y="287.50"></text></g><g><title>__clock_gettime (6 samples, 0.01%)</title><rect x="15.8374%" y="261" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="8591" fg:w="6"/><text x="16.0874%" y="271.50"></text></g><g><title>_mi_segment_page_alloc (13 samples, 0.02%)</title><rect x="15.8337%" y="293" width="0.0240%" height="15" fill="rgb(213,199,42)" fg:x="8589" fg:w="13"/><text x="16.0837%" y="303.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (16 samples, 0.03%)</title><rect x="15.8577%" y="293" width="0.0295%" height="15" fill="rgb(235,201,11)" fg:x="8602" fg:w="16"/><text x="16.1077%" y="303.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (16 samples, 0.03%)</title><rect x="15.8577%" y="277" width="0.0295%" height="15" fill="rgb(207,46,11)" fg:x="8602" fg:w="16"/><text x="16.1077%" y="287.50"></text></g><g><title>_mi_malloc_generic (65 samples, 0.12%)</title><rect x="15.8319%" y="325" width="0.1198%" height="15" fill="rgb(241,35,35)" fg:x="8588" fg:w="65"/><text x="16.0819%" y="335.50"></text></g><g><title>mi_page_queue_find_free_ex (65 samples, 0.12%)</title><rect x="15.8319%" y="309" width="0.1198%" height="15" fill="rgb(243,32,47)" fg:x="8588" fg:w="65"/><text x="16.0819%" y="319.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (35 samples, 0.06%)</title><rect x="15.8872%" y="293" width="0.0645%" height="15" fill="rgb(247,202,23)" fg:x="8618" fg:w="35"/><text x="16.1372%" y="303.50"></text></g><g><title>event_listener::List::notify (72 samples, 0.13%)</title><rect x="15.9646%" y="325" width="0.1327%" height="15" fill="rgb(219,102,11)" fg:x="8660" fg:w="72"/><text x="16.2146%" y="335.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (72 samples, 0.13%)</title><rect x="15.9646%" y="309" width="0.1327%" height="15" fill="rgb(243,110,44)" fg:x="8660" fg:w="72"/><text x="16.2146%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (72 samples, 0.13%)</title><rect x="15.9646%" y="293" width="0.1327%" height="15" fill="rgb(222,74,54)" fg:x="8660" fg:w="72"/><text x="16.2146%" y="303.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (71 samples, 0.13%)</title><rect x="15.9664%" y="277" width="0.1309%" height="15" fill="rgb(216,99,12)" fg:x="8661" fg:w="71"/><text x="16.2164%" y="287.50"></text></g><g><title>pthread_mutex_lock (71 samples, 0.13%)</title><rect x="15.9664%" y="261" width="0.1309%" height="15" fill="rgb(226,22,26)" fg:x="8661" fg:w="71"/><text x="16.2164%" y="271.50"></text></g><g><title>__lll_lock_wait (60 samples, 0.11%)</title><rect x="15.9867%" y="245" width="0.1106%" height="15" fill="rgb(217,163,10)" fg:x="8672" fg:w="60"/><text x="16.2367%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (6 samples, 0.01%)</title><rect x="16.0973%" y="325" width="0.0111%" height="15" fill="rgb(213,25,53)" fg:x="8732" fg:w="6"/><text x="16.3473%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.01%)</title><rect x="16.0973%" y="309" width="0.0111%" height="15" fill="rgb(252,105,26)" fg:x="8732" fg:w="6"/><text x="16.3473%" y="319.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.01%)</title><rect x="16.0973%" y="293" width="0.0111%" height="15" fill="rgb(220,39,43)" fg:x="8732" fg:w="6"/><text x="16.3473%" y="303.50"></text></g><g><title>mi_page_queue_find_free_ex (6 samples, 0.01%)</title><rect x="16.0973%" y="277" width="0.0111%" height="15" fill="rgb(229,68,48)" fg:x="8732" fg:w="6"/><text x="16.3473%" y="287.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (6 samples, 0.01%)</title><rect x="16.0973%" y="261" width="0.0111%" height="15" fill="rgb(252,8,32)" fg:x="8732" fg:w="6"/><text x="16.3473%" y="271.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (6 samples, 0.01%)</title><rect x="16.0973%" y="245" width="0.0111%" height="15" fill="rgb(223,20,43)" fg:x="8732" fg:w="6"/><text x="16.3473%" y="255.50"></text></g><g><title>__sched_yield (6 samples, 0.01%)</title><rect x="16.3499%" y="309" width="0.0111%" height="15" fill="rgb(229,81,49)" fg:x="8869" fg:w="6"/><text x="16.5999%" y="319.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (8 samples, 0.01%)</title><rect x="16.3665%" y="309" width="0.0147%" height="15" fill="rgb(236,28,36)" fg:x="8878" fg:w="8"/><text x="16.6165%" y="319.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (295 samples, 0.54%)</title><rect x="16.1102%" y="325" width="0.5438%" height="15" fill="rgb(249,185,26)" fg:x="8739" fg:w="295"/><text x="16.3602%" y="335.50"></text></g><g><title>syscall (147 samples, 0.27%)</title><rect x="16.3831%" y="309" width="0.2710%" height="15" fill="rgb(249,174,33)" fg:x="8887" fg:w="147"/><text x="16.6331%" y="319.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (28 samples, 0.05%)</title><rect x="16.6541%" y="325" width="0.0516%" height="15" fill="rgb(233,201,37)" fg:x="9034" fg:w="28"/><text x="16.9041%" y="335.50"></text></g><g><title>roaring_bitmap_add (8 samples, 0.01%)</title><rect x="16.7057%" y="325" width="0.0147%" height="15" fill="rgb(221,78,26)" fg:x="9062" fg:w="8"/><text x="16.9557%" y="335.50"></text></g><g><title>container_add (8 samples, 0.01%)</title><rect x="16.7057%" y="309" width="0.0147%" height="15" fill="rgb(250,127,30)" fg:x="9062" fg:w="8"/><text x="16.9557%" y="319.50"></text></g><g><title>array_container_grow (8 samples, 0.01%)</title><rect x="16.7057%" y="293" width="0.0147%" height="15" fill="rgb(230,49,44)" fg:x="9062" fg:w="8"/><text x="16.9557%" y="303.50"></text></g><g><title>realloc (8 samples, 0.01%)</title><rect x="16.7057%" y="277" width="0.0147%" height="15" fill="rgb(229,67,23)" fg:x="9062" fg:w="8"/><text x="16.9557%" y="287.50"></text></g><g><title>_int_free (15 samples, 0.03%)</title><rect x="16.7204%" y="277" width="0.0277%" height="15" fill="rgb(249,83,47)" fg:x="9070" fg:w="15"/><text x="16.9704%" y="287.50"></text></g><g><title>array_container_free (19 samples, 0.04%)</title><rect x="16.7481%" y="277" width="0.0350%" height="15" fill="rgb(215,43,3)" fg:x="9085" fg:w="19"/><text x="16.9981%" y="287.50"></text></g><g><title>_int_free (19 samples, 0.04%)</title><rect x="16.7481%" y="261" width="0.0350%" height="15" fill="rgb(238,154,13)" fg:x="9085" fg:w="19"/><text x="16.9981%" y="271.50"></text></g><g><title>roaring_bitmap_free (35 samples, 0.06%)</title><rect x="16.7204%" y="325" width="0.0645%" height="15" fill="rgb(219,56,2)" fg:x="9070" fg:w="35"/><text x="16.9704%" y="335.50"></text></g><g><title>ra_clear (35 samples, 0.06%)</title><rect x="16.7204%" y="309" width="0.0645%" height="15" fill="rgb(233,0,4)" fg:x="9070" fg:w="35"/><text x="16.9704%" y="319.50"></text></g><g><title>ra_clear_containers (35 samples, 0.06%)</title><rect x="16.7204%" y="293" width="0.0645%" height="15" fill="rgb(235,30,7)" fg:x="9070" fg:w="35"/><text x="16.9704%" y="303.50"></text></g><g><title>__memcmp_sse4_1 (56 samples, 0.10%)</title><rect x="17.8542%" y="309" width="0.1032%" height="15" fill="rgb(250,79,13)" fg:x="9685" fg:w="56"/><text x="18.1042%" y="319.50"></text></g><g><title>_int_free (232 samples, 0.43%)</title><rect x="17.9574%" y="309" width="0.4277%" height="15" fill="rgb(211,146,34)" fg:x="9741" fg:w="232"/><text x="18.2074%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (99 samples, 0.18%)</title><rect x="18.3851%" y="309" width="0.1825%" height="15" fill="rgb(228,22,38)" fg:x="9973" fg:w="99"/><text x="18.6351%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (170 samples, 0.31%)</title><rect x="18.5676%" y="309" width="0.3134%" height="15" fill="rgb(235,168,5)" fg:x="10072" fg:w="170"/><text x="18.8176%" y="319.50"></text></g><g><title>free (15 samples, 0.03%)</title><rect x="18.8810%" y="309" width="0.0277%" height="15" fill="rgb(221,155,16)" fg:x="10242" fg:w="15"/><text x="19.1310%" y="319.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="19.1280%" y="293" width="0.0129%" height="15" fill="rgb(215,215,53)" fg:x="10376" fg:w="7"/><text x="19.3780%" y="303.50"></text></g><g><title>array_bitset_container_intersection (268 samples, 0.49%)</title><rect x="19.1409%" y="293" width="0.4941%" height="15" fill="rgb(223,4,10)" fg:x="10383" fg:w="268"/><text x="19.3909%" y="303.50"></text></g><g><title>array_container_grow (38 samples, 0.07%)</title><rect x="19.5649%" y="277" width="0.0701%" height="15" fill="rgb(234,103,6)" fg:x="10613" fg:w="38"/><text x="19.8149%" y="287.50"></text></g><g><title>malloc (35 samples, 0.06%)</title><rect x="19.5705%" y="261" width="0.0645%" height="15" fill="rgb(227,97,0)" fg:x="10616" fg:w="35"/><text x="19.8205%" y="271.50"></text></g><g><title>_int_malloc (23 samples, 0.04%)</title><rect x="19.5926%" y="245" width="0.0424%" height="15" fill="rgb(234,150,53)" fg:x="10628" fg:w="23"/><text x="19.8426%" y="255.50"></text></g><g><title>malloc_consolidate (7 samples, 0.01%)</title><rect x="19.6221%" y="229" width="0.0129%" height="15" fill="rgb(228,201,54)" fg:x="10644" fg:w="7"/><text x="19.8721%" y="239.50"></text></g><g><title>array_container_create_given_capacity (149 samples, 0.27%)</title><rect x="19.6424%" y="293" width="0.2747%" height="15" fill="rgb(222,22,37)" fg:x="10655" fg:w="149"/><text x="19.8924%" y="303.50"></text></g><g><title>malloc (140 samples, 0.26%)</title><rect x="19.6590%" y="277" width="0.2581%" height="15" fill="rgb(237,53,32)" fg:x="10664" fg:w="140"/><text x="19.9090%" y="287.50"></text></g><g><title>_int_malloc (43 samples, 0.08%)</title><rect x="19.8378%" y="261" width="0.0793%" height="15" fill="rgb(233,25,53)" fg:x="10761" fg:w="43"/><text x="20.0878%" y="271.50"></text></g><g><title>_int_free (10 samples, 0.02%)</title><rect x="19.9207%" y="277" width="0.0184%" height="15" fill="rgb(210,40,34)" fg:x="10806" fg:w="10"/><text x="20.1707%" y="287.50"></text></g><g><title>array_container_free (14 samples, 0.03%)</title><rect x="19.9170%" y="293" width="0.0258%" height="15" fill="rgb(241,220,44)" fg:x="10804" fg:w="14"/><text x="20.1670%" y="303.50"></text></g><g><title>array_container_grow (257 samples, 0.47%)</title><rect x="20.0018%" y="277" width="0.4738%" height="15" fill="rgb(235,28,35)" fg:x="10850" fg:w="257"/><text x="20.2518%" y="287.50"></text></g><g><title>malloc (244 samples, 0.45%)</title><rect x="20.0258%" y="261" width="0.4498%" height="15" fill="rgb(210,56,17)" fg:x="10863" fg:w="244"/><text x="20.2758%" y="271.50"></text></g><g><title>_int_malloc (125 samples, 0.23%)</title><rect x="20.2452%" y="245" width="0.2304%" height="15" fill="rgb(224,130,29)" fg:x="10982" fg:w="125"/><text x="20.4952%" y="255.50"></text></g><g><title>croaring_detect_supported_architectures (9 samples, 0.02%)</title><rect x="20.4756%" y="277" width="0.0166%" height="15" fill="rgb(235,212,8)" fg:x="11107" fg:w="9"/><text x="20.7256%" y="287.50"></text></g><g><title>intersect_skewed_uint16 (232 samples, 0.43%)</title><rect x="20.4922%" y="277" width="0.4277%" height="15" fill="rgb(223,33,50)" fg:x="11116" fg:w="232"/><text x="20.7422%" y="287.50"></text></g><g><title>array_container_intersection (4,826 samples, 8.90%)</title><rect x="19.9429%" y="293" width="8.8967%" height="15" fill="rgb(219,149,13)" fg:x="10818" fg:w="4826"/><text x="20.1929%" y="303.50">array_contain..</text></g><g><title>intersect_vector16 (4,296 samples, 7.92%)</title><rect x="20.9199%" y="277" width="7.9196%" height="15" fill="rgb(250,156,29)" fg:x="11348" fg:w="4296"/><text x="21.1699%" y="287.50">intersect_v..</text></g><g><title>_avx2_bitset_container_and_justcard.isra.51 (22 samples, 0.04%)</title><rect x="28.8395%" y="277" width="0.0406%" height="15" fill="rgb(216,193,19)" fg:x="15644" fg:w="22"/><text x="29.0895%" y="287.50"></text></g><g><title>array_container_create_given_capacity (14 samples, 0.03%)</title><rect x="28.8801%" y="277" width="0.0258%" height="15" fill="rgb(216,135,14)" fg:x="15666" fg:w="14"/><text x="29.1301%" y="287.50"></text></g><g><title>malloc (14 samples, 0.03%)</title><rect x="28.8801%" y="261" width="0.0258%" height="15" fill="rgb(241,47,5)" fg:x="15666" fg:w="14"/><text x="29.1301%" y="271.50"></text></g><g><title>_int_malloc (12 samples, 0.02%)</title><rect x="28.8838%" y="245" width="0.0221%" height="15" fill="rgb(233,42,35)" fg:x="15668" fg:w="12"/><text x="29.1338%" y="255.50"></text></g><g><title>bitset_bitset_container_intersection (449 samples, 0.83%)</title><rect x="28.8395%" y="293" width="0.8277%" height="15" fill="rgb(231,13,6)" fg:x="15644" fg:w="449"/><text x="29.0895%" y="303.50"></text></g><g><title>bitset_extract_intersection_setbits_uint16 (409 samples, 0.75%)</title><rect x="28.9133%" y="277" width="0.7540%" height="15" fill="rgb(207,181,40)" fg:x="15684" fg:w="409"/><text x="29.1633%" y="287.50"></text></g><g><title>ra_append (54 samples, 0.10%)</title><rect x="29.6691%" y="293" width="0.0995%" height="15" fill="rgb(254,173,49)" fg:x="16094" fg:w="54"/><text x="29.9191%" y="303.50"></text></g><g><title>extend_array (20 samples, 0.04%)</title><rect x="29.7318%" y="277" width="0.0369%" height="15" fill="rgb(221,1,38)" fg:x="16128" fg:w="20"/><text x="29.9818%" y="287.50"></text></g><g><title>malloc (263 samples, 0.48%)</title><rect x="29.7981%" y="277" width="0.4848%" height="15" fill="rgb(206,124,46)" fg:x="16164" fg:w="263"/><text x="30.0481%" y="287.50"></text></g><g><title>_int_malloc (108 samples, 0.20%)</title><rect x="30.0839%" y="261" width="0.1991%" height="15" fill="rgb(249,21,11)" fg:x="16319" fg:w="108"/><text x="30.3339%" y="271.50"></text></g><g><title>malloc (157 samples, 0.29%)</title><rect x="30.3051%" y="261" width="0.2894%" height="15" fill="rgb(222,201,40)" fg:x="16439" fg:w="157"/><text x="30.5551%" y="271.50"></text></g><g><title>_int_malloc (44 samples, 0.08%)</title><rect x="30.5134%" y="245" width="0.0811%" height="15" fill="rgb(235,61,29)" fg:x="16552" fg:w="44"/><text x="30.7634%" y="255.50"></text></g><g><title>roaring_bitmap_and (6,344 samples, 11.70%)</title><rect x="18.9123%" y="309" width="11.6951%" height="15" fill="rgb(219,207,3)" fg:x="10259" fg:w="6344"/><text x="19.1623%" y="319.50">roaring_bitmap_and</text></g><g><title>roaring_bitmap_create_with_capacity (453 samples, 0.84%)</title><rect x="29.7723%" y="293" width="0.8351%" height="15" fill="rgb(222,56,46)" fg:x="16150" fg:w="453"/><text x="30.0223%" y="303.50"></text></g><g><title>ra_init_with_capacity (176 samples, 0.32%)</title><rect x="30.2830%" y="277" width="0.3245%" height="15" fill="rgb(239,76,54)" fg:x="16427" fg:w="176"/><text x="30.5330%" y="287.50"></text></g><g><title>ra_init (7 samples, 0.01%)</title><rect x="30.5945%" y="261" width="0.0129%" height="15" fill="rgb(231,124,27)" fg:x="16596" fg:w="7"/><text x="30.8445%" y="271.50"></text></g><g><title>malloc (294 samples, 0.54%)</title><rect x="30.6701%" y="293" width="0.5420%" height="15" fill="rgb(249,195,6)" fg:x="16637" fg:w="294"/><text x="30.9201%" y="303.50"></text></g><g><title>_int_malloc (103 samples, 0.19%)</title><rect x="31.0222%" y="277" width="0.1899%" height="15" fill="rgb(237,174,47)" fg:x="16828" fg:w="103"/><text x="31.2722%" y="287.50"></text></g><g><title>malloc (225 samples, 0.41%)</title><rect x="31.2434%" y="277" width="0.4148%" height="15" fill="rgb(206,201,31)" fg:x="16948" fg:w="225"/><text x="31.4934%" y="287.50"></text></g><g><title>_int_malloc (87 samples, 0.16%)</title><rect x="31.4978%" y="261" width="0.1604%" height="15" fill="rgb(231,57,52)" fg:x="17086" fg:w="87"/><text x="31.7478%" y="271.50"></text></g><g><title>ra_init_with_capacity (249 samples, 0.46%)</title><rect x="31.2121%" y="293" width="0.4590%" height="15" fill="rgb(248,177,22)" fg:x="16931" fg:w="249"/><text x="31.4621%" y="303.50"></text></g><g><title>ra_init (7 samples, 0.01%)</title><rect x="31.6582%" y="277" width="0.0129%" height="15" fill="rgb(215,211,37)" fg:x="17173" fg:w="7"/><text x="31.9082%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (30 samples, 0.06%)</title><rect x="31.7651%" y="277" width="0.0553%" height="15" fill="rgb(241,128,51)" fg:x="17231" fg:w="30"/><text x="32.0151%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (960 samples, 1.77%)</title><rect x="31.8665%" y="261" width="1.7697%" height="15" fill="rgb(227,165,31)" fg:x="17286" fg:w="960"/><text x="32.1165%" y="271.50"></text></g><g><title>malloc_consolidate (537 samples, 0.99%)</title><rect x="34.8843%" y="213" width="0.9900%" height="15" fill="rgb(228,167,24)" fg:x="18923" fg:w="537"/><text x="35.1343%" y="223.50"></text></g><g><title>array_container_clone (2,198 samples, 4.05%)</title><rect x="31.8241%" y="277" width="4.0520%" height="15" fill="rgb(228,143,12)" fg:x="17263" fg:w="2198"/><text x="32.0741%" y="287.50">arra..</text></g><g><title>array_container_create_given_capacity (1,215 samples, 2.24%)</title><rect x="33.6363%" y="261" width="2.2398%" height="15" fill="rgb(249,149,8)" fg:x="18246" fg:w="1215"/><text x="33.8863%" y="271.50">a..</text></g><g><title>malloc (1,190 samples, 2.19%)</title><rect x="33.6824%" y="245" width="2.1938%" height="15" fill="rgb(243,35,44)" fg:x="18271" fg:w="1190"/><text x="33.9324%" y="255.50">m..</text></g><g><title>_int_malloc (927 samples, 1.71%)</title><rect x="34.1672%" y="229" width="1.7089%" height="15" fill="rgb(246,89,9)" fg:x="18534" fg:w="927"/><text x="34.4172%" y="239.50"></text></g><g><title>_int_free (27 samples, 0.05%)</title><rect x="36.3628%" y="213" width="0.0498%" height="15" fill="rgb(233,213,13)" fg:x="19725" fg:w="27"/><text x="36.6128%" y="223.50"></text></g><g><title>malloc_consolidate (88 samples, 0.16%)</title><rect x="36.5066%" y="197" width="0.1622%" height="15" fill="rgb(233,141,41)" fg:x="19803" fg:w="88"/><text x="36.7566%" y="207.50"></text></g><g><title>__posix_memalign (203 samples, 0.37%)</title><rect x="36.2964%" y="261" width="0.3742%" height="15" fill="rgb(239,167,4)" fg:x="19689" fg:w="203"/><text x="36.5464%" y="271.50"></text></g><g><title>_mid_memalign (202 samples, 0.37%)</title><rect x="36.2983%" y="245" width="0.3724%" height="15" fill="rgb(209,217,16)" fg:x="19690" fg:w="202"/><text x="36.5483%" y="255.50"></text></g><g><title>_int_memalign (185 samples, 0.34%)</title><rect x="36.3296%" y="229" width="0.3410%" height="15" fill="rgb(219,88,35)" fg:x="19707" fg:w="185"/><text x="36.5796%" y="239.50"></text></g><g><title>_int_malloc (140 samples, 0.26%)</title><rect x="36.4126%" y="213" width="0.2581%" height="15" fill="rgb(220,193,23)" fg:x="19752" fg:w="140"/><text x="36.6626%" y="223.50"></text></g><g><title>bitset_container_clone (460 samples, 0.85%)</title><rect x="35.8761%" y="277" width="0.8480%" height="15" fill="rgb(230,90,52)" fg:x="19461" fg:w="460"/><text x="36.1261%" y="287.50"></text></g><g><title>malloc (28 samples, 0.05%)</title><rect x="36.6725%" y="261" width="0.0516%" height="15" fill="rgb(252,106,19)" fg:x="19893" fg:w="28"/><text x="36.9225%" y="271.50"></text></g><g><title>_int_malloc (12 samples, 0.02%)</title><rect x="36.7020%" y="245" width="0.0221%" height="15" fill="rgb(206,74,20)" fg:x="19909" fg:w="12"/><text x="36.9520%" y="255.50"></text></g><g><title>container_clone (8 samples, 0.01%)</title><rect x="36.7241%" y="277" width="0.0147%" height="15" fill="rgb(230,138,44)" fg:x="19921" fg:w="8"/><text x="36.9741%" y="287.50"></text></g><g><title>roaring_bitmap_copy (3,332 samples, 6.14%)</title><rect x="30.6074%" y="309" width="6.1425%" height="15" fill="rgb(235,182,43)" fg:x="16603" fg:w="3332"/><text x="30.8574%" y="319.50">roaring_..</text></g><g><title>ra_overwrite (2,755 samples, 5.08%)</title><rect x="31.6711%" y="293" width="5.0788%" height="15" fill="rgb(242,16,51)" fg:x="17180" fg:w="2755"/><text x="31.9211%" y="303.50">ra_ove..</text></g><g><title>ra_clear_containers (6 samples, 0.01%)</title><rect x="36.7389%" y="277" width="0.0111%" height="15" fill="rgb(248,9,4)" fg:x="19929" fg:w="6"/><text x="36.9889%" y="287.50"></text></g><g><title>_int_free (205 samples, 0.38%)</title><rect x="36.8734%" y="261" width="0.3779%" height="15" fill="rgb(210,31,22)" fg:x="20002" fg:w="205"/><text x="37.1234%" y="271.50"></text></g><g><title>_int_free (336 samples, 0.62%)</title><rect x="37.2882%" y="245" width="0.6194%" height="15" fill="rgb(239,54,39)" fg:x="20227" fg:w="336"/><text x="37.5382%" y="255.50"></text></g><g><title>malloc_consolidate (34 samples, 0.06%)</title><rect x="37.8450%" y="229" width="0.0627%" height="15" fill="rgb(230,99,41)" fg:x="20529" fg:w="34"/><text x="38.0950%" y="239.50"></text></g><g><title>array_container_free (395 samples, 0.73%)</title><rect x="37.2514%" y="261" width="0.7282%" height="15" fill="rgb(253,106,12)" fg:x="20207" fg:w="395"/><text x="37.5014%" y="271.50"></text></g><g><title>free (39 samples, 0.07%)</title><rect x="37.9076%" y="245" width="0.0719%" height="15" fill="rgb(213,46,41)" fg:x="20563" fg:w="39"/><text x="38.1576%" y="255.50"></text></g><g><title>_int_free (27 samples, 0.05%)</title><rect x="37.9851%" y="245" width="0.0498%" height="15" fill="rgb(215,133,35)" fg:x="20605" fg:w="27"/><text x="38.2351%" y="255.50"></text></g><g><title>bitset_container_free (34 samples, 0.06%)</title><rect x="37.9795%" y="261" width="0.0627%" height="15" fill="rgb(213,28,5)" fg:x="20602" fg:w="34"/><text x="38.2295%" y="271.50"></text></g><g><title>container_free (13 samples, 0.02%)</title><rect x="38.0422%" y="261" width="0.0240%" height="15" fill="rgb(215,77,49)" fg:x="20636" fg:w="13"/><text x="38.2922%" y="271.50"></text></g><g><title>ra_clear (713 samples, 1.31%)</title><rect x="36.7923%" y="293" width="1.3144%" height="15" fill="rgb(248,100,22)" fg:x="19958" fg:w="713"/><text x="37.0423%" y="303.50"></text></g><g><title>ra_clear_containers (702 samples, 1.29%)</title><rect x="36.8126%" y="277" width="1.2941%" height="15" fill="rgb(208,67,9)" fg:x="19969" fg:w="702"/><text x="37.0626%" y="287.50"></text></g><g><title>free (22 samples, 0.04%)</title><rect x="38.0662%" y="261" width="0.0406%" height="15" fill="rgb(219,133,21)" fg:x="20649" fg:w="22"/><text x="38.3162%" y="271.50"></text></g><g><title>_int_free (204 samples, 0.38%)</title><rect x="38.1289%" y="277" width="0.3761%" height="15" fill="rgb(246,46,29)" fg:x="20683" fg:w="204"/><text x="38.3789%" y="287.50"></text></g><g><title>storage::chunk::Columns::lookup (11,796 samples, 21.75%)</title><rect x="16.7850%" y="325" width="21.7458%" height="15" fill="rgb(246,185,52)" fg:x="9105" fg:w="11796"/><text x="17.0350%" y="335.50">storage::chunk::Columns::lookup</text></g><g><title>roaring_bitmap_free (966 samples, 1.78%)</title><rect x="36.7499%" y="309" width="1.7808%" height="15" fill="rgb(252,136,11)" fg:x="19935" fg:w="966"/><text x="36.9999%" y="319.50">r..</text></g><g><title>ra_clear_without_containers (230 samples, 0.42%)</title><rect x="38.1067%" y="293" width="0.4240%" height="15" fill="rgb(219,138,53)" fg:x="20671" fg:w="230"/><text x="38.3567%" y="303.50"></text></g><g><title>free (14 samples, 0.03%)</title><rect x="38.5049%" y="277" width="0.0258%" height="15" fill="rgb(211,51,23)" fg:x="20887" fg:w="14"/><text x="38.7549%" y="287.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (14 samples, 0.03%)</title><rect x="38.5381%" y="293" width="0.0258%" height="15" fill="rgb(247,221,28)" fg:x="20905" fg:w="14"/><text x="38.7881%" y="303.50"></text></g><g><title>__lll_unlock_wake (11 samples, 0.02%)</title><rect x="38.5436%" y="277" width="0.0203%" height="15" fill="rgb(251,222,45)" fg:x="20908" fg:w="11"/><text x="38.7936%" y="287.50"></text></g><g><title>apic_timer_interrupt (8 samples, 0.01%)</title><rect x="40.3171%" y="245" width="0.0147%" height="15" fill="rgb(217,162,53)" fg:x="21870" fg:w="8"/><text x="40.5671%" y="255.50"></text></g><g><title>call_function_interrupt (7 samples, 0.01%)</title><rect x="40.3318%" y="245" width="0.0129%" height="15" fill="rgb(229,93,14)" fg:x="21878" fg:w="7"/><text x="40.5818%" y="255.50"></text></g><g><title>irq_entries_start (19 samples, 0.04%)</title><rect x="40.3503%" y="245" width="0.0350%" height="15" fill="rgb(209,67,49)" fg:x="21888" fg:w="19"/><text x="40.6003%" y="255.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,324 samples, 24.56%)</title><rect x="15.8319%" y="389" width="24.5626%" height="15" fill="rgb(213,87,29)" fg:x="8588" fg:w="13324"/><text x="16.0819%" y="399.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,324 samples, 24.56%)</title><rect x="15.8319%" y="373" width="24.5626%" height="15" fill="rgb(205,151,52)" fg:x="8588" fg:w="13324"/><text x="16.0819%" y="383.50">&lt;core::future::from_generator::GenFutur..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (13,324 samples, 24.56%)</title><rect x="15.8319%" y="357" width="24.5626%" height="15" fill="rgb(253,215,39)" fg:x="8588" fg:w="13324"/><text x="16.0819%" y="367.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>storage::Storage::new::_{{closure}}::_{{closure}} (13,324 samples, 24.56%)</title><rect x="15.8319%" y="341" width="24.5626%" height="15" fill="rgb(221,220,41)" fg:x="8588" fg:w="13324"/><text x="16.0819%" y="351.50">storage::Storage::new::_{{closure}}::_{..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1,008 samples, 1.86%)</title><rect x="38.5363%" y="325" width="1.8582%" height="15" fill="rgb(218,133,21)" fg:x="20904" fg:w="1008"/><text x="38.7863%" y="335.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (1,007 samples, 1.86%)</title><rect x="38.5381%" y="309" width="1.8564%" height="15" fill="rgb(221,193,43)" fg:x="20905" fg:w="1007"/><text x="38.7881%" y="319.50">t..</text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (993 samples, 1.83%)</title><rect x="38.5639%" y="293" width="1.8306%" height="15" fill="rgb(240,128,52)" fg:x="20919" fg:w="993"/><text x="38.8139%" y="303.50">t..</text></g><g><title>pthread_mutex_lock (993 samples, 1.83%)</title><rect x="38.5639%" y="277" width="1.8306%" height="15" fill="rgb(253,114,12)" fg:x="20919" fg:w="993"/><text x="38.8139%" y="287.50">p..</text></g><g><title>__lll_lock_wait (992 samples, 1.83%)</title><rect x="38.5658%" y="261" width="1.8287%" height="15" fill="rgb(215,223,47)" fg:x="20920" fg:w="992"/><text x="38.8158%" y="271.50">_..</text></g><g><title>&lt;hyper::server::tcp::AddrIncoming as hyper::server::accept::Accept&gt;::poll_accept (7 samples, 0.01%)</title><rect x="40.4093%" y="357" width="0.0129%" height="15" fill="rgb(248,225,23)" fg:x="21920" fg:w="7"/><text x="40.6593%" y="367.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::poll_accept (6 samples, 0.01%)</title><rect x="40.4111%" y="341" width="0.0111%" height="15" fill="rgb(250,108,0)" fg:x="21921" fg:w="6"/><text x="40.6611%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 0.09%)</title><rect x="40.4000%" y="373" width="0.0940%" height="15" fill="rgb(228,208,7)" fg:x="21915" fg:w="51"/><text x="40.6500%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (38 samples, 0.07%)</title><rect x="40.4240%" y="357" width="0.0701%" height="15" fill="rgb(244,45,10)" fg:x="21928" fg:w="38"/><text x="40.6740%" y="367.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (36 samples, 0.07%)</title><rect x="40.4277%" y="341" width="0.0664%" height="15" fill="rgb(207,125,25)" fg:x="21930" fg:w="36"/><text x="40.6777%" y="351.50"></text></g><g><title>pthread_mutex_lock (36 samples, 0.07%)</title><rect x="40.4277%" y="325" width="0.0664%" height="15" fill="rgb(210,195,18)" fg:x="21930" fg:w="36"/><text x="40.6777%" y="335.50"></text></g><g><title>__lll_lock_wait (35 samples, 0.06%)</title><rect x="40.4295%" y="309" width="0.0645%" height="15" fill="rgb(249,80,12)" fg:x="21931" fg:w="35"/><text x="40.6795%" y="319.50"></text></g><g><title>polling::Poller::new (8 samples, 0.01%)</title><rect x="40.4959%" y="357" width="0.0147%" height="15" fill="rgb(221,65,9)" fg:x="21967" fg:w="8"/><text x="40.7459%" y="367.50"></text></g><g><title>storage::Storage::new (14 samples, 0.03%)</title><rect x="40.4941%" y="373" width="0.0258%" height="15" fill="rgb(235,49,36)" fg:x="21966" fg:w="14"/><text x="40.7441%" y="383.50"></text></g><g><title>[unknown] (21,986 samples, 40.53%)</title><rect x="0.0018%" y="405" width="40.5309%" height="15" fill="rgb(225,32,20)" fg:x="1" fg:w="21986"/><text x="0.2518%" y="415.50">[unknown]</text></g><g><title>t0::main (72 samples, 0.13%)</title><rect x="40.4000%" y="389" width="0.1327%" height="15" fill="rgb(215,141,46)" fg:x="21915" fg:w="72"/><text x="40.6500%" y="399.50"></text></g><g><title>tokio::runtime::builder::Builder::build (7 samples, 0.01%)</title><rect x="40.5199%" y="373" width="0.0129%" height="15" fill="rgb(250,160,47)" fg:x="21980" fg:w="7"/><text x="40.7699%" y="383.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn (6 samples, 0.01%)</title><rect x="40.5217%" y="357" width="0.0111%" height="15" fill="rgb(216,222,40)" fg:x="21981" fg:w="6"/><text x="40.7717%" y="367.50"></text></g><g><title>std::sys::unix::thread::Thread::new (6 samples, 0.01%)</title><rect x="40.5217%" y="341" width="0.0111%" height="15" fill="rgb(234,217,39)" fg:x="21981" fg:w="6"/><text x="40.7717%" y="351.50"></text></g><g><title>pthread_create@@GLIBC_2.2.5 (6 samples, 0.01%)</title><rect x="40.5217%" y="325" width="0.0111%" height="15" fill="rgb(207,178,40)" fg:x="21981" fg:w="6"/><text x="40.7717%" y="335.50"></text></g><g><title>__clone (98 samples, 0.18%)</title><rect x="40.5328%" y="405" width="0.1807%" height="15" fill="rgb(221,136,13)" fg:x="21987" fg:w="98"/><text x="40.7828%" y="415.50"></text></g><g><title>_mi_heap_realloc_zero (8 samples, 0.01%)</title><rect x="40.7245%" y="405" width="0.0147%" height="15" fill="rgb(249,199,10)" fg:x="22091" fg:w="8"/><text x="40.9745%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.01%)</title><rect x="40.7245%" y="389" width="0.0147%" height="15" fill="rgb(249,222,13)" fg:x="22091" fg:w="8"/><text x="40.9745%" y="399.50"></text></g><g><title>async_page_fault (8 samples, 0.01%)</title><rect x="40.7245%" y="373" width="0.0147%" height="15" fill="rgb(244,185,38)" fg:x="22091" fg:w="8"/><text x="40.9745%" y="383.50"></text></g><g><title>async_page_fault (6 samples, 0.01%)</title><rect x="40.7632%" y="389" width="0.0111%" height="15" fill="rgb(236,202,9)" fg:x="22112" fg:w="6"/><text x="41.0132%" y="399.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (12 samples, 0.02%)</title><rect x="40.7614%" y="405" width="0.0221%" height="15" fill="rgb(250,229,37)" fg:x="22111" fg:w="12"/><text x="41.0114%" y="415.50"></text></g><g><title>ra_clear_containers (6 samples, 0.01%)</title><rect x="40.7853%" y="405" width="0.0111%" height="15" fill="rgb(206,174,23)" fg:x="22124" fg:w="6"/><text x="41.0353%" y="415.50"></text></g><g><title>_int_free (6 samples, 0.01%)</title><rect x="40.7853%" y="389" width="0.0111%" height="15" fill="rgb(211,33,43)" fg:x="22124" fg:w="6"/><text x="41.0353%" y="399.50"></text></g><g><title>ra_clear_without_containers (8 samples, 0.01%)</title><rect x="40.7964%" y="405" width="0.0147%" height="15" fill="rgb(245,58,50)" fg:x="22130" fg:w="8"/><text x="41.0464%" y="415.50"></text></g><g><title>_int_free (8 samples, 0.01%)</title><rect x="40.7964%" y="389" width="0.0147%" height="15" fill="rgb(244,68,36)" fg:x="22130" fg:w="8"/><text x="41.0464%" y="399.50"></text></g><g><title>roaring_bitmap_copy (6 samples, 0.01%)</title><rect x="40.8259%" y="405" width="0.0111%" height="15" fill="rgb(232,229,15)" fg:x="22146" fg:w="6"/><text x="41.0759%" y="415.50"></text></g><g><title>t0 (22,154 samples, 40.84%)</title><rect x="0.0000%" y="421" width="40.8406%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="22154"/><text x="0.2500%" y="431.50">t0</text></g><g><title>__lll_unlock_wake (8 samples, 0.01%)</title><rect x="40.8406%" y="389" width="0.0147%" height="15" fill="rgb(235,160,14)" fg:x="22154" fg:w="8"/><text x="41.0906%" y="399.50"></text></g><g><title>[t0] (9 samples, 0.02%)</title><rect x="40.8406%" y="405" width="0.0166%" height="15" fill="rgb(212,155,44)" fg:x="22154" fg:w="9"/><text x="41.0906%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.02%)</title><rect x="41.3623%" y="293" width="0.0203%" height="15" fill="rgb(226,2,50)" fg:x="22437" fg:w="11"/><text x="41.6123%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.03%)</title><rect x="41.3826%" y="293" width="0.0258%" height="15" fill="rgb(234,177,6)" fg:x="22448" fg:w="14"/><text x="41.6326%" y="303.50"></text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (301 samples, 0.55%)</title><rect x="40.8572%" y="389" width="0.5549%" height="15" fill="rgb(217,24,9)" fg:x="22163" fg:w="301"/><text x="41.1072%" y="399.50"></text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (301 samples, 0.55%)</title><rect x="40.8572%" y="373" width="0.5549%" height="15" fill="rgb(220,13,46)" fg:x="22163" fg:w="301"/><text x="41.1072%" y="383.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (301 samples, 0.55%)</title><rect x="40.8572%" y="357" width="0.5549%" height="15" fill="rgb(239,221,27)" fg:x="22163" fg:w="301"/><text x="41.1072%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (301 samples, 0.55%)</title><rect x="40.8572%" y="341" width="0.5549%" height="15" fill="rgb(222,198,25)" fg:x="22163" fg:w="301"/><text x="41.1072%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (301 samples, 0.55%)</title><rect x="40.8572%" y="325" width="0.5549%" height="15" fill="rgb(211,99,13)" fg:x="22163" fg:w="301"/><text x="41.1072%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (301 samples, 0.55%)</title><rect x="40.8572%" y="309" width="0.5549%" height="15" fill="rgb(232,111,31)" fg:x="22163" fg:w="301"/><text x="41.1072%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="41.7568%" y="325" width="0.0166%" height="15" fill="rgb(245,82,37)" fg:x="22651" fg:w="9"/><text x="42.0068%" y="335.50"></text></g><g><title>_mi_heap_delayed_free (87 samples, 0.16%)</title><rect x="41.7956%" y="309" width="0.1604%" height="15" fill="rgb(227,149,46)" fg:x="22672" fg:w="87"/><text x="42.0456%" y="319.50"></text></g><g><title>_mi_free_delayed_block (31 samples, 0.06%)</title><rect x="41.8988%" y="293" width="0.0571%" height="15" fill="rgb(218,36,50)" fg:x="22728" fg:w="31"/><text x="42.1488%" y="303.50"></text></g><g><title>_mi_page_use_delayed_free (28 samples, 0.05%)</title><rect x="41.9043%" y="277" width="0.0516%" height="15" fill="rgb(226,80,48)" fg:x="22731" fg:w="28"/><text x="42.1543%" y="287.50"></text></g><g><title>_mi_malloc_generic (102 samples, 0.19%)</title><rect x="41.7734%" y="325" width="0.1880%" height="15" fill="rgb(238,224,15)" fg:x="22660" fg:w="102"/><text x="42.0234%" y="335.50"></text></g><g><title>tonic::transport::server::Router&lt;S,tonic::transport::server::Unimplemented,L&gt;::new::_{{closure}} (8 samples, 0.01%)</title><rect x="41.9615%" y="325" width="0.0147%" height="15" fill="rgb(241,136,10)" fg:x="22762" fg:w="8"/><text x="42.2115%" y="335.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::GrpcTimeout&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (183 samples, 0.34%)</title><rect x="41.6628%" y="341" width="0.3374%" height="15" fill="rgb(208,32,45)" fg:x="22600" fg:w="183"/><text x="41.9128%" y="351.50"></text></g><g><title>tonic::transport::service::grpc_timeout::try_parse_grpc_timeout (13 samples, 0.02%)</title><rect x="41.9762%" y="325" width="0.0240%" height="15" fill="rgb(207,135,9)" fg:x="22770" fg:w="13"/><text x="42.2262%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.04%)</title><rect x="42.0002%" y="341" width="0.0350%" height="15" fill="rgb(206,86,44)" fg:x="22783" fg:w="19"/><text x="42.2502%" y="351.50"></text></g><g><title>_mi_page_free_collect (22 samples, 0.04%)</title><rect x="42.0684%" y="277" width="0.0406%" height="15" fill="rgb(245,177,15)" fg:x="22820" fg:w="22"/><text x="42.3184%" y="287.50"></text></g><g><title>_mi_heap_delayed_free (34 samples, 0.06%)</title><rect x="42.0518%" y="309" width="0.0627%" height="15" fill="rgb(206,64,50)" fg:x="22811" fg:w="34"/><text x="42.3018%" y="319.50"></text></g><g><title>_mi_free_delayed_block (25 samples, 0.05%)</title><rect x="42.0684%" y="293" width="0.0461%" height="15" fill="rgb(234,36,40)" fg:x="22820" fg:w="25"/><text x="42.3184%" y="303.50"></text></g><g><title>_mi_heap_malloc_zero (45 samples, 0.08%)</title><rect x="42.0352%" y="341" width="0.0830%" height="15" fill="rgb(213,64,8)" fg:x="22802" fg:w="45"/><text x="42.2852%" y="351.50"></text></g><g><title>_mi_malloc_generic (45 samples, 0.08%)</title><rect x="42.0352%" y="325" width="0.0830%" height="15" fill="rgb(210,75,36)" fg:x="22802" fg:w="45"/><text x="42.2852%" y="335.50"></text></g><g><title>_mi_page_free_collect (18 samples, 0.03%)</title><rect x="42.1274%" y="293" width="0.0332%" height="15" fill="rgb(229,88,21)" fg:x="22852" fg:w="18"/><text x="42.3774%" y="303.50"></text></g><g><title>_mi_malloc_generic (26 samples, 0.05%)</title><rect x="42.1182%" y="341" width="0.0479%" height="15" fill="rgb(252,204,47)" fg:x="22847" fg:w="26"/><text x="42.3682%" y="351.50"></text></g><g><title>_mi_heap_delayed_free (25 samples, 0.05%)</title><rect x="42.1200%" y="325" width="0.0461%" height="15" fill="rgb(208,77,27)" fg:x="22848" fg:w="25"/><text x="42.3700%" y="335.50"></text></g><g><title>_mi_free_delayed_block (21 samples, 0.04%)</title><rect x="42.1274%" y="309" width="0.0387%" height="15" fill="rgb(221,76,26)" fg:x="22852" fg:w="21"/><text x="42.3774%" y="319.50"></text></g><g><title>mi_malloc (9 samples, 0.02%)</title><rect x="42.1716%" y="341" width="0.0166%" height="15" fill="rgb(225,139,18)" fg:x="22876" fg:w="9"/><text x="42.4216%" y="351.50"></text></g><g><title>_mi_page_free_collect (13 samples, 0.02%)</title><rect x="42.2011%" y="261" width="0.0240%" height="15" fill="rgb(230,137,11)" fg:x="22892" fg:w="13"/><text x="42.4511%" y="271.50"></text></g><g><title>_mi_heap_delayed_free (16 samples, 0.03%)</title><rect x="42.1974%" y="293" width="0.0295%" height="15" fill="rgb(212,28,1)" fg:x="22890" fg:w="16"/><text x="42.4474%" y="303.50"></text></g><g><title>_mi_free_delayed_block (14 samples, 0.03%)</title><rect x="42.2011%" y="277" width="0.0258%" height="15" fill="rgb(248,164,17)" fg:x="22892" fg:w="14"/><text x="42.4511%" y="287.50"></text></g><g><title>_mi_malloc_generic (19 samples, 0.04%)</title><rect x="42.1974%" y="309" width="0.0350%" height="15" fill="rgb(222,171,42)" fg:x="22890" fg:w="19"/><text x="42.4474%" y="319.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (345 samples, 0.64%)</title><rect x="41.6296%" y="357" width="0.6360%" height="15" fill="rgb(243,84,45)" fg:x="22582" fg:w="345"/><text x="41.8796%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (41 samples, 0.08%)</title><rect x="42.1901%" y="341" width="0.0756%" height="15" fill="rgb(252,49,23)" fg:x="22886" fg:w="41"/><text x="42.4401%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (40 samples, 0.07%)</title><rect x="42.1919%" y="325" width="0.0737%" height="15" fill="rgb(215,19,7)" fg:x="22887" fg:w="40"/><text x="42.4419%" y="335.50"></text></g><g><title>mi_malloc (18 samples, 0.03%)</title><rect x="42.2325%" y="309" width="0.0332%" height="15" fill="rgb(238,81,41)" fg:x="22909" fg:w="18"/><text x="42.4825%" y="319.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (18 samples, 0.03%)</title><rect x="42.2656%" y="357" width="0.0332%" height="15" fill="rgb(210,199,37)" fg:x="22927" fg:w="18"/><text x="42.5156%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.03%)</title><rect x="42.2988%" y="357" width="0.0277%" height="15" fill="rgb(244,192,49)" fg:x="22945" fg:w="15"/><text x="42.5488%" y="367.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (9 samples, 0.02%)</title><rect x="42.3265%" y="357" width="0.0166%" height="15" fill="rgb(226,211,11)" fg:x="22960" fg:w="9"/><text x="42.5765%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.01%)</title><rect x="42.4684%" y="341" width="0.0129%" height="15" fill="rgb(236,162,54)" fg:x="23037" fg:w="7"/><text x="42.7184%" y="351.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (10 samples, 0.02%)</title><rect x="42.4813%" y="341" width="0.0184%" height="15" fill="rgb(220,229,9)" fg:x="23044" fg:w="10"/><text x="42.7313%" y="351.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_slice (25 samples, 0.05%)</title><rect x="42.5901%" y="309" width="0.0461%" height="15" fill="rgb(250,87,22)" fg:x="23103" fg:w="25"/><text x="42.8401%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="42.6122%" y="293" width="0.0240%" height="15" fill="rgb(239,43,17)" fg:x="23115" fg:w="13"/><text x="42.8622%" y="303.50"></text></g><g><title>&lt;h2::frame::headers::Iter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="42.9053%" y="293" width="0.0332%" height="15" fill="rgb(231,177,25)" fg:x="23274" fg:w="18"/><text x="43.1553%" y="303.50"></text></g><g><title>__memcmp_sse4_1 (42 samples, 0.08%)</title><rect x="42.9385%" y="293" width="0.0774%" height="15" fill="rgb(219,179,1)" fg:x="23292" fg:w="42"/><text x="43.1885%" y="303.50"></text></g><g><title>_mi_heap_realloc_zero (20 samples, 0.04%)</title><rect x="43.0344%" y="277" width="0.0369%" height="15" fill="rgb(238,219,53)" fg:x="23344" fg:w="20"/><text x="43.2844%" y="287.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (26 samples, 0.05%)</title><rect x="43.0289%" y="293" width="0.0479%" height="15" fill="rgb(232,167,36)" fg:x="23341" fg:w="26"/><text x="43.2789%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (28 samples, 0.05%)</title><rect x="43.0768%" y="293" width="0.0516%" height="15" fill="rgb(244,19,51)" fg:x="23367" fg:w="28"/><text x="43.3268%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.05%)</title><rect x="43.0768%" y="277" width="0.0516%" height="15" fill="rgb(224,6,22)" fg:x="23367" fg:w="28"/><text x="43.3268%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.05%)</title><rect x="43.0823%" y="261" width="0.0461%" height="15" fill="rgb(224,145,5)" fg:x="23370" fg:w="25"/><text x="43.3323%" y="271.50"></text></g><g><title>mi_malloc (23 samples, 0.04%)</title><rect x="43.0860%" y="245" width="0.0424%" height="15" fill="rgb(234,130,49)" fg:x="23372" fg:w="23"/><text x="43.3360%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::IntoIter&lt;http::header::value::HeaderValue&gt;&gt; (6 samples, 0.01%)</title><rect x="43.1339%" y="293" width="0.0111%" height="15" fill="rgb(254,6,2)" fg:x="23398" fg:w="6"/><text x="43.3839%" y="303.50"></text></g><g><title>h2::hpack::header::Header::len (12 samples, 0.02%)</title><rect x="43.1487%" y="293" width="0.0221%" height="15" fill="rgb(208,96,46)" fg:x="23406" fg:w="12"/><text x="43.3987%" y="303.50"></text></g><g><title>h2::frame::headers::HeaderBlock::into_encoding (298 samples, 0.55%)</title><rect x="42.6362%" y="309" width="0.5494%" height="15" fill="rgb(239,3,39)" fg:x="23128" fg:w="298"/><text x="42.8862%" y="319.50"></text></g><g><title>mi_free (7 samples, 0.01%)</title><rect x="43.1726%" y="293" width="0.0129%" height="15" fill="rgb(233,210,1)" fg:x="23419" fg:w="7"/><text x="43.4226%" y="303.50"></text></g><g><title>h2::codec::framed_write::Encoder&lt;B&gt;::buffer (376 samples, 0.69%)</title><rect x="42.4998%" y="341" width="0.6932%" height="15" fill="rgb(244,137,37)" fg:x="23054" fg:w="376"/><text x="42.7498%" y="351.50"></text></g><g><title>h2::frame::headers::Headers::encode (332 samples, 0.61%)</title><rect x="42.5809%" y="325" width="0.6120%" height="15" fill="rgb(240,136,2)" fg:x="23098" fg:w="332"/><text x="42.8309%" y="335.50"></text></g><g><title>__libc_send (16 samples, 0.03%)</title><rect x="43.2519%" y="309" width="0.0295%" height="15" fill="rgb(239,18,37)" fg:x="23462" fg:w="16"/><text x="43.5019%" y="319.50"></text></g><g><title>h2::codec::framed_write::FramedWrite&lt;T,B&gt;::flush (53 samples, 0.10%)</title><rect x="43.1929%" y="341" width="0.0977%" height="15" fill="rgb(218,185,22)" fg:x="23430" fg:w="53"/><text x="43.4429%" y="351.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (24 samples, 0.04%)</title><rect x="43.2464%" y="325" width="0.0442%" height="15" fill="rgb(225,218,4)" fg:x="23459" fg:w="24"/><text x="43.4964%" y="335.50"></text></g><g><title>__pthread_disable_asynccancel (8 samples, 0.01%)</title><rect x="43.5082%" y="277" width="0.0147%" height="15" fill="rgb(230,182,32)" fg:x="23601" fg:w="8"/><text x="43.7582%" y="287.50"></text></g><g><title>__libc_recv (25 samples, 0.05%)</title><rect x="43.4879%" y="293" width="0.0461%" height="15" fill="rgb(242,56,43)" fg:x="23590" fg:w="25"/><text x="43.7379%" y="303.50"></text></g><g><title>pthread_mutex_lock (25 samples, 0.05%)</title><rect x="43.6427%" y="277" width="0.0461%" height="15" fill="rgb(233,99,24)" fg:x="23674" fg:w="25"/><text x="43.8927%" y="287.50"></text></g><g><title>&lt;hyper::common::io::rewind::Rewind&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (126 samples, 0.23%)</title><rect x="43.4602%" y="325" width="0.2323%" height="15" fill="rgb(234,209,42)" fg:x="23575" fg:w="126"/><text x="43.7102%" y="335.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (120 samples, 0.22%)</title><rect x="43.4713%" y="309" width="0.2212%" height="15" fill="rgb(227,7,12)" fg:x="23581" fg:w="120"/><text x="43.7213%" y="319.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (84 samples, 0.15%)</title><rect x="43.5377%" y="293" width="0.1549%" height="15" fill="rgb(245,203,43)" fg:x="23617" fg:w="84"/><text x="43.7877%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (32 samples, 0.06%)</title><rect x="43.7404%" y="293" width="0.0590%" height="15" fill="rgb(238,205,33)" fg:x="23727" fg:w="32"/><text x="43.9904%" y="303.50"></text></g><g><title>_mi_heap_delayed_free (8 samples, 0.01%)</title><rect x="43.8013%" y="277" width="0.0147%" height="15" fill="rgb(231,56,7)" fg:x="23760" fg:w="8"/><text x="44.0513%" y="287.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.01%)</title><rect x="43.8050%" y="261" width="0.0111%" height="15" fill="rgb(244,186,29)" fg:x="23762" fg:w="6"/><text x="44.0550%" y="271.50"></text></g><g><title>mi_page_queue_find_free_ex (9 samples, 0.02%)</title><rect x="43.8160%" y="277" width="0.0166%" height="15" fill="rgb(234,111,31)" fg:x="23768" fg:w="9"/><text x="44.0660%" y="287.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (9 samples, 0.02%)</title><rect x="43.8160%" y="261" width="0.0166%" height="15" fill="rgb(241,149,10)" fg:x="23768" fg:w="9"/><text x="44.0660%" y="271.50"></text></g><g><title>_mi_malloc_generic (21 samples, 0.04%)</title><rect x="43.7994%" y="293" width="0.0387%" height="15" fill="rgb(249,206,44)" fg:x="23759" fg:w="21"/><text x="44.0494%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (65 samples, 0.12%)</title><rect x="43.7257%" y="309" width="0.1198%" height="15" fill="rgb(251,153,30)" fg:x="23719" fg:w="65"/><text x="43.9757%" y="319.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::decoder::Decoder&gt;::decode (113 samples, 0.21%)</title><rect x="43.6925%" y="325" width="0.2083%" height="15" fill="rgb(239,152,38)" fg:x="23701" fg:w="113"/><text x="43.9425%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (30 samples, 0.06%)</title><rect x="43.8455%" y="309" width="0.0553%" height="15" fill="rgb(249,139,47)" fg:x="23784" fg:w="30"/><text x="44.0955%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.04%)</title><rect x="43.9008%" y="325" width="0.0350%" height="15" fill="rgb(244,64,35)" fg:x="23814" fg:w="19"/><text x="44.1508%" y="335.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (7 samples, 0.01%)</title><rect x="43.9358%" y="325" width="0.0129%" height="15" fill="rgb(216,46,15)" fg:x="23833" fg:w="7"/><text x="44.1858%" y="335.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="44.0188%" y="309" width="0.0111%" height="15" fill="rgb(250,74,19)" fg:x="23878" fg:w="6"/><text x="44.2688%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.01%)</title><rect x="44.0299%" y="309" width="0.0129%" height="15" fill="rgb(249,42,33)" fg:x="23884" fg:w="7"/><text x="44.2799%" y="319.50"></text></g><g><title>h2::codec::framed_read::decode_frame (58 samples, 0.11%)</title><rect x="43.9488%" y="325" width="0.1069%" height="15" fill="rgb(242,149,17)" fg:x="23840" fg:w="58"/><text x="44.1988%" y="335.50"></text></g><g><title>pthread_mutex_lock (26 samples, 0.05%)</title><rect x="44.0667%" y="325" width="0.0479%" height="15" fill="rgb(244,29,21)" fg:x="23904" fg:w="26"/><text x="44.3167%" y="335.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (449 samples, 0.83%)</title><rect x="43.2906%" y="341" width="0.8277%" height="15" fill="rgb(220,130,37)" fg:x="23483" fg:w="449"/><text x="43.5406%" y="351.50"></text></g><g><title>h2::proto::streams::buffer::Deque::pop_front (17 samples, 0.03%)</title><rect x="44.2548%" y="325" width="0.0313%" height="15" fill="rgb(211,67,2)" fg:x="24006" fg:w="17"/><text x="44.5048%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="44.2621%" y="309" width="0.0240%" height="15" fill="rgb(235,68,52)" fg:x="24010" fg:w="13"/><text x="44.5121%" y="319.50"></text></g><g><title>_mi_free_block_mt (12 samples, 0.02%)</title><rect x="44.3156%" y="261" width="0.0221%" height="15" fill="rgb(246,142,3)" fg:x="24039" fg:w="12"/><text x="44.5656%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;hyper::proto::h2::server::H2Stream&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;+core::marker::Send&gt;&gt;,http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;&gt;&gt; (11 samples, 0.02%)</title><rect x="44.3377%" y="261" width="0.0203%" height="15" fill="rgb(241,25,7)" fg:x="24051" fg:w="11"/><text x="44.5877%" y="271.50"></text></g><g><title>h2::proto::streams::store::Ptr::remove (32 samples, 0.06%)</title><rect x="44.3009%" y="309" width="0.0590%" height="15" fill="rgb(242,119,39)" fg:x="24031" fg:w="32"/><text x="44.5509%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;h2::proto::streams::stream::Stream&gt; (25 samples, 0.05%)</title><rect x="44.3138%" y="293" width="0.0461%" height="15" fill="rgb(241,98,45)" fg:x="24038" fg:w="25"/><text x="44.5638%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (24 samples, 0.04%)</title><rect x="44.3156%" y="277" width="0.0442%" height="15" fill="rgb(254,28,30)" fg:x="24039" fg:w="24"/><text x="44.5656%" y="287.50"></text></g><g><title>h2::proto::streams::counts::Counts::transition_after (91 samples, 0.17%)</title><rect x="44.2861%" y="325" width="0.1678%" height="15" fill="rgb(241,142,54)" fg:x="24023" fg:w="91"/><text x="44.5361%" y="335.50"></text></g><g><title>h2::proto::streams::store::Ptr::unlink (51 samples, 0.09%)</title><rect x="44.3598%" y="309" width="0.0940%" height="15" fill="rgb(222,85,15)" fg:x="24063" fg:w="51"/><text x="44.6098%" y="319.50"></text></g><g><title>h2::proto::streams::store::Queue&lt;N&gt;::push (12 samples, 0.02%)</title><rect x="44.4631%" y="325" width="0.0221%" height="15" fill="rgb(210,85,47)" fg:x="24119" fg:w="12"/><text x="44.7131%" y="335.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::pop_frame (201 samples, 0.37%)</title><rect x="44.1184%" y="341" width="0.3705%" height="15" fill="rgb(224,206,25)" fg:x="23932" fg:w="201"/><text x="44.3684%" y="351.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::reclaim_frame (34 samples, 0.06%)</title><rect x="44.4889%" y="341" width="0.0627%" height="15" fill="rgb(243,201,19)" fg:x="24133" fg:w="34"/><text x="44.7389%" y="351.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (7 samples, 0.01%)</title><rect x="44.5387%" y="325" width="0.0129%" height="15" fill="rgb(236,59,4)" fg:x="24160" fg:w="7"/><text x="44.7887%" y="335.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::schedule_pending_open (10 samples, 0.02%)</title><rect x="44.5516%" y="341" width="0.0184%" height="15" fill="rgb(254,179,45)" fg:x="24167" fg:w="10"/><text x="44.8016%" y="351.50"></text></g><g><title>pthread_mutex_lock (6 samples, 0.01%)</title><rect x="44.5700%" y="341" width="0.0111%" height="15" fill="rgb(226,14,10)" fg:x="24177" fg:w="6"/><text x="44.8200%" y="351.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (1,221 samples, 2.25%)</title><rect x="42.3449%" y="357" width="2.2509%" height="15" fill="rgb(244,27,41)" fg:x="22970" fg:w="1221"/><text x="42.5949%" y="367.50">h..</text></g><g><title>h2::proto::streams::recv::Recv::take_request (15 samples, 0.03%)</title><rect x="44.5958%" y="357" width="0.0277%" height="15" fill="rgb(235,35,32)" fg:x="24191" fg:w="15"/><text x="44.8458%" y="367.50"></text></g><g><title>h2::proto::streams::buffer::Deque::pop_front (10 samples, 0.02%)</title><rect x="44.6050%" y="341" width="0.0184%" height="15" fill="rgb(218,68,31)" fg:x="24196" fg:w="10"/><text x="44.8550%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="44.6069%" y="325" width="0.0166%" height="15" fill="rgb(207,120,37)" fg:x="24197" fg:w="9"/><text x="44.8569%" y="335.50"></text></g><g><title>h2::proto::streams::streams::OpaqueStreamRef::new (7 samples, 0.01%)</title><rect x="44.6327%" y="357" width="0.0129%" height="15" fill="rgb(227,98,0)" fg:x="24211" fg:w="7"/><text x="44.8827%" y="367.50"></text></g><g><title>h2::share::RecvStream::is_end_stream (11 samples, 0.02%)</title><rect x="44.6456%" y="357" width="0.0203%" height="15" fill="rgb(207,7,3)" fg:x="24218" fg:w="11"/><text x="44.8956%" y="367.50"></text></g><g><title>pthread_mutex_lock (6 samples, 0.01%)</title><rect x="44.6548%" y="341" width="0.0111%" height="15" fill="rgb(206,98,19)" fg:x="24223" fg:w="6"/><text x="44.9048%" y="351.50"></text></g><g><title>hyper::headers::content_length_parse_all (12 samples, 0.02%)</title><rect x="44.6659%" y="357" width="0.0221%" height="15" fill="rgb(217,5,26)" fg:x="24229" fg:w="12"/><text x="44.9159%" y="367.50"></text></g><g><title>mi_malloc (12 samples, 0.02%)</title><rect x="44.6880%" y="357" width="0.0221%" height="15" fill="rgb(235,190,38)" fg:x="24241" fg:w="12"/><text x="44.9380%" y="367.50"></text></g><g><title>pthread_mutex_lock (33 samples, 0.06%)</title><rect x="44.7101%" y="357" width="0.0608%" height="15" fill="rgb(247,86,24)" fg:x="24253" fg:w="33"/><text x="44.9601%" y="367.50"></text></g><g><title>__lll_lock_wait (16 samples, 0.03%)</title><rect x="44.7415%" y="341" width="0.0295%" height="15" fill="rgb(205,101,16)" fg:x="24270" fg:w="16"/><text x="44.9915%" y="351.50"></text></g><g><title>hyper::proto::h2::server::Serving&lt;T,B&gt;::poll_server (1,804 samples, 3.33%)</title><rect x="41.4582%" y="373" width="3.3257%" height="15" fill="rgb(246,168,33)" fg:x="22489" fg:w="1804"/><text x="41.7082%" y="383.50">hyp..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (6 samples, 0.01%)</title><rect x="44.7728%" y="357" width="0.0111%" height="15" fill="rgb(231,114,1)" fg:x="24287" fg:w="6"/><text x="45.0228%" y="367.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (1,831 samples, 3.38%)</title><rect x="41.4121%" y="389" width="3.3754%" height="15" fill="rgb(207,184,53)" fg:x="22464" fg:w="1831"/><text x="41.6621%" y="399.50">&lt;hy..</text></g><g><title>_mi_heap_delayed_free (16 samples, 0.03%)</title><rect x="44.7986%" y="341" width="0.0295%" height="15" fill="rgb(224,95,51)" fg:x="24301" fg:w="16"/><text x="45.0486%" y="351.50"></text></g><g><title>_mi_free_delayed_block (15 samples, 0.03%)</title><rect x="44.8004%" y="325" width="0.0277%" height="15" fill="rgb(212,188,45)" fg:x="24302" fg:w="15"/><text x="45.0504%" y="335.50"></text></g><g><title>_mi_page_free_collect (15 samples, 0.03%)</title><rect x="44.8004%" y="309" width="0.0277%" height="15" fill="rgb(223,154,38)" fg:x="24302" fg:w="15"/><text x="45.0504%" y="319.50"></text></g><g><title>_mi_malloc_generic (34 samples, 0.06%)</title><rect x="44.7986%" y="357" width="0.0627%" height="15" fill="rgb(251,22,52)" fg:x="24301" fg:w="34"/><text x="45.0486%" y="367.50"></text></g><g><title>mi_thread_init (14 samples, 0.03%)</title><rect x="44.8355%" y="341" width="0.0258%" height="15" fill="rgb(229,209,22)" fg:x="24321" fg:w="14"/><text x="45.0855%" y="351.50"></text></g><g><title>_mi_os_alloc (8 samples, 0.01%)</title><rect x="44.8465%" y="325" width="0.0147%" height="15" fill="rgb(234,138,34)" fg:x="24327" fg:w="8"/><text x="45.0965%" y="335.50"></text></g><g><title>mi_unix_mmap (8 samples, 0.01%)</title><rect x="44.8465%" y="309" width="0.0147%" height="15" fill="rgb(212,95,11)" fg:x="24327" fg:w="8"/><text x="45.0965%" y="319.50"></text></g><g><title>mi_unix_mmapx.constprop.111 (7 samples, 0.01%)</title><rect x="44.8484%" y="293" width="0.0129%" height="15" fill="rgb(240,179,47)" fg:x="24328" fg:w="7"/><text x="45.0984%" y="303.50"></text></g><g><title>__mmap64 (6 samples, 0.01%)</title><rect x="44.8502%" y="277" width="0.0111%" height="15" fill="rgb(240,163,11)" fg:x="24329" fg:w="6"/><text x="45.1002%" y="287.50"></text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (44 samples, 0.08%)</title><rect x="44.7875%" y="389" width="0.0811%" height="15" fill="rgb(236,37,12)" fg:x="24295" fg:w="44"/><text x="45.0375%" y="399.50"></text></g><g><title>hyper::proto::h2::server::Server&lt;T,S,B,E&gt;::new (43 samples, 0.08%)</title><rect x="44.7894%" y="373" width="0.0793%" height="15" fill="rgb(232,164,16)" fg:x="24296" fg:w="43"/><text x="45.0394%" y="383.50"></text></g><g><title>_mi_free_block_mt (18 samples, 0.03%)</title><rect x="49.8276%" y="261" width="0.0332%" height="15" fill="rgb(244,205,15)" fg:x="27029" fg:w="18"/><text x="50.0776%" y="271.50"></text></g><g><title>event_listener::Inner::lock (44 samples, 0.08%)</title><rect x="49.8608%" y="261" width="0.0811%" height="15" fill="rgb(223,117,47)" fg:x="27047" fg:w="44"/><text x="50.1108%" y="271.50"></text></g><g><title>pthread_mutex_lock (38 samples, 0.07%)</title><rect x="49.8719%" y="245" width="0.0701%" height="15" fill="rgb(244,107,35)" fg:x="27053" fg:w="38"/><text x="50.1219%" y="255.50"></text></g><g><title>__lll_lock_wait (26 samples, 0.05%)</title><rect x="49.8940%" y="229" width="0.0479%" height="15" fill="rgb(205,140,8)" fg:x="27065" fg:w="26"/><text x="50.1440%" y="239.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (90 samples, 0.17%)</title><rect x="49.7908%" y="277" width="0.1659%" height="15" fill="rgb(228,84,46)" fg:x="27009" fg:w="90"/><text x="50.0408%" y="287.50"></text></g><g><title>_mi_free_block_mt (205 samples, 0.38%)</title><rect x="49.9677%" y="277" width="0.3779%" height="15" fill="rgb(254,188,9)" fg:x="27105" fg:w="205"/><text x="50.2177%" y="287.50"></text></g><g><title>_mi_page_free_collect (236 samples, 0.44%)</title><rect x="50.3917%" y="229" width="0.4351%" height="15" fill="rgb(206,112,54)" fg:x="27335" fg:w="236"/><text x="50.6417%" y="239.50"></text></g><g><title>_mi_heap_delayed_free (265 samples, 0.49%)</title><rect x="50.3493%" y="261" width="0.4885%" height="15" fill="rgb(216,84,49)" fg:x="27312" fg:w="265"/><text x="50.5993%" y="271.50"></text></g><g><title>_mi_free_delayed_block (243 samples, 0.45%)</title><rect x="50.3899%" y="245" width="0.4480%" height="15" fill="rgb(214,194,35)" fg:x="27334" fg:w="243"/><text x="50.6399%" y="255.50"></text></g><g><title>_mi_page_use_delayed_free (6 samples, 0.01%)</title><rect x="50.8268%" y="229" width="0.0111%" height="15" fill="rgb(249,28,3)" fg:x="27571" fg:w="6"/><text x="51.0768%" y="239.50"></text></g><g><title>_mi_malloc_generic (271 samples, 0.50%)</title><rect x="50.3457%" y="277" width="0.4996%" height="15" fill="rgb(222,56,52)" fg:x="27310" fg:w="271"/><text x="50.5957%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.03%)</title><rect x="50.8452%" y="277" width="0.0258%" height="15" fill="rgb(245,217,50)" fg:x="27581" fg:w="14"/><text x="51.0952%" y="287.50"></text></g><g><title>_mi_free_block_mt (28 samples, 0.05%)</title><rect x="50.9098%" y="245" width="0.0516%" height="15" fill="rgb(213,201,24)" fg:x="27616" fg:w="28"/><text x="51.1598%" y="255.50"></text></g><g><title>event_listener::Inner::lock (27 samples, 0.05%)</title><rect x="50.9614%" y="245" width="0.0498%" height="15" fill="rgb(248,116,28)" fg:x="27644" fg:w="27"/><text x="51.2114%" y="255.50"></text></g><g><title>pthread_mutex_lock (24 samples, 0.04%)</title><rect x="50.9669%" y="229" width="0.0442%" height="15" fill="rgb(219,72,43)" fg:x="27647" fg:w="24"/><text x="51.2169%" y="239.50"></text></g><g><title>__lll_lock_wait (11 samples, 0.02%)</title><rect x="50.9909%" y="213" width="0.0203%" height="15" fill="rgb(209,138,14)" fg:x="27660" fg:w="11"/><text x="51.2409%" y="223.50"></text></g><g><title>event_listener::List::notify (43 samples, 0.08%)</title><rect x="51.0112%" y="245" width="0.0793%" height="15" fill="rgb(222,18,33)" fg:x="27671" fg:w="43"/><text x="51.2612%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (32 samples, 0.06%)</title><rect x="51.0314%" y="229" width="0.0590%" height="15" fill="rgb(213,199,7)" fg:x="27682" fg:w="32"/><text x="51.2814%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (25 samples, 0.05%)</title><rect x="51.0443%" y="213" width="0.0461%" height="15" fill="rgb(250,110,10)" fg:x="27689" fg:w="25"/><text x="51.2943%" y="223.50"></text></g><g><title>mi_free (8 samples, 0.01%)</title><rect x="51.0904%" y="245" width="0.0147%" height="15" fill="rgb(248,123,6)" fg:x="27714" fg:w="8"/><text x="51.3404%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;storage::Request&gt;&gt; (131 samples, 0.24%)</title><rect x="50.8710%" y="277" width="0.2415%" height="15" fill="rgb(206,91,31)" fg:x="27595" fg:w="131"/><text x="51.1210%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (120 samples, 0.22%)</title><rect x="50.8913%" y="261" width="0.2212%" height="15" fill="rgb(211,154,13)" fg:x="27606" fg:w="120"/><text x="51.1413%" y="271.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (30 samples, 0.06%)</title><rect x="51.1955%" y="261" width="0.0553%" height="15" fill="rgb(225,148,7)" fg:x="27771" fg:w="30"/><text x="51.4455%" y="271.50"></text></g><g><title>__lll_unlock_wake (6 samples, 0.01%)</title><rect x="51.2397%" y="245" width="0.0111%" height="15" fill="rgb(220,160,43)" fg:x="27795" fg:w="6"/><text x="51.4897%" y="255.50"></text></g><g><title>event_listener::Inner::lock (59 samples, 0.11%)</title><rect x="51.2545%" y="261" width="0.1088%" height="15" fill="rgb(213,52,39)" fg:x="27803" fg:w="59"/><text x="51.5045%" y="271.50"></text></g><g><title>pthread_mutex_lock (46 samples, 0.08%)</title><rect x="51.2785%" y="245" width="0.0848%" height="15" fill="rgb(243,137,7)" fg:x="27816" fg:w="46"/><text x="51.5285%" y="255.50"></text></g><g><title>event_listener::Event::listen (171 samples, 0.32%)</title><rect x="51.1181%" y="277" width="0.3152%" height="15" fill="rgb(230,79,13)" fg:x="27729" fg:w="171"/><text x="51.3681%" y="287.50"></text></g><g><title>mi_malloc (38 samples, 0.07%)</title><rect x="51.3633%" y="261" width="0.0701%" height="15" fill="rgb(247,105,23)" fg:x="27862" fg:w="38"/><text x="51.6133%" y="271.50"></text></g><g><title>event_listener::Inner::lock (360 samples, 0.66%)</title><rect x="51.4333%" y="277" width="0.6637%" height="15" fill="rgb(223,179,41)" fg:x="27900" fg:w="360"/><text x="51.6833%" y="287.50"></text></g><g><title>pthread_mutex_lock (348 samples, 0.64%)</title><rect x="51.4554%" y="261" width="0.6415%" height="15" fill="rgb(218,9,34)" fg:x="27912" fg:w="348"/><text x="51.7054%" y="271.50"></text></g><g><title>__lll_lock_wait (318 samples, 0.59%)</title><rect x="51.5107%" y="245" width="0.5862%" height="15" fill="rgb(222,106,8)" fg:x="27942" fg:w="318"/><text x="51.7607%" y="255.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (49 samples, 0.09%)</title><rect x="52.1338%" y="261" width="0.0903%" height="15" fill="rgb(211,220,0)" fg:x="28280" fg:w="49"/><text x="52.3838%" y="271.50"></text></g><g><title>runtime::executor::schedule::_{{closure}}::_{{closure}} (33 samples, 0.06%)</title><rect x="52.1633%" y="245" width="0.0608%" height="15" fill="rgb(229,52,16)" fg:x="28296" fg:w="33"/><text x="52.4133%" y="255.50"></text></g><g><title>event_listener::List::notify (71 samples, 0.13%)</title><rect x="52.0970%" y="277" width="0.1309%" height="15" fill="rgb(212,155,18)" fg:x="28260" fg:w="71"/><text x="52.3470%" y="287.50"></text></g><g><title>mi_free (45 samples, 0.08%)</title><rect x="52.2297%" y="277" width="0.0830%" height="15" fill="rgb(242,21,14)" fg:x="28332" fg:w="45"/><text x="52.4797%" y="287.50"></text></g><g><title>mi_free_generic (56 samples, 0.10%)</title><rect x="52.3127%" y="277" width="0.1032%" height="15" fill="rgb(222,19,48)" fg:x="28377" fg:w="56"/><text x="52.5627%" y="287.50"></text></g><g><title>mi_malloc (244 samples, 0.45%)</title><rect x="52.4159%" y="277" width="0.4498%" height="15" fill="rgb(232,45,27)" fg:x="28433" fg:w="244"/><text x="52.6659%" y="287.50"></text></g><g><title>polling::Poller::notify (44 samples, 0.08%)</title><rect x="52.8657%" y="277" width="0.0811%" height="15" fill="rgb(249,103,42)" fg:x="28677" fg:w="44"/><text x="53.1157%" y="287.50"></text></g><g><title>__GI___libc_write (6 samples, 0.01%)</title><rect x="52.9358%" y="261" width="0.0111%" height="15" fill="rgb(246,81,33)" fg:x="28715" fg:w="6"/><text x="53.1858%" y="271.50"></text></g><g><title>__memcmp_sse4_1 (59 samples, 0.11%)</title><rect x="53.3782%" y="261" width="0.1088%" height="15" fill="rgb(252,33,42)" fg:x="28955" fg:w="59"/><text x="53.6282%" y="271.50"></text></g><g><title>mi_free (21 samples, 0.04%)</title><rect x="53.4906%" y="261" width="0.0387%" height="15" fill="rgb(209,212,41)" fg:x="29016" fg:w="21"/><text x="53.7406%" y="271.50"></text></g><g><title>storage::Storage::hash_labels (499 samples, 0.92%)</title><rect x="52.9505%" y="277" width="0.9199%" height="15" fill="rgb(207,154,6)" fg:x="28723" fg:w="499"/><text x="53.2005%" y="287.50"></text></g><g><title>mi_malloc (185 samples, 0.34%)</title><rect x="53.5294%" y="261" width="0.3410%" height="15" fill="rgb(223,64,47)" fg:x="29037" fg:w="185"/><text x="53.7794%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,528 samples, 6.50%)</title><rect x="47.4016%" y="293" width="6.5038%" height="15" fill="rgb(211,161,38)" fg:x="25713" fg:w="3528"/><text x="47.6516%" y="303.50">&lt;core::fu..</text></g><g><title>tokio::runtime::task::waker::clone_waker (19 samples, 0.04%)</title><rect x="53.8704%" y="277" width="0.0350%" height="15" fill="rgb(219,138,40)" fg:x="29222" fg:w="19"/><text x="54.1204%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (763 samples, 1.41%)</title><rect x="53.9054%" y="293" width="1.4066%" height="15" fill="rgb(241,228,46)" fg:x="29241" fg:w="763"/><text x="54.1554%" y="303.50"></text></g><g><title>_mi_free_block_mt (2,267 samples, 4.18%)</title><rect x="55.3120%" y="293" width="4.1792%" height="15" fill="rgb(223,209,38)" fg:x="30004" fg:w="2267"/><text x="55.5620%" y="303.50">_mi_f..</text></g><g><title>_mi_page_free_collect (1,691 samples, 3.12%)</title><rect x="59.9097%" y="245" width="3.1173%" height="15" fill="rgb(236,164,45)" fg:x="32498" fg:w="1691"/><text x="60.1597%" y="255.50">_mi..</text></g><g><title>_mi_heap_delayed_free (1,974 samples, 3.64%)</title><rect x="59.5354%" y="277" width="3.6390%" height="15" fill="rgb(231,15,5)" fg:x="32295" fg:w="1974"/><text x="59.7854%" y="287.50">_mi_..</text></g><g><title>_mi_free_delayed_block (1,797 samples, 3.31%)</title><rect x="59.8617%" y="261" width="3.3127%" height="15" fill="rgb(252,35,15)" fg:x="32472" fg:w="1797"/><text x="60.1117%" y="271.50">_mi..</text></g><g><title>_mi_page_use_delayed_free (75 samples, 0.14%)</title><rect x="63.0362%" y="245" width="0.1383%" height="15" fill="rgb(248,181,18)" fg:x="34194" fg:w="75"/><text x="63.2862%" y="255.50"></text></g><g><title>_mi_page_free_collect (10 samples, 0.02%)</title><rect x="63.1745%" y="277" width="0.0184%" height="15" fill="rgb(233,39,42)" fg:x="34269" fg:w="10"/><text x="63.4245%" y="287.50"></text></g><g><title>__memset_avx2_erms (11 samples, 0.02%)</title><rect x="63.2335%" y="213" width="0.0203%" height="15" fill="rgb(238,110,33)" fg:x="34301" fg:w="11"/><text x="63.4835%" y="223.50"></text></g><g><title>_mi_segment_page_alloc (25 samples, 0.05%)</title><rect x="63.2095%" y="261" width="0.0461%" height="15" fill="rgb(233,195,10)" fg:x="34288" fg:w="25"/><text x="63.4595%" y="271.50"></text></g><g><title>mi_segment_reclaim_or_alloc (24 samples, 0.04%)</title><rect x="63.2114%" y="245" width="0.0442%" height="15" fill="rgb(254,105,3)" fg:x="34289" fg:w="24"/><text x="63.4614%" y="255.50"></text></g><g><title>mi_segment_init.constprop.102 (24 samples, 0.04%)</title><rect x="63.2114%" y="229" width="0.0442%" height="15" fill="rgb(221,225,9)" fg:x="34289" fg:w="24"/><text x="63.4614%" y="239.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (21 samples, 0.04%)</title><rect x="63.2593%" y="261" width="0.0387%" height="15" fill="rgb(224,227,45)" fg:x="34315" fg:w="21"/><text x="63.5093%" y="271.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (21 samples, 0.04%)</title><rect x="63.2593%" y="245" width="0.0387%" height="15" fill="rgb(229,198,43)" fg:x="34315" fg:w="21"/><text x="63.5093%" y="255.50"></text></g><g><title>mi_page_queue_find_free_ex (63 samples, 0.12%)</title><rect x="63.1929%" y="277" width="0.1161%" height="15" fill="rgb(206,209,35)" fg:x="34279" fg:w="63"/><text x="63.4429%" y="287.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (6 samples, 0.01%)</title><rect x="63.2980%" y="261" width="0.0111%" height="15" fill="rgb(245,195,53)" fg:x="34336" fg:w="6"/><text x="63.5480%" y="271.50"></text></g><g><title>__mmap64 (14 samples, 0.03%)</title><rect x="63.3570%" y="213" width="0.0258%" height="15" fill="rgb(240,92,26)" fg:x="34368" fg:w="14"/><text x="63.6070%" y="223.50"></text></g><g><title>_mi_malloc_generic (2,112 samples, 3.89%)</title><rect x="59.4912%" y="293" width="3.8934%" height="15" fill="rgb(207,40,23)" fg:x="32271" fg:w="2112"/><text x="59.7412%" y="303.50">_mi_..</text></g><g><title>mi_thread_init (41 samples, 0.08%)</title><rect x="63.3091%" y="277" width="0.0756%" height="15" fill="rgb(223,111,35)" fg:x="34342" fg:w="41"/><text x="63.5591%" y="287.50"></text></g><g><title>_mi_os_alloc (26 samples, 0.05%)</title><rect x="63.3367%" y="261" width="0.0479%" height="15" fill="rgb(229,147,28)" fg:x="34357" fg:w="26"/><text x="63.5867%" y="271.50"></text></g><g><title>mi_unix_mmap (26 samples, 0.05%)</title><rect x="63.3367%" y="245" width="0.0479%" height="15" fill="rgb(211,29,28)" fg:x="34357" fg:w="26"/><text x="63.5867%" y="255.50"></text></g><g><title>mi_unix_mmapx.constprop.111 (26 samples, 0.05%)</title><rect x="63.3367%" y="229" width="0.0479%" height="15" fill="rgb(228,72,33)" fg:x="34357" fg:w="26"/><text x="63.5867%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;proto::prometheus::Exemplar&gt;&gt; (49 samples, 0.09%)</title><rect x="63.3902%" y="293" width="0.0903%" height="15" fill="rgb(205,214,31)" fg:x="34386" fg:w="49"/><text x="63.6402%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;storage::Storage::write::{{closure}}::{{closure}}&gt;&gt; (7 samples, 0.01%)</title><rect x="63.4805%" y="293" width="0.0129%" height="15" fill="rgb(224,111,15)" fg:x="34435" fg:w="7"/><text x="63.7305%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tonic::extensions::Extensions&gt; (8 samples, 0.01%)</title><rect x="63.5026%" y="293" width="0.0147%" height="15" fill="rgb(253,21,26)" fg:x="34447" fg:w="8"/><text x="63.7526%" y="303.50"></text></g><g><title>bytes::bytes::shared_drop (13 samples, 0.02%)</title><rect x="63.5229%" y="277" width="0.0240%" height="15" fill="rgb(245,139,43)" fg:x="34458" fg:w="13"/><text x="63.7729%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tonic::metadata::map::MetadataMap&gt; (21 samples, 0.04%)</title><rect x="63.5174%" y="293" width="0.0387%" height="15" fill="rgb(252,170,7)" fg:x="34455" fg:w="21"/><text x="63.7674%" y="303.50"></text></g><g><title>mi_free (136 samples, 0.25%)</title><rect x="63.5579%" y="293" width="0.2507%" height="15" fill="rgb(231,118,14)" fg:x="34477" fg:w="136"/><text x="63.8079%" y="303.50"></text></g><g><title>mi_free_generic (256 samples, 0.47%)</title><rect x="63.8086%" y="293" width="0.4719%" height="15" fill="rgb(238,83,0)" fg:x="34613" fg:w="256"/><text x="64.0586%" y="303.50"></text></g><g><title>mi_malloc (1,038 samples, 1.91%)</title><rect x="64.2806%" y="293" width="1.9135%" height="15" fill="rgb(221,39,39)" fg:x="34869" fg:w="1038"/><text x="64.5306%" y="303.50">m..</text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (11,570 samples, 21.33%)</title><rect x="44.8687%" y="389" width="21.3292%" height="15" fill="rgb(222,119,46)" fg:x="24339" fg:w="11570"/><text x="45.1187%" y="399.50">&lt;tonic::transport::server::SvcFutu..</text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (11,570 samples, 21.33%)</title><rect x="44.8687%" y="373" width="21.3292%" height="15" fill="rgb(222,165,49)" fg:x="24339" fg:w="11570"/><text x="45.1187%" y="383.50">&lt;tonic::transport::service::grpc_t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,570 samples, 21.33%)</title><rect x="44.8687%" y="357" width="21.3292%" height="15" fill="rgb(219,113,52)" fg:x="24339" fg:w="11570"/><text x="45.1187%" y="367.50">&lt;core::future::from_generator::Gen..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,570 samples, 21.33%)</title><rect x="44.8687%" y="341" width="21.3292%" height="15" fill="rgb(214,7,15)" fg:x="24339" fg:w="11570"/><text x="45.1187%" y="351.50">&lt;core::future::from_generator::Gen..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,570 samples, 21.33%)</title><rect x="44.8687%" y="325" width="21.3292%" height="15" fill="rgb(235,32,4)" fg:x="24339" fg:w="11570"/><text x="45.1187%" y="335.50">&lt;core::future::from_generator::Gen..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,570 samples, 21.33%)</title><rect x="44.8687%" y="309" width="21.3292%" height="15" fill="rgb(238,90,54)" fg:x="24339" fg:w="11570"/><text x="45.1187%" y="319.50">&lt;core::future::from_generator::Gen..</text></g><g><title>_mi_page_free_collect (23 samples, 0.04%)</title><rect x="66.1978%" y="229" width="0.0424%" height="15" fill="rgb(213,208,19)" fg:x="35909" fg:w="23"/><text x="66.4478%" y="239.50"></text></g><g><title>_mi_malloc_generic (27 samples, 0.05%)</title><rect x="66.1978%" y="277" width="0.0498%" height="15" fill="rgb(233,156,4)" fg:x="35909" fg:w="27"/><text x="66.4478%" y="287.50"></text></g><g><title>_mi_heap_delayed_free (27 samples, 0.05%)</title><rect x="66.1978%" y="261" width="0.0498%" height="15" fill="rgb(207,194,5)" fg:x="35909" fg:w="27"/><text x="66.4478%" y="271.50"></text></g><g><title>_mi_free_delayed_block (27 samples, 0.05%)</title><rect x="66.1978%" y="245" width="0.0498%" height="15" fill="rgb(206,111,30)" fg:x="35909" fg:w="27"/><text x="66.4478%" y="255.50"></text></g><g><title>event_listener::Event::listen (584 samples, 1.08%)</title><rect x="66.1978%" y="293" width="1.0766%" height="15" fill="rgb(243,70,54)" fg:x="35909" fg:w="584"/><text x="66.4478%" y="303.50"></text></g><g><title>event_listener::Inner::lock (557 samples, 1.03%)</title><rect x="66.2476%" y="277" width="1.0268%" height="15" fill="rgb(242,28,8)" fg:x="35936" fg:w="557"/><text x="66.4976%" y="287.50"></text></g><g><title>pthread_mutex_lock (557 samples, 1.03%)</title><rect x="66.2476%" y="261" width="1.0268%" height="15" fill="rgb(219,106,18)" fg:x="35936" fg:w="557"/><text x="66.4976%" y="271.50"></text></g><g><title>__lll_lock_wait (557 samples, 1.03%)</title><rect x="66.2476%" y="245" width="1.0268%" height="15" fill="rgb(244,222,10)" fg:x="35936" fg:w="557"/><text x="66.4976%" y="255.50"></text></g><g><title>event_listener::List::notify (8 samples, 0.01%)</title><rect x="67.2744%" y="293" width="0.0147%" height="15" fill="rgb(236,179,52)" fg:x="36493" fg:w="8"/><text x="67.5244%" y="303.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (8 samples, 0.01%)</title><rect x="67.2744%" y="277" width="0.0147%" height="15" fill="rgb(213,23,39)" fg:x="36493" fg:w="8"/><text x="67.5244%" y="287.50"></text></g><g><title>runtime::executor::schedule::_{{closure}}::_{{closure}} (8 samples, 0.01%)</title><rect x="67.2744%" y="261" width="0.0147%" height="15" fill="rgb(238,48,10)" fg:x="36493" fg:w="8"/><text x="67.5244%" y="271.50"></text></g><g><title>_mi_page_free_collect (103 samples, 0.19%)</title><rect x="67.3205%" y="229" width="0.1899%" height="15" fill="rgb(251,196,23)" fg:x="36518" fg:w="103"/><text x="67.5705%" y="239.50"></text></g><g><title>_mi_heap_delayed_free (124 samples, 0.23%)</title><rect x="67.2892%" y="261" width="0.2286%" height="15" fill="rgb(250,152,24)" fg:x="36501" fg:w="124"/><text x="67.5392%" y="271.50"></text></g><g><title>_mi_free_delayed_block (110 samples, 0.20%)</title><rect x="67.3150%" y="245" width="0.2028%" height="15" fill="rgb(209,150,17)" fg:x="36515" fg:w="110"/><text x="67.5650%" y="255.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (722 samples, 1.33%)</title><rect x="66.1978%" y="389" width="1.3310%" height="15" fill="rgb(234,202,34)" fg:x="35909" fg:w="722"/><text x="66.4478%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (722 samples, 1.33%)</title><rect x="66.1978%" y="373" width="1.3310%" height="15" fill="rgb(253,148,53)" fg:x="35909" fg:w="722"/><text x="66.4478%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (722 samples, 1.33%)</title><rect x="66.1978%" y="357" width="1.3310%" height="15" fill="rgb(218,129,16)" fg:x="35909" fg:w="722"/><text x="66.4478%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (722 samples, 1.33%)</title><rect x="66.1978%" y="341" width="1.3310%" height="15" fill="rgb(216,85,19)" fg:x="35909" fg:w="722"/><text x="66.4478%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (722 samples, 1.33%)</title><rect x="66.1978%" y="325" width="1.3310%" height="15" fill="rgb(235,228,7)" fg:x="35909" fg:w="722"/><text x="66.4478%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (722 samples, 1.33%)</title><rect x="66.1978%" y="309" width="1.3310%" height="15" fill="rgb(245,175,0)" fg:x="35909" fg:w="722"/><text x="66.4478%" y="319.50"></text></g><g><title>storage::Storage::hash_labels (130 samples, 0.24%)</title><rect x="67.2892%" y="293" width="0.2397%" height="15" fill="rgb(208,168,36)" fg:x="36501" fg:w="130"/><text x="67.5392%" y="303.50"></text></g><g><title>_mi_malloc_generic (130 samples, 0.24%)</title><rect x="67.2892%" y="277" width="0.2397%" height="15" fill="rgb(246,171,24)" fg:x="36501" fg:w="130"/><text x="67.5392%" y="287.50"></text></g><g><title>mi_page_queue_find_free_ex (6 samples, 0.01%)</title><rect x="67.5177%" y="261" width="0.0111%" height="15" fill="rgb(215,142,24)" fg:x="36625" fg:w="6"/><text x="67.7677%" y="271.50"></text></g><g><title>mi_page_extend_free.isra.40.part.41 (6 samples, 0.01%)</title><rect x="67.5177%" y="245" width="0.0111%" height="15" fill="rgb(250,187,7)" fg:x="36625" fg:w="6"/><text x="67.7677%" y="255.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (6 samples, 0.01%)</title><rect x="67.5177%" y="229" width="0.0111%" height="15" fill="rgb(228,66,33)" fg:x="36625" fg:w="6"/><text x="67.7677%" y="239.50"></text></g><g><title>malloc (26 samples, 0.05%)</title><rect x="67.5325%" y="293" width="0.0479%" height="15" fill="rgb(234,215,21)" fg:x="36633" fg:w="26"/><text x="67.7825%" y="303.50"></text></g><g><title>arena_get2.part.3 (25 samples, 0.05%)</title><rect x="67.5343%" y="277" width="0.0461%" height="15" fill="rgb(222,191,20)" fg:x="36634" fg:w="25"/><text x="67.7843%" y="287.50"></text></g><g><title>new_heap (18 samples, 0.03%)</title><rect x="67.5472%" y="261" width="0.0332%" height="15" fill="rgb(245,79,54)" fg:x="36641" fg:w="18"/><text x="67.7972%" y="271.50"></text></g><g><title>std::sys::unix::thread::guard::current (29 samples, 0.05%)</title><rect x="67.5306%" y="325" width="0.0535%" height="15" fill="rgb(240,10,37)" fg:x="36632" fg:w="29"/><text x="67.7806%" y="335.50"></text></g><g><title>pthread_getattr_np (29 samples, 0.05%)</title><rect x="67.5306%" y="309" width="0.0535%" height="15" fill="rgb(214,192,32)" fg:x="36632" fg:w="29"/><text x="67.7806%" y="319.50"></text></g><g><title>pthread_mutex_lock (39 samples, 0.07%)</title><rect x="67.5878%" y="309" width="0.0719%" height="15" fill="rgb(209,36,54)" fg:x="36663" fg:w="39"/><text x="67.8378%" y="319.50"></text></g><g><title>__lll_lock_wait (35 samples, 0.06%)</title><rect x="67.5952%" y="293" width="0.0645%" height="15" fill="rgb(220,10,11)" fg:x="36667" fg:w="35"/><text x="67.8452%" y="303.50"></text></g><g><title>pthread_mutex_lock (24 samples, 0.04%)</title><rect x="67.9196%" y="277" width="0.0442%" height="15" fill="rgb(221,106,17)" fg:x="36843" fg:w="24"/><text x="68.1696%" y="287.50"></text></g><g><title>__lll_lock_wait (16 samples, 0.03%)</title><rect x="67.9344%" y="261" width="0.0295%" height="15" fill="rgb(251,142,44)" fg:x="36851" fg:w="16"/><text x="68.1844%" y="271.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (238 samples, 0.44%)</title><rect x="68.8027%" y="261" width="0.4388%" height="15" fill="rgb(238,13,15)" fg:x="37322" fg:w="238"/><text x="69.0527%" y="271.50"></text></g><g><title>__lll_unlock_wake (31 samples, 0.06%)</title><rect x="69.1843%" y="245" width="0.0571%" height="15" fill="rgb(208,107,27)" fg:x="37529" fg:w="31"/><text x="69.4343%" y="255.50"></text></g><g><title>apic_timer_interrupt (22 samples, 0.04%)</title><rect x="76.7518%" y="229" width="0.0406%" height="15" fill="rgb(205,136,37)" fg:x="41634" fg:w="22"/><text x="77.0018%" y="239.50"></text></g><g><title>call_function_interrupt (8 samples, 0.01%)</title><rect x="76.7923%" y="229" width="0.0147%" height="15" fill="rgb(250,205,27)" fg:x="41656" fg:w="8"/><text x="77.0423%" y="239.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.01%)</title><rect x="76.8071%" y="229" width="0.0129%" height="15" fill="rgb(210,80,43)" fg:x="41664" fg:w="7"/><text x="77.0571%" y="239.50"></text></g><g><title>irq_entries_start (37 samples, 0.07%)</title><rect x="76.8200%" y="229" width="0.0682%" height="15" fill="rgb(247,160,36)" fg:x="41671" fg:w="37"/><text x="77.0700%" y="239.50"></text></g><g><title>irq_work_interrupt (15 samples, 0.03%)</title><rect x="76.8882%" y="229" width="0.0277%" height="15" fill="rgb(234,13,49)" fg:x="41708" fg:w="15"/><text x="77.1382%" y="239.50"></text></g><g><title>__lll_lock_wait (3,810 samples, 7.02%)</title><rect x="69.9014%" y="245" width="7.0237%" height="15" fill="rgb(234,122,0)" fg:x="37918" fg:w="3810"/><text x="70.1514%" y="255.50">__lll_loc..</text></g><g><title>pthread_mutex_lock (4,170 samples, 7.69%)</title><rect x="69.2414%" y="261" width="7.6873%" height="15" fill="rgb(207,146,38)" fg:x="37560" fg:w="4170"/><text x="69.4914%" y="271.50">pthread_mut..</text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (4,869 samples, 8.98%)</title><rect x="67.9639%" y="277" width="8.9759%" height="15" fill="rgb(207,177,25)" fg:x="36867" fg:w="4869"/><text x="68.2139%" y="287.50">tokio::runtim..</text></g><g><title>pthread_mutex_unlock (6 samples, 0.01%)</title><rect x="76.9287%" y="261" width="0.0111%" height="15" fill="rgb(211,178,42)" fg:x="41730" fg:w="6"/><text x="77.1787%" y="271.50"></text></g><g><title>__pthread_disable_asynccancel (24 samples, 0.04%)</title><rect x="78.0477%" y="229" width="0.0442%" height="15" fill="rgb(230,69,54)" fg:x="42337" fg:w="24"/><text x="78.2977%" y="239.50"></text></g><g><title>__pthread_mutex_cond_lock (7 samples, 0.01%)</title><rect x="78.0920%" y="229" width="0.0129%" height="15" fill="rgb(214,135,41)" fg:x="42361" fg:w="7"/><text x="78.3420%" y="239.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (600 samples, 1.11%)</title><rect x="77.0062%" y="245" width="1.1061%" height="15" fill="rgb(237,67,25)" fg:x="41772" fg:w="600"/><text x="77.2562%" y="255.50"></text></g><g><title>__libc_disable_asynccancel (7 samples, 0.01%)</title><rect x="78.4275%" y="197" width="0.0129%" height="15" fill="rgb(222,189,50)" fg:x="42543" fg:w="7"/><text x="78.6775%" y="207.50"></text></g><g><title>[libc-2.24.so] (158 samples, 0.29%)</title><rect x="78.1602%" y="213" width="0.2913%" height="15" fill="rgb(245,148,34)" fg:x="42398" fg:w="158"/><text x="78.4102%" y="223.50"></text></g><g><title>tokio::io::driver::Driver::turn (190 samples, 0.35%)</title><rect x="78.1325%" y="229" width="0.3503%" height="15" fill="rgb(222,29,6)" fg:x="42383" fg:w="190"/><text x="78.3825%" y="239.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (16 samples, 0.03%)</title><rect x="78.4533%" y="213" width="0.0295%" height="15" fill="rgb(221,189,43)" fg:x="42557" fg:w="16"/><text x="78.7033%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (7 samples, 0.01%)</title><rect x="78.4699%" y="197" width="0.0129%" height="15" fill="rgb(207,36,27)" fg:x="42566" fg:w="7"/><text x="78.7199%" y="207.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (6 samples, 0.01%)</title><rect x="78.4717%" y="181" width="0.0111%" height="15" fill="rgb(217,90,24)" fg:x="42567" fg:w="6"/><text x="78.7217%" y="191.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (834 samples, 1.54%)</title><rect x="76.9564%" y="261" width="1.5375%" height="15" fill="rgb(224,66,35)" fg:x="41745" fg:w="834"/><text x="77.2064%" y="271.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (204 samples, 0.38%)</title><rect x="78.1178%" y="245" width="0.3761%" height="15" fill="rgb(221,13,50)" fg:x="42375" fg:w="204"/><text x="78.3678%" y="255.50"></text></g><g><title>tokio::io::driver::Driver::turn (46 samples, 0.08%)</title><rect x="78.5363%" y="229" width="0.0848%" height="15" fill="rgb(236,68,49)" fg:x="42602" fg:w="46"/><text x="78.7863%" y="239.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (18 samples, 0.03%)</title><rect x="78.5879%" y="213" width="0.0332%" height="15" fill="rgb(229,146,28)" fg:x="42630" fg:w="18"/><text x="78.8379%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.01%)</title><rect x="78.6063%" y="197" width="0.0147%" height="15" fill="rgb(225,31,38)" fg:x="42640" fg:w="8"/><text x="78.8563%" y="207.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (8 samples, 0.01%)</title><rect x="78.6211%" y="229" width="0.0147%" height="15" fill="rgb(250,208,3)" fg:x="42648" fg:w="8"/><text x="78.8711%" y="239.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (79 samples, 0.15%)</title><rect x="78.4939%" y="261" width="0.1456%" height="15" fill="rgb(246,54,23)" fg:x="42579" fg:w="79"/><text x="78.7439%" y="271.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (73 samples, 0.13%)</title><rect x="78.5049%" y="245" width="0.1346%" height="15" fill="rgb(243,76,11)" fg:x="42585" fg:w="73"/><text x="78.7549%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (928 samples, 1.71%)</title><rect x="76.9398%" y="277" width="1.7108%" height="15" fill="rgb(245,21,50)" fg:x="41736" fg:w="928"/><text x="77.1898%" y="287.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (6 samples, 0.01%)</title><rect x="78.6395%" y="261" width="0.0111%" height="15" fill="rgb(228,9,43)" fg:x="42658" fg:w="6"/><text x="78.8895%" y="271.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (20 samples, 0.04%)</title><rect x="78.8958%" y="261" width="0.0369%" height="15" fill="rgb(208,100,47)" fg:x="42797" fg:w="20"/><text x="79.1458%" y="271.50"></text></g><g><title>pthread_mutex_lock (7 samples, 0.01%)</title><rect x="78.9197%" y="245" width="0.0129%" height="15" fill="rgb(232,26,8)" fg:x="42810" fg:w="7"/><text x="79.1697%" y="255.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (12 samples, 0.02%)</title><rect x="79.1059%" y="213" width="0.0221%" height="15" fill="rgb(216,166,38)" fg:x="42911" fg:w="12"/><text x="79.3559%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (29 samples, 0.05%)</title><rect x="79.0930%" y="245" width="0.0535%" height="15" fill="rgb(251,202,51)" fg:x="42904" fg:w="29"/><text x="79.3430%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::release (28 samples, 0.05%)</title><rect x="79.0948%" y="229" width="0.0516%" height="15" fill="rgb(254,216,34)" fg:x="42905" fg:w="28"/><text x="79.3448%" y="239.50"></text></g><g><title>pthread_mutex_lock (10 samples, 0.02%)</title><rect x="79.1280%" y="213" width="0.0184%" height="15" fill="rgb(251,32,27)" fg:x="42923" fg:w="10"/><text x="79.3780%" y="223.50"></text></g><g><title>_mi_page_free_collect (94 samples, 0.17%)</title><rect x="79.5576%" y="133" width="0.1733%" height="15" fill="rgb(208,127,28)" fg:x="43156" fg:w="94"/><text x="79.8076%" y="143.50"></text></g><g><title>_mi_heap_delayed_free (136 samples, 0.25%)</title><rect x="79.5023%" y="165" width="0.2507%" height="15" fill="rgb(224,137,22)" fg:x="43126" fg:w="136"/><text x="79.7523%" y="175.50"></text></g><g><title>_mi_free_delayed_block (109 samples, 0.20%)</title><rect x="79.5520%" y="149" width="0.2009%" height="15" fill="rgb(254,70,32)" fg:x="43153" fg:w="109"/><text x="79.8020%" y="159.50"></text></g><g><title>_mi_page_use_delayed_free (12 samples, 0.02%)</title><rect x="79.7309%" y="133" width="0.0221%" height="15" fill="rgb(229,75,37)" fg:x="43250" fg:w="12"/><text x="79.9809%" y="143.50"></text></g><g><title>_mi_malloc_generic (148 samples, 0.27%)</title><rect x="79.4838%" y="181" width="0.2728%" height="15" fill="rgb(252,64,23)" fg:x="43116" fg:w="148"/><text x="79.7338%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (15 samples, 0.03%)</title><rect x="79.7622%" y="181" width="0.0277%" height="15" fill="rgb(232,162,48)" fg:x="43267" fg:w="15"/><text x="80.0122%" y="191.50"></text></g><g><title>mi_malloc (8 samples, 0.01%)</title><rect x="79.7751%" y="165" width="0.0147%" height="15" fill="rgb(246,160,12)" fg:x="43274" fg:w="8"/><text x="80.0251%" y="175.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (186 samples, 0.34%)</title><rect x="79.4506%" y="213" width="0.3429%" height="15" fill="rgb(247,166,0)" fg:x="43098" fg:w="186"/><text x="79.7006%" y="223.50"></text></g><g><title>&lt;tonic::codec::encode::EncodeBody&lt;S&gt; as http_body::Body&gt;::poll_data (184 samples, 0.34%)</title><rect x="79.4543%" y="197" width="0.3392%" height="15" fill="rgb(249,219,21)" fg:x="43100" fg:w="184"/><text x="79.7043%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tonic::status::Status&gt; (6 samples, 0.01%)</title><rect x="79.8046%" y="181" width="0.0111%" height="15" fill="rgb(205,209,3)" fg:x="43290" fg:w="6"/><text x="80.0546%" y="191.50"></text></g><g><title>_mi_malloc_generic (11 samples, 0.02%)</title><rect x="79.8267%" y="149" width="0.0203%" height="15" fill="rgb(243,44,1)" fg:x="43302" fg:w="11"/><text x="80.0767%" y="159.50"></text></g><g><title>_mi_heap_delayed_free (10 samples, 0.02%)</title><rect x="79.8286%" y="133" width="0.0184%" height="15" fill="rgb(206,159,16)" fg:x="43303" fg:w="10"/><text x="80.0786%" y="143.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.01%)</title><rect x="79.8359%" y="117" width="0.0111%" height="15" fill="rgb(244,77,30)" fg:x="43307" fg:w="6"/><text x="80.0859%" y="127.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::with_capacity (33 samples, 0.06%)</title><rect x="79.8249%" y="165" width="0.0608%" height="15" fill="rgb(218,69,12)" fg:x="43301" fg:w="33"/><text x="80.0749%" y="175.50"></text></g><g><title>mi_malloc (21 samples, 0.04%)</title><rect x="79.8470%" y="149" width="0.0387%" height="15" fill="rgb(212,87,7)" fg:x="43313" fg:w="21"/><text x="80.0970%" y="159.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::iter::traits::collect::Extend&lt;(core::option::Option&lt;http::header::name::HeaderName&gt;,T)&gt;&gt;::extend (12 samples, 0.02%)</title><rect x="79.9023%" y="149" width="0.0221%" height="15" fill="rgb(245,114,25)" fg:x="43343" fg:w="12"/><text x="80.1523%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::IntoIter&lt;http::header::value::HeaderValue&gt;&gt; (7 samples, 0.01%)</title><rect x="79.9115%" y="133" width="0.0129%" height="15" fill="rgb(210,61,42)" fg:x="43348" fg:w="7"/><text x="80.1615%" y="143.50"></text></g><g><title>&lt;http::header::name::HeaderName as core::convert::From&lt;http::header::name::HdrName&gt;&gt;::from (7 samples, 0.01%)</title><rect x="79.9281%" y="133" width="0.0129%" height="15" fill="rgb(211,52,33)" fg:x="43357" fg:w="7"/><text x="80.1781%" y="143.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (11 samples, 0.02%)</title><rect x="79.9244%" y="149" width="0.0203%" height="15" fill="rgb(234,58,33)" fg:x="43355" fg:w="11"/><text x="80.1744%" y="159.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_trailers (95 samples, 0.18%)</title><rect x="79.7935%" y="213" width="0.1751%" height="15" fill="rgb(220,115,36)" fg:x="43284" fg:w="95"/><text x="80.0435%" y="223.50"></text></g><g><title>&lt;tonic::codec::encode::EncodeBody&lt;S&gt; as http_body::Body&gt;::poll_trailers (92 samples, 0.17%)</title><rect x="79.7991%" y="197" width="0.1696%" height="15" fill="rgb(243,153,54)" fg:x="43287" fg:w="92"/><text x="80.0491%" y="207.50"></text></g><g><title>tonic::status::Status::to_header_map (83 samples, 0.15%)</title><rect x="79.8157%" y="181" width="0.1530%" height="15" fill="rgb(251,47,18)" fg:x="43296" fg:w="83"/><text x="80.0657%" y="191.50"></text></g><g><title>tonic::status::Status::add_header (45 samples, 0.08%)</title><rect x="79.8857%" y="165" width="0.0830%" height="15" fill="rgb(242,102,42)" fg:x="43334" fg:w="45"/><text x="80.1357%" y="175.50"></text></g><g><title>tonic::metadata::map::MetadataMap::into_sanitized_headers (13 samples, 0.02%)</title><rect x="79.9447%" y="149" width="0.0240%" height="15" fill="rgb(234,31,38)" fg:x="43366" fg:w="13"/><text x="80.1947%" y="159.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::remove (10 samples, 0.02%)</title><rect x="79.9502%" y="133" width="0.0184%" height="15" fill="rgb(221,117,51)" fg:x="43369" fg:w="10"/><text x="80.2002%" y="143.50"></text></g><g><title>&lt;&amp;str as http::header::map::as_header_name::Sealed&gt;::find (8 samples, 0.01%)</title><rect x="79.9539%" y="117" width="0.0147%" height="15" fill="rgb(212,20,18)" fg:x="43371" fg:w="8"/><text x="80.2039%" y="127.50"></text></g><g><title>http::header::name::parse_hdr (6 samples, 0.01%)</title><rect x="79.9576%" y="101" width="0.0111%" height="15" fill="rgb(245,133,36)" fg:x="43373" fg:w="6"/><text x="80.2076%" y="111.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.06%)</title><rect x="82.2730%" y="149" width="0.0627%" height="15" fill="rgb(212,6,19)" fg:x="44629" fg:w="34"/><text x="82.5230%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="82.3357%" y="149" width="0.0166%" height="15" fill="rgb(218,1,36)" fg:x="44663" fg:w="9"/><text x="82.5857%" y="159.50"></text></g><g><title>_mi_free_block_mt (10 samples, 0.02%)</title><rect x="82.3523%" y="149" width="0.0184%" height="15" fill="rgb(246,84,54)" fg:x="44672" fg:w="10"/><text x="82.6023%" y="159.50"></text></g><g><title>_mi_page_free_collect (68 samples, 0.13%)</title><rect x="82.4260%" y="101" width="0.1254%" height="15" fill="rgb(242,110,6)" fg:x="44712" fg:w="68"/><text x="82.6760%" y="111.50"></text></g><g><title>_mi_heap_delayed_free (104 samples, 0.19%)</title><rect x="82.3873%" y="133" width="0.1917%" height="15" fill="rgb(214,47,5)" fg:x="44691" fg:w="104"/><text x="82.6373%" y="143.50"></text></g><g><title>_mi_free_delayed_block (84 samples, 0.15%)</title><rect x="82.4242%" y="117" width="0.1549%" height="15" fill="rgb(218,159,25)" fg:x="44711" fg:w="84"/><text x="82.6742%" y="127.50"></text></g><g><title>_mi_page_use_delayed_free (15 samples, 0.03%)</title><rect x="82.5514%" y="101" width="0.0277%" height="15" fill="rgb(215,211,28)" fg:x="44780" fg:w="15"/><text x="82.8014%" y="111.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (419 samples, 0.77%)</title><rect x="81.8103%" y="165" width="0.7724%" height="15" fill="rgb(238,59,32)" fg:x="44378" fg:w="419"/><text x="82.0603%" y="175.50"></text></g><g><title>_mi_malloc_generic (115 samples, 0.21%)</title><rect x="82.3707%" y="149" width="0.2120%" height="15" fill="rgb(226,82,3)" fg:x="44682" fg:w="115"/><text x="82.6207%" y="159.50"></text></g><g><title>h2::share::RecvStream::poll_trailers (12 samples, 0.02%)</title><rect x="82.5901%" y="133" width="0.0221%" height="15" fill="rgb(240,164,32)" fg:x="44801" fg:w="12"/><text x="82.8401%" y="143.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_trailers (16 samples, 0.03%)</title><rect x="82.5864%" y="149" width="0.0295%" height="15" fill="rgb(232,46,7)" fg:x="44799" fg:w="16"/><text x="82.8364%" y="159.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_trailers (19 samples, 0.04%)</title><rect x="82.5827%" y="165" width="0.0350%" height="15" fill="rgb(229,129,53)" fg:x="44797" fg:w="19"/><text x="82.8327%" y="175.50"></text></g><g><title>h2::share::FlowControl::release_capacity (22 samples, 0.04%)</title><rect x="82.6786%" y="101" width="0.0406%" height="15" fill="rgb(234,188,29)" fg:x="44849" fg:w="22"/><text x="82.9286%" y="111.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (47 samples, 0.09%)</title><rect x="82.6399%" y="149" width="0.0866%" height="15" fill="rgb(246,141,4)" fg:x="44828" fg:w="47"/><text x="82.8899%" y="159.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (42 samples, 0.08%)</title><rect x="82.6491%" y="133" width="0.0774%" height="15" fill="rgb(229,23,39)" fg:x="44833" fg:w="42"/><text x="82.8991%" y="143.50"></text></g><g><title>hyper::body::body::Body::poll_inner (31 samples, 0.06%)</title><rect x="82.6694%" y="117" width="0.0571%" height="15" fill="rgb(206,12,3)" fg:x="44844" fg:w="31"/><text x="82.9194%" y="127.50"></text></g><g><title>_mi_page_free_collect (90 samples, 0.17%)</title><rect x="83.0768%" y="37" width="0.1659%" height="15" fill="rgb(252,226,20)" fg:x="45065" fg:w="90"/><text x="83.3268%" y="47.50"></text></g><g><title>_mi_heap_delayed_free (127 samples, 0.23%)</title><rect x="83.0307%" y="69" width="0.2341%" height="15" fill="rgb(216,123,35)" fg:x="45040" fg:w="127"/><text x="83.2807%" y="79.50"></text></g><g><title>_mi_free_delayed_block (106 samples, 0.20%)</title><rect x="83.0694%" y="53" width="0.1954%" height="15" fill="rgb(212,68,40)" fg:x="45061" fg:w="106"/><text x="83.3194%" y="63.50"></text></g><g><title>_mi_page_use_delayed_free (11 samples, 0.02%)</title><rect x="83.2445%" y="37" width="0.0203%" height="15" fill="rgb(254,125,32)" fg:x="45156" fg:w="11"/><text x="83.4945%" y="47.50"></text></g><g><title>_mi_malloc_generic (142 samples, 0.26%)</title><rect x="83.0141%" y="85" width="0.2618%" height="15" fill="rgb(253,97,22)" fg:x="45031" fg:w="142"/><text x="83.2641%" y="95.50"></text></g><g><title>_mi_heap_realloc_zero (155 samples, 0.29%)</title><rect x="82.9938%" y="101" width="0.2857%" height="15" fill="rgb(241,101,14)" fg:x="45020" fg:w="155"/><text x="83.2438%" y="111.50"></text></g><g><title>_mi_page_free_collect (15 samples, 0.03%)</title><rect x="83.2906%" y="53" width="0.0277%" height="15" fill="rgb(238,103,29)" fg:x="45181" fg:w="15"/><text x="83.5406%" y="63.50"></text></g><g><title>_mi_heap_delayed_free (25 samples, 0.05%)</title><rect x="83.2814%" y="85" width="0.0461%" height="15" fill="rgb(233,195,47)" fg:x="45176" fg:w="25"/><text x="83.5314%" y="95.50"></text></g><g><title>_mi_free_delayed_block (21 samples, 0.04%)</title><rect x="83.2888%" y="69" width="0.0387%" height="15" fill="rgb(246,218,30)" fg:x="45180" fg:w="21"/><text x="83.5388%" y="79.50"></text></g><g><title>_mi_malloc_generic (27 samples, 0.05%)</title><rect x="83.2796%" y="101" width="0.0498%" height="15" fill="rgb(219,145,47)" fg:x="45175" fg:w="27"/><text x="83.5296%" y="111.50"></text></g><g><title>mi_malloc (144 samples, 0.27%)</title><rect x="83.3293%" y="101" width="0.2655%" height="15" fill="rgb(243,12,26)" fg:x="45202" fg:w="144"/><text x="83.5793%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (337 samples, 0.62%)</title><rect x="82.9754%" y="133" width="0.6213%" height="15" fill="rgb(214,87,16)" fg:x="45010" fg:w="337"/><text x="83.2254%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (331 samples, 0.61%)</title><rect x="82.9865%" y="117" width="0.6102%" height="15" fill="rgb(208,99,42)" fg:x="45016" fg:w="331"/><text x="83.2365%" y="127.50"></text></g><g><title>prost::encoding::decode_varint (269 samples, 0.50%)</title><rect x="83.5966%" y="133" width="0.4959%" height="15" fill="rgb(253,99,2)" fg:x="45347" fg:w="269"/><text x="83.8466%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (187 samples, 0.34%)</title><rect x="83.7478%" y="117" width="0.3447%" height="15" fill="rgb(220,168,23)" fg:x="45429" fg:w="187"/><text x="83.9978%" y="127.50"></text></g><g><title>prost::encoding::double::merge (14 samples, 0.03%)</title><rect x="84.0925%" y="133" width="0.0258%" height="15" fill="rgb(242,38,24)" fg:x="45616" fg:w="14"/><text x="84.3425%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (6 samples, 0.01%)</title><rect x="84.1073%" y="117" width="0.0111%" height="15" fill="rgb(225,182,9)" fg:x="45624" fg:w="6"/><text x="84.3573%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.01%)</title><rect x="85.2115%" y="69" width="0.0147%" height="15" fill="rgb(243,178,37)" fg:x="46223" fg:w="8"/><text x="85.4615%" y="79.50"></text></g><g><title>_mi_heap_realloc_zero (125 samples, 0.23%)</title><rect x="85.0014%" y="85" width="0.2304%" height="15" fill="rgb(232,139,19)" fg:x="46109" fg:w="125"/><text x="85.2514%" y="95.50"></text></g><g><title>_mi_heap_delayed_free (8 samples, 0.01%)</title><rect x="85.2410%" y="69" width="0.0147%" height="15" fill="rgb(225,201,24)" fg:x="46239" fg:w="8"/><text x="85.4910%" y="79.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.03%)</title><rect x="85.2318%" y="85" width="0.0258%" height="15" fill="rgb(221,47,46)" fg:x="46234" fg:w="14"/><text x="85.4818%" y="95.50"></text></g><g><title>mi_malloc (82 samples, 0.15%)</title><rect x="85.2576%" y="85" width="0.1512%" height="15" fill="rgb(249,23,13)" fg:x="46248" fg:w="82"/><text x="85.5076%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (246 samples, 0.45%)</title><rect x="84.9645%" y="117" width="0.4535%" height="15" fill="rgb(219,9,5)" fg:x="46089" fg:w="246"/><text x="85.2145%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (233 samples, 0.43%)</title><rect x="84.9885%" y="101" width="0.4295%" height="15" fill="rgb(254,171,16)" fg:x="46102" fg:w="233"/><text x="85.2385%" y="111.50"></text></g><g><title>prost::encoding::decode_varint (524 samples, 0.97%)</title><rect x="85.4180%" y="117" width="0.9660%" height="15" fill="rgb(230,171,20)" fg:x="46335" fg:w="524"/><text x="85.6680%" y="127.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (202 samples, 0.37%)</title><rect x="86.0116%" y="101" width="0.3724%" height="15" fill="rgb(210,71,41)" fg:x="46657" fg:w="202"/><text x="86.2616%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (40 samples, 0.07%)</title><rect x="86.9776%" y="101" width="0.0737%" height="15" fill="rgb(206,173,20)" fg:x="47181" fg:w="40"/><text x="87.2276%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 0.06%)</title><rect x="87.0513%" y="101" width="0.0571%" height="15" fill="rgb(233,88,34)" fg:x="47221" fg:w="31"/><text x="87.3013%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.01%)</title><rect x="87.0974%" y="85" width="0.0111%" height="15" fill="rgb(223,209,46)" fg:x="47246" fg:w="6"/><text x="87.3474%" y="95.50"></text></g><g><title>bytes::bytes::promotable_even_drop (22 samples, 0.04%)</title><rect x="87.1085%" y="101" width="0.0406%" height="15" fill="rgb(250,43,18)" fg:x="47252" fg:w="22"/><text x="87.3585%" y="111.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (58 samples, 0.11%)</title><rect x="87.1490%" y="101" width="0.1069%" height="15" fill="rgb(208,13,10)" fg:x="47274" fg:w="58"/><text x="87.3990%" y="111.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (21 samples, 0.04%)</title><rect x="87.2560%" y="101" width="0.0387%" height="15" fill="rgb(212,200,36)" fg:x="47332" fg:w="21"/><text x="87.5060%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (193 samples, 0.36%)</title><rect x="87.2947%" y="101" width="0.3558%" height="15" fill="rgb(225,90,30)" fg:x="47353" fg:w="193"/><text x="87.5447%" y="111.50"></text></g><g><title>mi_free (79 samples, 0.15%)</title><rect x="87.6505%" y="101" width="0.1456%" height="15" fill="rgb(236,182,39)" fg:x="47546" fg:w="79"/><text x="87.9005%" y="111.50"></text></g><g><title>mi_malloc (660 samples, 1.22%)</title><rect x="87.7961%" y="101" width="1.2167%" height="15" fill="rgb(212,144,35)" fg:x="47625" fg:w="660"/><text x="88.0461%" y="111.50"></text></g><g><title>prost::encoding::decode_varint (24 samples, 0.04%)</title><rect x="89.0128%" y="101" width="0.0442%" height="15" fill="rgb(228,63,44)" fg:x="48285" fg:w="24"/><text x="89.2628%" y="111.50"></text></g><g><title>&lt;tonic::codec::prost::ProstDecoder&lt;U&gt; as tonic::codec::Decoder&gt;::decode (3,435 samples, 6.33%)</title><rect x="82.7265%" y="149" width="6.3324%" height="15" fill="rgb(228,109,6)" fg:x="44875" fg:w="3435"/><text x="82.9765%" y="159.50">&lt;tonic::..</text></g><g><title>prost::encoding::message::merge_repeated (2,680 samples, 4.94%)</title><rect x="84.1184%" y="133" width="4.9405%" height="15" fill="rgb(238,117,24)" fg:x="45630" fg:w="2680"/><text x="84.3684%" y="143.50">prost:..</text></g><g><title>prost::encoding::string::merge (1,451 samples, 2.67%)</title><rect x="86.3840%" y="117" width="2.6749%" height="15" fill="rgb(242,26,26)" fg:x="46859" fg:w="1451"/><text x="86.6340%" y="127.50">pr..</text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.06%)</title><rect x="89.0589%" y="149" width="0.0608%" height="15" fill="rgb(221,92,48)" fg:x="48310" fg:w="33"/><text x="89.3089%" y="159.50"></text></g><g><title>&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,549 samples, 6.54%)</title><rect x="82.6178%" y="165" width="6.5425%" height="15" fill="rgb(209,209,32)" fg:x="44816" fg:w="3549"/><text x="82.8678%" y="175.50">&lt;tonic::c..</text></g><g><title>bytes::bytes_mut::shared_v_drop (21 samples, 0.04%)</title><rect x="89.1216%" y="149" width="0.0387%" height="15" fill="rgb(221,70,22)" fg:x="48344" fg:w="21"/><text x="89.3716%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="89.1603%" y="165" width="0.0240%" height="15" fill="rgb(248,145,5)" fg:x="48365" fg:w="13"/><text x="89.4103%" y="175.50"></text></g><g><title>_mi_free_block_mt (8 samples, 0.01%)</title><rect x="89.1843%" y="165" width="0.0147%" height="15" fill="rgb(226,116,26)" fg:x="48378" fg:w="8"/><text x="89.4343%" y="175.50"></text></g><g><title>_mi_page_free_collect (20 samples, 0.04%)</title><rect x="89.2211%" y="117" width="0.0369%" height="15" fill="rgb(244,5,17)" fg:x="48398" fg:w="20"/><text x="89.4711%" y="127.50"></text></g><g><title>_mi_heap_delayed_free (32 samples, 0.06%)</title><rect x="89.2082%" y="149" width="0.0590%" height="15" fill="rgb(252,159,33)" fg:x="48391" fg:w="32"/><text x="89.4582%" y="159.50"></text></g><g><title>_mi_free_delayed_block (26 samples, 0.05%)</title><rect x="89.2193%" y="133" width="0.0479%" height="15" fill="rgb(206,71,0)" fg:x="48397" fg:w="26"/><text x="89.4693%" y="143.50"></text></g><g><title>_mi_malloc_generic (50 samples, 0.09%)</title><rect x="89.1990%" y="165" width="0.0922%" height="15" fill="rgb(233,118,54)" fg:x="48386" fg:w="50"/><text x="89.4490%" y="175.50"></text></g><g><title>mi_thread_init (9 samples, 0.02%)</title><rect x="89.2746%" y="149" width="0.0166%" height="15" fill="rgb(234,83,48)" fg:x="48427" fg:w="9"/><text x="89.5246%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (6 samples, 0.01%)</title><rect x="89.3004%" y="165" width="0.0111%" height="15" fill="rgb(228,3,54)" fg:x="48441" fg:w="6"/><text x="89.5504%" y="175.50"></text></g><g><title>&lt;h2::proto::streams::streams::OpaqueStreamRef as core::ops::drop::Drop&gt;::drop (14 samples, 0.03%)</title><rect x="89.3280%" y="133" width="0.0258%" height="15" fill="rgb(226,155,13)" fg:x="48456" fg:w="14"/><text x="89.5780%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (23 samples, 0.04%)</title><rect x="89.3244%" y="149" width="0.0424%" height="15" fill="rgb(241,28,37)" fg:x="48454" fg:w="23"/><text x="89.5744%" y="159.50"></text></g><g><title>&lt;h2::share::RecvStream as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="89.3539%" y="133" width="0.0129%" height="15" fill="rgb(233,93,10)" fg:x="48470" fg:w="7"/><text x="89.6039%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tonic::codec::decode::Streaming&lt;proto::prometheus::WriteRequest&gt;&gt; (33 samples, 0.06%)</title><rect x="89.3115%" y="165" width="0.0608%" height="15" fill="rgb(225,113,19)" fg:x="48447" fg:w="33"/><text x="89.5615%" y="175.50"></text></g><g><title>mi_free_generic (10 samples, 0.02%)</title><rect x="89.3741%" y="165" width="0.0184%" height="15" fill="rgb(241,2,18)" fg:x="48481" fg:w="10"/><text x="89.6241%" y="175.50"></text></g><g><title>mi_malloc (14 samples, 0.03%)</title><rect x="89.3926%" y="165" width="0.0258%" height="15" fill="rgb(228,207,21)" fg:x="48491" fg:w="14"/><text x="89.6426%" y="175.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,583 samples, 8.45%)</title><rect x="80.9734%" y="181" width="8.4487%" height="15" fill="rgb(213,211,35)" fg:x="43924" fg:w="4583"/><text x="81.2234%" y="191.50">&lt;core::futur..</text></g><g><title>_mi_free_block_mt (17 samples, 0.03%)</title><rect x="89.4221%" y="181" width="0.0313%" height="15" fill="rgb(209,83,10)" fg:x="48507" fg:w="17"/><text x="89.6721%" y="191.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (4,775 samples, 8.80%)</title><rect x="80.6655%" y="197" width="8.8027%" height="15" fill="rgb(209,164,1)" fg:x="43757" fg:w="4775"/><text x="80.9155%" y="207.50">&lt;tonic::tran..</text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (5,159 samples, 9.51%)</title><rect x="79.9742%" y="213" width="9.5106%" height="15" fill="rgb(213,184,43)" fg:x="43382" fg:w="5159"/><text x="80.2242%" y="223.50">&lt;tonic::transp..</text></g><g><title>mi_malloc (8 samples, 0.01%)</title><rect x="89.4700%" y="197" width="0.0147%" height="15" fill="rgb(231,61,34)" fg:x="48533" fg:w="8"/><text x="89.7200%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (38 samples, 0.07%)</title><rect x="89.4847%" y="213" width="0.0701%" height="15" fill="rgb(235,75,3)" fg:x="48541" fg:w="38"/><text x="89.7347%" y="223.50"></text></g><g><title>_mi_free_block_mt (8 samples, 0.01%)</title><rect x="89.5566%" y="197" width="0.0147%" height="15" fill="rgb(220,106,47)" fg:x="48580" fg:w="8"/><text x="89.8066%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h2::server::H2StreamState&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;+core::marker::Send&gt;&gt;,http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;&gt; (15 samples, 0.03%)</title><rect x="89.5548%" y="213" width="0.0277%" height="15" fill="rgb(210,196,33)" fg:x="48579" fg:w="15"/><text x="89.8048%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (23 samples, 0.04%)</title><rect x="90.1521%" y="181" width="0.0424%" height="15" fill="rgb(229,154,42)" fg:x="48903" fg:w="23"/><text x="90.4021%" y="191.50"></text></g><g><title>h2::proto::streams::send::Send::poll_reset (77 samples, 0.14%)</title><rect x="90.0857%" y="197" width="0.1419%" height="15" fill="rgb(228,114,26)" fg:x="48867" fg:w="77"/><text x="90.3357%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (18 samples, 0.03%)</title><rect x="90.1945%" y="181" width="0.0332%" height="15" fill="rgb(208,144,1)" fg:x="48926" fg:w="18"/><text x="90.4445%" y="191.50"></text></g><g><title>h2::proto::streams::streams::StreamRef&lt;B&gt;::poll_reset (762 samples, 1.40%)</title><rect x="89.5861%" y="213" width="1.4047%" height="15" fill="rgb(239,112,37)" fg:x="48596" fg:w="762"/><text x="89.8361%" y="223.50"></text></g><g><title>pthread_mutex_lock (414 samples, 0.76%)</title><rect x="90.2277%" y="197" width="0.7632%" height="15" fill="rgb(210,96,50)" fg:x="48944" fg:w="414"/><text x="90.4777%" y="207.50"></text></g><g><title>__lll_lock_wait (180 samples, 0.33%)</title><rect x="90.6590%" y="181" width="0.3318%" height="15" fill="rgb(222,178,2)" fg:x="49178" fg:w="180"/><text x="90.9090%" y="191.50"></text></g><g><title>&lt;h2::proto::streams::streams::OpaqueStreamRef as core::clone::Clone&gt;::clone (19 samples, 0.04%)</title><rect x="91.0683%" y="197" width="0.0350%" height="15" fill="rgb(226,74,18)" fg:x="49400" fg:w="19"/><text x="91.3183%" y="207.50"></text></g><g><title>h2::proto::streams::store::Queue&lt;N&gt;::push (15 samples, 0.03%)</title><rect x="91.1826%" y="149" width="0.0277%" height="15" fill="rgb(225,67,54)" fg:x="49462" fg:w="15"/><text x="91.4326%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (24 samples, 0.04%)</title><rect x="91.2195%" y="133" width="0.0442%" height="15" fill="rgb(251,92,32)" fg:x="49482" fg:w="24"/><text x="91.4695%" y="143.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::schedule_send (56 samples, 0.10%)</title><rect x="91.1660%" y="165" width="0.1032%" height="15" fill="rgb(228,149,22)" fg:x="49453" fg:w="56"/><text x="91.4160%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (32 samples, 0.06%)</title><rect x="91.2102%" y="149" width="0.0590%" height="15" fill="rgb(243,54,13)" fg:x="49477" fg:w="32"/><text x="91.4602%" y="159.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::queue_frame (91 samples, 0.17%)</title><rect x="91.1439%" y="181" width="0.1678%" height="15" fill="rgb(243,180,28)" fg:x="49441" fg:w="91"/><text x="91.3939%" y="191.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (23 samples, 0.04%)</title><rect x="91.2692%" y="165" width="0.0424%" height="15" fill="rgb(208,167,24)" fg:x="49509" fg:w="23"/><text x="91.5192%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::contains_key (23 samples, 0.04%)</title><rect x="91.3319%" y="165" width="0.0424%" height="15" fill="rgb(245,73,45)" fg:x="49543" fg:w="23"/><text x="91.5819%" y="175.50"></text></g><g><title>http::header::name::parse_hdr (6 samples, 0.01%)</title><rect x="91.3633%" y="149" width="0.0111%" height="15" fill="rgb(237,203,48)" fg:x="49560" fg:w="6"/><text x="91.6133%" y="159.50"></text></g><g><title>h2::proto::streams::send::Send::check_headers (39 samples, 0.07%)</title><rect x="91.3116%" y="181" width="0.0719%" height="15" fill="rgb(211,197,16)" fg:x="49532" fg:w="39"/><text x="91.5616%" y="191.50"></text></g><g><title>h2::proto::streams::send::Send::send_headers (152 samples, 0.28%)</title><rect x="91.1199%" y="197" width="0.2802%" height="15" fill="rgb(243,99,51)" fg:x="49428" fg:w="152"/><text x="91.3699%" y="207.50"></text></g><g><title>h2::proto::streams::state::State::send_open (9 samples, 0.02%)</title><rect x="91.3835%" y="181" width="0.0166%" height="15" fill="rgb(215,123,29)" fg:x="49571" fg:w="9"/><text x="91.6335%" y="191.50"></text></g><g><title>pthread_mutex_lock (31 samples, 0.06%)</title><rect x="91.4001%" y="197" width="0.0571%" height="15" fill="rgb(239,186,37)" fg:x="49580" fg:w="31"/><text x="91.6501%" y="207.50"></text></g><g><title>__lll_lock_wait (6 samples, 0.01%)</title><rect x="91.4462%" y="181" width="0.0111%" height="15" fill="rgb(252,136,39)" fg:x="49605" fg:w="6"/><text x="91.6962%" y="191.50"></text></g><g><title>h2::server::SendResponse&lt;B&gt;::send_response (254 samples, 0.47%)</title><rect x="90.9909%" y="213" width="0.4682%" height="15" fill="rgb(223,213,32)" fg:x="49358" fg:w="254"/><text x="91.2409%" y="223.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (10 samples, 0.02%)</title><rect x="91.4665%" y="197" width="0.0184%" height="15" fill="rgb(233,115,5)" fg:x="49616" fg:w="10"/><text x="91.7165%" y="207.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::assign_connection_capacity (10 samples, 0.02%)</title><rect x="91.5218%" y="181" width="0.0184%" height="15" fill="rgb(207,226,44)" fg:x="49646" fg:w="10"/><text x="91.7718%" y="191.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::reserve_capacity (60 samples, 0.11%)</title><rect x="91.4849%" y="197" width="0.1106%" height="15" fill="rgb(208,126,0)" fg:x="49626" fg:w="60"/><text x="91.7349%" y="207.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::try_assign_capacity (30 samples, 0.06%)</title><rect x="91.5402%" y="181" width="0.0553%" height="15" fill="rgb(244,66,21)" fg:x="49656" fg:w="30"/><text x="91.7902%" y="191.50"></text></g><g><title>h2::share::SendStream&lt;B&gt;::reserve_capacity (78 samples, 0.14%)</title><rect x="91.4591%" y="213" width="0.1438%" height="15" fill="rgb(222,97,12)" fg:x="49612" fg:w="78"/><text x="91.7091%" y="223.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::queue_frame (17 samples, 0.03%)</title><rect x="91.6545%" y="197" width="0.0313%" height="15" fill="rgb(219,213,19)" fg:x="49718" fg:w="17"/><text x="91.9045%" y="207.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (14 samples, 0.03%)</title><rect x="91.6601%" y="181" width="0.0258%" height="15" fill="rgb(252,169,30)" fg:x="49721" fg:w="14"/><text x="91.9101%" y="191.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::try_assign_capacity (8 samples, 0.01%)</title><rect x="91.6859%" y="197" width="0.0147%" height="15" fill="rgb(206,32,51)" fg:x="49735" fg:w="8"/><text x="91.9359%" y="207.50"></text></g><g><title>h2::share::SendStream&lt;B&gt;::send_data (55 samples, 0.10%)</title><rect x="91.6029%" y="213" width="0.1014%" height="15" fill="rgb(250,172,42)" fg:x="49690" fg:w="55"/><text x="91.8529%" y="223.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::queue_frame (14 samples, 0.03%)</title><rect x="91.7412%" y="197" width="0.0258%" height="15" fill="rgb(209,34,43)" fg:x="49765" fg:w="14"/><text x="91.9912%" y="207.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (10 samples, 0.02%)</title><rect x="91.7485%" y="181" width="0.0184%" height="15" fill="rgb(223,11,35)" fg:x="49769" fg:w="10"/><text x="91.9985%" y="191.50"></text></g><g><title>h2::proto::streams::state::State::send_close (6 samples, 0.01%)</title><rect x="91.7725%" y="197" width="0.0111%" height="15" fill="rgb(251,219,26)" fg:x="49782" fg:w="6"/><text x="92.0225%" y="207.50"></text></g><g><title>h2::share::SendStream&lt;B&gt;::send_trailers (47 samples, 0.09%)</title><rect x="91.7043%" y="213" width="0.0866%" height="15" fill="rgb(231,119,3)" fg:x="49745" fg:w="47"/><text x="91.9543%" y="223.50"></text></g><g><title>hyper::common::date::CachedDate::check (20 samples, 0.04%)</title><rect x="91.8094%" y="197" width="0.0369%" height="15" fill="rgb(216,97,11)" fg:x="49802" fg:w="20"/><text x="92.0594%" y="207.50"></text></g><g><title>__clock_gettime (16 samples, 0.03%)</title><rect x="91.8168%" y="181" width="0.0295%" height="15" fill="rgb(223,59,9)" fg:x="49806" fg:w="16"/><text x="92.0668%" y="191.50"></text></g><g><title>__vdso_clock_gettime (11 samples, 0.02%)</title><rect x="91.8260%" y="165" width="0.0203%" height="15" fill="rgb(233,93,31)" fg:x="49811" fg:w="11"/><text x="92.0760%" y="175.50"></text></g><g><title>hyper::common::date::update_and_header_value (38 samples, 0.07%)</title><rect x="91.7946%" y="213" width="0.0701%" height="15" fill="rgb(239,81,33)" fg:x="49794" fg:w="38"/><text x="92.0446%" y="223.50"></text></g><g><title>mi_malloc (10 samples, 0.02%)</title><rect x="91.8463%" y="197" width="0.0184%" height="15" fill="rgb(213,120,34)" fg:x="49822" fg:w="10"/><text x="92.0963%" y="207.50"></text></g><g><title>bytes::bytes::promotable_even_drop (7 samples, 0.01%)</title><rect x="91.9145%" y="181" width="0.0129%" height="15" fill="rgb(243,49,53)" fg:x="49859" fg:w="7"/><text x="92.1645%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;[http::header::name::HeaderName: 5]&gt; (9 samples, 0.02%)</title><rect x="91.9126%" y="197" width="0.0166%" height="15" fill="rgb(247,216,33)" fg:x="49858" fg:w="9"/><text x="92.1626%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::remove (8 samples, 0.01%)</title><rect x="91.9292%" y="197" width="0.0147%" height="15" fill="rgb(226,26,14)" fg:x="49867" fg:w="8"/><text x="92.1792%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (9 samples, 0.02%)</title><rect x="91.9440%" y="197" width="0.0166%" height="15" fill="rgb(215,49,53)" fg:x="49875" fg:w="9"/><text x="92.1940%" y="207.50"></text></g><g><title>hyper::proto::h2::strip_connection_headers (66 samples, 0.12%)</title><rect x="91.8647%" y="213" width="0.1217%" height="15" fill="rgb(245,162,40)" fg:x="49832" fg:w="66"/><text x="92.1147%" y="223.50"></text></g><g><title>http::header::name::HeaderName::from_lowercase (14 samples, 0.03%)</title><rect x="91.9605%" y="197" width="0.0258%" height="15" fill="rgb(229,68,17)" fg:x="49884" fg:w="14"/><text x="92.2105%" y="207.50"></text></g><g><title>mi_malloc (9 samples, 0.02%)</title><rect x="91.9698%" y="181" width="0.0166%" height="15" fill="rgb(213,182,10)" fg:x="49889" fg:w="9"/><text x="92.2198%" y="191.50"></text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (6,940 samples, 12.79%)</title><rect x="79.1981%" y="229" width="12.7938%" height="15" fill="rgb(245,125,30)" fg:x="42961" fg:w="6940"/><text x="79.4481%" y="239.50">&lt;hyper::proto::h2::..</text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (6 samples, 0.01%)</title><rect x="91.9919%" y="229" width="0.0111%" height="15" fill="rgb(232,202,2)" fg:x="49901" fg:w="6"/><text x="92.2419%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;h2::proto::streams::streams::StreamRef&lt;hyper::proto::h2::SendBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (13 samples, 0.02%)</title><rect x="92.0029%" y="213" width="0.0240%" height="15" fill="rgb(237,140,51)" fg:x="49907" fg:w="13"/><text x="92.2529%" y="223.50"></text></g><g><title>&lt;h2::proto::streams::streams::OpaqueStreamRef as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="92.0103%" y="197" width="0.0166%" height="15" fill="rgb(236,157,25)" fg:x="49911" fg:w="9"/><text x="92.2603%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body::combinators::map_err::MapErr&lt;tonic::transport::server::recover_error::MaybeEmptyBody&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,tonic::status::Status&gt;&gt;,&lt;tonic::status::Status as core::convert::Into&lt;alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;::into&gt;&gt; (6 samples, 0.01%)</title><rect x="92.0269%" y="213" width="0.0111%" height="15" fill="rgb(219,209,0)" fg:x="49920" fg:w="6"/><text x="92.2769%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h2::server::H2StreamState&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;+core::marker::Send&gt;&gt;,http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;&gt; (21 samples, 0.04%)</title><rect x="92.0029%" y="229" width="0.0387%" height="15" fill="rgb(240,116,54)" fg:x="49907" fg:w="21"/><text x="92.2529%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;hyper::proto::h2::server::H2Stream&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;+core::marker::Send&gt;&gt;,http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,alloc::boxed::Box&lt;dyn std::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;&gt;&gt;&gt; (18 samples, 0.03%)</title><rect x="92.0435%" y="229" width="0.0332%" height="15" fill="rgb(216,10,36)" fg:x="49929" fg:w="18"/><text x="92.2935%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;h2::proto::streams::streams::StreamRef&lt;hyper::proto::h2::SendBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (17 samples, 0.03%)</title><rect x="92.0453%" y="213" width="0.0313%" height="15" fill="rgb(222,72,44)" fg:x="49930" fg:w="17"/><text x="92.2953%" y="223.50"></text></g><g><title>&lt;h2::proto::streams::streams::OpaqueStreamRef as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="92.0472%" y="197" width="0.0295%" height="15" fill="rgb(232,159,9)" fg:x="49931" fg:w="16"/><text x="92.2972%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::poll (7,130 samples, 13.14%)</title><rect x="78.9363%" y="261" width="13.1441%" height="15" fill="rgb(210,39,32)" fg:x="42819" fg:w="7130"/><text x="79.1863%" y="271.50">tokio::runtime::task..</text></g><g><title>tokio::runtime::task::harness::poll_future (7,016 samples, 12.93%)</title><rect x="79.1465%" y="245" width="12.9339%" height="15" fill="rgb(216,194,45)" fg:x="42933" fg:w="7016"/><text x="79.3965%" y="255.50">tokio::runtime::tas..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (7,296 samples, 13.45%)</title><rect x="78.6506%" y="277" width="13.4501%" height="15" fill="rgb(218,18,35)" fg:x="42664" fg:w="7296"/><text x="78.9006%" y="287.50">tokio::runtime::thre..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (11 samples, 0.02%)</title><rect x="92.0804%" y="261" width="0.0203%" height="15" fill="rgb(207,83,51)" fg:x="49949" fg:w="11"/><text x="92.3304%" y="271.50"></text></g><g><title>__clone (13,576 samples, 25.03%)</title><rect x="67.5288%" y="389" width="25.0272%" height="15" fill="rgb(225,63,43)" fg:x="36631" fg:w="13576"/><text x="67.7788%" y="399.50">__clone</text></g><g><title>start_thread (13,576 samples, 25.03%)</title><rect x="67.5288%" y="373" width="25.0272%" height="15" fill="rgb(207,57,36)" fg:x="36631" fg:w="13576"/><text x="67.7788%" y="383.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (13,576 samples, 25.03%)</title><rect x="67.5288%" y="357" width="25.0272%" height="15" fill="rgb(216,99,33)" fg:x="36631" fg:w="13576"/><text x="67.7788%" y="367.50">std::sys::unix::thread::Thread::new::thr..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (13,576 samples, 25.03%)</title><rect x="67.5288%" y="341" width="25.0272%" height="15" fill="rgb(225,42,16)" fg:x="36631" fg:w="13576"/><text x="67.7788%" y="351.50">core::ops::function::FnOnce::call_once{{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,546 samples, 24.97%)</title><rect x="67.5841%" y="325" width="24.9719%" height="15" fill="rgb(220,201,45)" fg:x="36661" fg:w="13546"/><text x="67.8341%" y="335.50">std::sys_common::backtrace::__rust_begin..</text></g><g><title>tokio::runtime::task::raw::poll (13,505 samples, 24.90%)</title><rect x="67.6597%" y="309" width="24.8963%" height="15" fill="rgb(225,33,4)" fg:x="36702" fg:w="13505"/><text x="67.9097%" y="319.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::thread_pool::worker::run (13,505 samples, 24.90%)</title><rect x="67.6597%" y="293" width="24.8963%" height="15" fill="rgb(224,33,50)" fg:x="36702" fg:w="13505"/><text x="67.9097%" y="303.50">tokio::runtime::thread_pool::worker::run</text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (247 samples, 0.46%)</title><rect x="92.1007%" y="277" width="0.4553%" height="15" fill="rgb(246,198,51)" fg:x="49960" fg:w="247"/><text x="92.3507%" y="287.50"></text></g><g><title>pthread_mutex_lock (227 samples, 0.42%)</title><rect x="92.1375%" y="261" width="0.4185%" height="15" fill="rgb(205,22,4)" fg:x="49980" fg:w="227"/><text x="92.3875%" y="271.50"></text></g><g><title>__lll_lock_wait (210 samples, 0.39%)</title><rect x="92.1689%" y="245" width="0.3871%" height="15" fill="rgb(206,3,8)" fg:x="49997" fg:w="210"/><text x="92.4189%" y="255.50"></text></g><g><title>__rust_probestack (10 samples, 0.02%)</title><rect x="92.5671%" y="389" width="0.0184%" height="15" fill="rgb(251,23,15)" fg:x="50213" fg:w="10"/><text x="92.8171%" y="399.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (15 samples, 0.03%)</title><rect x="92.5855%" y="197" width="0.0277%" height="15" fill="rgb(252,88,28)" fg:x="50223" fg:w="15"/><text x="92.8355%" y="207.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (15 samples, 0.03%)</title><rect x="92.5855%" y="181" width="0.0277%" height="15" fill="rgb(212,127,14)" fg:x="50223" fg:w="15"/><text x="92.8355%" y="191.50"></text></g><g><title>hyper::body::body::Body::poll_inner (15 samples, 0.03%)</title><rect x="92.5855%" y="165" width="0.0277%" height="15" fill="rgb(247,145,37)" fg:x="50223" fg:w="15"/><text x="92.8355%" y="175.50"></text></g><g><title>h2::share::RecvStream::poll_data (15 samples, 0.03%)</title><rect x="92.5855%" y="149" width="0.0277%" height="15" fill="rgb(209,117,53)" fg:x="50223" fg:w="15"/><text x="92.8355%" y="159.50"></text></g><g><title>pthread_mutex_lock (14 samples, 0.03%)</title><rect x="92.5873%" y="133" width="0.0258%" height="15" fill="rgb(212,90,42)" fg:x="50224" fg:w="14"/><text x="92.8373%" y="143.50"></text></g><g><title>__lll_lock_wait (13 samples, 0.02%)</title><rect x="92.5892%" y="117" width="0.0240%" height="15" fill="rgb(218,164,37)" fg:x="50225" fg:w="13"/><text x="92.8392%" y="127.50"></text></g><g><title>_mi_page_free_collect (15 samples, 0.03%)</title><rect x="92.6131%" y="69" width="0.0277%" height="15" fill="rgb(246,65,34)" fg:x="50238" fg:w="15"/><text x="92.8631%" y="79.50"></text></g><g><title>_mi_heap_delayed_free (19 samples, 0.04%)</title><rect x="92.6131%" y="101" width="0.0350%" height="15" fill="rgb(231,100,33)" fg:x="50238" fg:w="19"/><text x="92.8631%" y="111.50"></text></g><g><title>_mi_free_delayed_block (19 samples, 0.04%)</title><rect x="92.6131%" y="85" width="0.0350%" height="15" fill="rgb(228,126,14)" fg:x="50238" fg:w="19"/><text x="92.8631%" y="95.50"></text></g><g><title>&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (45 samples, 0.08%)</title><rect x="92.5855%" y="213" width="0.0830%" height="15" fill="rgb(215,173,21)" fg:x="50223" fg:w="45"/><text x="92.8355%" y="223.50"></text></g><g><title>&lt;tonic::codec::prost::ProstDecoder&lt;U&gt; as tonic::codec::Decoder&gt;::decode (30 samples, 0.06%)</title><rect x="92.6131%" y="197" width="0.0553%" height="15" fill="rgb(210,6,40)" fg:x="50238" fg:w="30"/><text x="92.8631%" y="207.50"></text></g><g><title>prost::encoding::message::merge_repeated (30 samples, 0.06%)</title><rect x="92.6131%" y="181" width="0.0553%" height="15" fill="rgb(212,48,18)" fg:x="50238" fg:w="30"/><text x="92.8631%" y="191.50"></text></g><g><title>prost::encoding::string::merge (30 samples, 0.06%)</title><rect x="92.6131%" y="165" width="0.0553%" height="15" fill="rgb(230,214,11)" fg:x="50238" fg:w="30"/><text x="92.8631%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (30 samples, 0.06%)</title><rect x="92.6131%" y="149" width="0.0553%" height="15" fill="rgb(254,105,39)" fg:x="50238" fg:w="30"/><text x="92.8631%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.06%)</title><rect x="92.6131%" y="133" width="0.0553%" height="15" fill="rgb(245,158,5)" fg:x="50238" fg:w="30"/><text x="92.8631%" y="143.50"></text></g><g><title>_mi_malloc_generic (30 samples, 0.06%)</title><rect x="92.6131%" y="117" width="0.0553%" height="15" fill="rgb(249,208,11)" fg:x="50238" fg:w="30"/><text x="92.8631%" y="127.50"></text></g><g><title>mi_page_queue_find_free_ex (11 samples, 0.02%)</title><rect x="92.6482%" y="101" width="0.0203%" height="15" fill="rgb(210,39,28)" fg:x="50257" fg:w="11"/><text x="92.8982%" y="111.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (9 samples, 0.02%)</title><rect x="92.6519%" y="85" width="0.0166%" height="15" fill="rgb(211,56,53)" fg:x="50259" fg:w="9"/><text x="92.9019%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="92.6869%" y="197" width="0.0240%" height="15" fill="rgb(226,201,30)" fg:x="50278" fg:w="13"/><text x="92.9369%" y="207.50"></text></g><g><title>_mi_malloc_generic (12 samples, 0.02%)</title><rect x="92.7108%" y="197" width="0.0221%" height="15" fill="rgb(239,101,34)" fg:x="50291" fg:w="12"/><text x="92.9608%" y="207.50"></text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (90 samples, 0.17%)</title><rect x="92.5855%" y="277" width="0.1659%" height="15" fill="rgb(226,209,5)" fg:x="50223" fg:w="90"/><text x="92.8355%" y="287.50"></text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (90 samples, 0.17%)</title><rect x="92.5855%" y="261" width="0.1659%" height="15" fill="rgb(250,105,47)" fg:x="50223" fg:w="90"/><text x="92.8355%" y="271.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (90 samples, 0.17%)</title><rect x="92.5855%" y="245" width="0.1659%" height="15" fill="rgb(230,72,3)" fg:x="50223" fg:w="90"/><text x="92.8355%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (90 samples, 0.17%)</title><rect x="92.5855%" y="229" width="0.1659%" height="15" fill="rgb(232,218,39)" fg:x="50223" fg:w="90"/><text x="92.8355%" y="239.50"></text></g><g><title>tonic::server::grpc::Grpc&lt;T&gt;::map_response (45 samples, 0.08%)</title><rect x="92.6684%" y="213" width="0.0830%" height="15" fill="rgb(248,166,6)" fg:x="50268" fg:w="45"/><text x="92.9184%" y="223.50"></text></g><g><title>tonic::metadata::map::MetadataMap::into_sanitized_headers (7 samples, 0.01%)</title><rect x="92.7385%" y="197" width="0.0129%" height="15" fill="rgb(247,89,20)" fg:x="50306" fg:w="7"/><text x="92.9885%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (94 samples, 0.17%)</title><rect x="92.5855%" y="389" width="0.1733%" height="15" fill="rgb(248,130,54)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (94 samples, 0.17%)</title><rect x="92.5855%" y="373" width="0.1733%" height="15" fill="rgb(234,196,4)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="383.50"></text></g><g><title>tokio::runtime::task::raw::poll (94 samples, 0.17%)</title><rect x="92.5855%" y="357" width="0.1733%" height="15" fill="rgb(250,143,31)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (94 samples, 0.17%)</title><rect x="92.5855%" y="341" width="0.1733%" height="15" fill="rgb(211,110,34)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (94 samples, 0.17%)</title><rect x="92.5855%" y="325" width="0.1733%" height="15" fill="rgb(215,124,48)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="335.50"></text></g><g><title>tokio::runtime::task::raw::poll (94 samples, 0.17%)</title><rect x="92.5855%" y="309" width="0.1733%" height="15" fill="rgb(216,46,13)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (94 samples, 0.17%)</title><rect x="92.5855%" y="293" width="0.1733%" height="15" fill="rgb(205,184,25)" fg:x="50223" fg:w="94"/><text x="92.8355%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="92.7975%" y="325" width="0.0240%" height="15" fill="rgb(228,1,10)" fg:x="50338" fg:w="13"/><text x="93.0475%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (8 samples, 0.01%)</title><rect x="92.8399%" y="325" width="0.0147%" height="15" fill="rgb(213,116,27)" fg:x="50361" fg:w="8"/><text x="93.0899%" y="335.50"></text></g><g><title>http::request::Builder::uri (18 samples, 0.03%)</title><rect x="92.8546%" y="325" width="0.0332%" height="15" fill="rgb(241,95,50)" fg:x="50369" fg:w="18"/><text x="93.1046%" y="335.50"></text></g><g><title>http::uri::Uri::from_parts (6 samples, 0.01%)</title><rect x="92.8768%" y="309" width="0.0111%" height="15" fill="rgb(238,48,32)" fg:x="50381" fg:w="6"/><text x="93.1268%" y="319.50"></text></g><g><title>http::uri::authority::Authority::parse (18 samples, 0.03%)</title><rect x="92.8878%" y="325" width="0.0332%" height="15" fill="rgb(235,113,49)" fg:x="50387" fg:w="18"/><text x="93.1378%" y="335.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (96 samples, 0.18%)</title><rect x="92.7588%" y="389" width="0.1770%" height="15" fill="rgb(205,127,43)" fg:x="50317" fg:w="96"/><text x="93.0088%" y="399.50"></text></g><g><title>h2::proto::connection::DynConnection&lt;B&gt;::recv_frame (96 samples, 0.18%)</title><rect x="92.7588%" y="373" width="0.1770%" height="15" fill="rgb(250,162,2)" fg:x="50317" fg:w="96"/><text x="93.0088%" y="383.50"></text></g><g><title>h2::proto::streams::recv::Recv::recv_headers (96 samples, 0.18%)</title><rect x="92.7588%" y="357" width="0.1770%" height="15" fill="rgb(220,13,41)" fg:x="50317" fg:w="96"/><text x="93.0088%" y="367.50"></text></g><g><title>&lt;h2::server::Peer as h2::proto::peer::Peer&gt;::convert_poll_message (96 samples, 0.18%)</title><rect x="92.7588%" y="341" width="0.1770%" height="15" fill="rgb(249,221,25)" fg:x="50317" fg:w="96"/><text x="93.0088%" y="351.50"></text></g><g><title>http::uri::path::PathAndQuery::from_maybe_shared (8 samples, 0.01%)</title><rect x="92.9210%" y="325" width="0.0147%" height="15" fill="rgb(215,208,19)" fg:x="50405" fg:w="8"/><text x="93.1710%" y="335.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (7 samples, 0.01%)</title><rect x="92.9229%" y="309" width="0.0129%" height="15" fill="rgb(236,175,2)" fg:x="50406" fg:w="7"/><text x="93.1729%" y="319.50"></text></g><g><title>h2::proto::streams::recv::Recv::recv_data (19 samples, 0.04%)</title><rect x="92.9358%" y="341" width="0.0350%" height="15" fill="rgb(241,52,2)" fg:x="50413" fg:w="19"/><text x="93.1858%" y="351.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (16 samples, 0.03%)</title><rect x="92.9413%" y="325" width="0.0295%" height="15" fill="rgb(248,140,14)" fg:x="50416" fg:w="16"/><text x="93.1913%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.02%)</title><rect x="93.0371%" y="325" width="0.0203%" height="15" fill="rgb(253,22,42)" fg:x="50468" fg:w="11"/><text x="93.2871%" y="335.50"></text></g><g><title>h2::proto::streams::recv::Recv::recv_headers (73 samples, 0.13%)</title><rect x="92.9708%" y="341" width="0.1346%" height="15" fill="rgb(234,61,47)" fg:x="50432" fg:w="73"/><text x="93.2208%" y="351.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (26 samples, 0.05%)</title><rect x="93.0574%" y="325" width="0.0479%" height="15" fill="rgb(208,226,15)" fg:x="50479" fg:w="26"/><text x="93.3074%" y="335.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (96 samples, 0.18%)</title><rect x="92.9358%" y="389" width="0.1770%" height="15" fill="rgb(217,221,4)" fg:x="50413" fg:w="96"/><text x="93.1858%" y="399.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (96 samples, 0.18%)</title><rect x="92.9358%" y="373" width="0.1770%" height="15" fill="rgb(212,174,34)" fg:x="50413" fg:w="96"/><text x="93.1858%" y="383.50"></text></g><g><title>h2::proto::connection::DynConnection&lt;B&gt;::recv_frame (96 samples, 0.18%)</title><rect x="92.9358%" y="357" width="0.1770%" height="15" fill="rgb(253,83,4)" fg:x="50413" fg:w="96"/><text x="93.1858%" y="367.50"></text></g><g><title>_mi_page_free_collect (512 samples, 0.94%)</title><rect x="93.1127%" y="293" width="0.9439%" height="15" fill="rgb(250,195,49)" fg:x="50509" fg:w="512"/><text x="93.3627%" y="303.50"></text></g><g><title>_mi_heap_delayed_free (513 samples, 0.95%)</title><rect x="93.1127%" y="325" width="0.9457%" height="15" fill="rgb(241,192,25)" fg:x="50509" fg:w="513"/><text x="93.3627%" y="335.50"></text></g><g><title>_mi_free_delayed_block (513 samples, 0.95%)</title><rect x="93.1127%" y="309" width="0.9457%" height="15" fill="rgb(208,124,10)" fg:x="50509" fg:w="513"/><text x="93.3627%" y="319.50"></text></g><g><title>_mi_malloc_generic (518 samples, 0.95%)</title><rect x="93.1127%" y="341" width="0.9549%" height="15" fill="rgb(222,33,0)" fg:x="50509" fg:w="518"/><text x="93.3627%" y="351.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (536 samples, 0.99%)</title><rect x="93.1127%" y="373" width="0.9881%" height="15" fill="rgb(234,209,28)" fg:x="50509" fg:w="536"/><text x="93.3627%" y="383.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::GrpcTimeout&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (536 samples, 0.99%)</title><rect x="93.1127%" y="357" width="0.9881%" height="15" fill="rgb(224,11,23)" fg:x="50509" fg:w="536"/><text x="93.3627%" y="367.50"></text></g><g><title>tonic::transport::service::grpc_timeout::try_parse_grpc_timeout (18 samples, 0.03%)</title><rect x="94.0677%" y="341" width="0.0332%" height="15" fill="rgb(232,99,1)" fg:x="51027" fg:w="18"/><text x="94.3177%" y="351.50"></text></g><g><title>&lt;&amp;str as http::header::map::as_header_name::Sealed&gt;::find (18 samples, 0.03%)</title><rect x="94.0677%" y="325" width="0.0332%" height="15" fill="rgb(237,95,45)" fg:x="51027" fg:w="18"/><text x="94.3177%" y="335.50"></text></g><g><title>http::header::name::parse_hdr (13 samples, 0.02%)</title><rect x="94.0769%" y="309" width="0.0240%" height="15" fill="rgb(208,109,11)" fg:x="51032" fg:w="13"/><text x="94.3269%" y="319.50"></text></g><g><title>_mi_page_free_collect (48 samples, 0.09%)</title><rect x="94.2778%" y="245" width="0.0885%" height="15" fill="rgb(216,190,48)" fg:x="51141" fg:w="48"/><text x="94.5278%" y="255.50"></text></g><g><title>_mi_heap_delayed_free (54 samples, 0.10%)</title><rect x="94.2686%" y="277" width="0.0995%" height="15" fill="rgb(251,171,36)" fg:x="51136" fg:w="54"/><text x="94.5186%" y="287.50"></text></g><g><title>_mi_free_delayed_block (51 samples, 0.09%)</title><rect x="94.2741%" y="261" width="0.0940%" height="15" fill="rgb(230,62,22)" fg:x="51139" fg:w="51"/><text x="94.5241%" y="271.50"></text></g><g><title>_mi_malloc_generic (61 samples, 0.11%)</title><rect x="94.2686%" y="293" width="0.1125%" height="15" fill="rgb(225,114,35)" fg:x="51136" fg:w="61"/><text x="94.5186%" y="303.50"></text></g><g><title>http::header::name::StandardHeader::as_str (6 samples, 0.01%)</title><rect x="94.3866%" y="293" width="0.0111%" height="15" fill="rgb(215,118,42)" fg:x="51200" fg:w="6"/><text x="94.6366%" y="303.50"></text></g><g><title>h2::frame::headers::HeaderBlock::load::_{{closure}} (139 samples, 0.26%)</title><rect x="94.1783%" y="309" width="0.2562%" height="15" fill="rgb(243,119,21)" fg:x="51087" fg:w="139"/><text x="94.4283%" y="319.50"></text></g><g><title>mi_malloc (20 samples, 0.04%)</title><rect x="94.3976%" y="293" width="0.0369%" height="15" fill="rgb(252,177,53)" fg:x="51206" fg:w="20"/><text x="94.6476%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;h2::hpack::header::Header&gt; (8 samples, 0.01%)</title><rect x="94.4548%" y="293" width="0.0147%" height="15" fill="rgb(237,209,29)" fg:x="51237" fg:w="8"/><text x="94.7048%" y="303.50"></text></g><g><title>h2::hpack::decoder::Decoder::decode_string (52 samples, 0.10%)</title><rect x="94.4788%" y="293" width="0.0959%" height="15" fill="rgb(212,65,23)" fg:x="51250" fg:w="52"/><text x="94.7288%" y="303.50"></text></g><g><title>h2::hpack::decoder::Decoder::decode_literal (82 samples, 0.15%)</title><rect x="94.4345%" y="309" width="0.1512%" height="15" fill="rgb(230,222,46)" fg:x="51226" fg:w="82"/><text x="94.6845%" y="319.50"></text></g><g><title>bytes::bytes::shared_clone (35 samples, 0.06%)</title><rect x="94.6889%" y="277" width="0.0645%" height="15" fill="rgb(215,135,32)" fg:x="51364" fg:w="35"/><text x="94.9389%" y="287.50"></text></g><g><title>h2::hpack::decoder::Table::get (102 samples, 0.19%)</title><rect x="94.5857%" y="309" width="0.1880%" height="15" fill="rgb(246,101,22)" fg:x="51308" fg:w="102"/><text x="94.8357%" y="319.50"></text></g><g><title>&lt;h2::hpack::header::Header&lt;T&gt; as core::clone::Clone&gt;::clone (88 samples, 0.16%)</title><rect x="94.6115%" y="293" width="0.1622%" height="15" fill="rgb(206,107,13)" fg:x="51322" fg:w="88"/><text x="94.8615%" y="303.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (11 samples, 0.02%)</title><rect x="94.7534%" y="277" width="0.0203%" height="15" fill="rgb(250,100,44)" fg:x="51399" fg:w="11"/><text x="95.0034%" y="287.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (9 samples, 0.02%)</title><rect x="94.7829%" y="293" width="0.0166%" height="15" fill="rgb(231,147,38)" fg:x="51415" fg:w="9"/><text x="95.0329%" y="303.50"></text></g><g><title>h2::codec::framed_read::decode_frame (393 samples, 0.72%)</title><rect x="94.1008%" y="341" width="0.7245%" height="15" fill="rgb(229,8,40)" fg:x="51045" fg:w="393"/><text x="94.3508%" y="351.50"></text></g><g><title>h2::frame::headers::HeaderBlock::load (393 samples, 0.72%)</title><rect x="94.1008%" y="325" width="0.7245%" height="15" fill="rgb(221,135,30)" fg:x="51045" fg:w="393"/><text x="94.3508%" y="335.50"></text></g><g><title>h2::hpack::decoder::take (28 samples, 0.05%)</title><rect x="94.7737%" y="309" width="0.0516%" height="15" fill="rgb(249,193,18)" fg:x="51410" fg:w="28"/><text x="95.0237%" y="319.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (14 samples, 0.03%)</title><rect x="94.7995%" y="293" width="0.0258%" height="15" fill="rgb(209,133,39)" fg:x="51424" fg:w="14"/><text x="95.0495%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="94.9654%" y="325" width="0.0240%" height="15" fill="rgb(232,100,14)" fg:x="51514" fg:w="13"/><text x="95.2154%" y="335.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (12 samples, 0.02%)</title><rect x="94.9894%" y="325" width="0.0221%" height="15" fill="rgb(224,185,1)" fg:x="51527" fg:w="12"/><text x="95.2394%" y="335.50"></text></g><g><title>h2::proto::streams::recv::Recv::recv_data (42 samples, 0.08%)</title><rect x="95.0281%" y="325" width="0.0774%" height="15" fill="rgb(223,139,8)" fg:x="51548" fg:w="42"/><text x="95.2781%" y="335.50"></text></g><g><title>h2::proto::streams::state::State::recv_close (12 samples, 0.02%)</title><rect x="95.0834%" y="309" width="0.0221%" height="15" fill="rgb(232,213,38)" fg:x="51578" fg:w="12"/><text x="95.3334%" y="319.50"></text></g><g><title>h2::proto::streams::store::Store::find_entry (24 samples, 0.04%)</title><rect x="95.1055%" y="325" width="0.0442%" height="15" fill="rgb(207,94,22)" fg:x="51590" fg:w="24"/><text x="95.3555%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (6 samples, 0.01%)</title><rect x="95.1387%" y="309" width="0.0111%" height="15" fill="rgb(219,183,54)" fg:x="51608" fg:w="6"/><text x="95.3887%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (14 samples, 0.03%)</title><rect x="95.1535%" y="309" width="0.0258%" height="15" fill="rgb(216,185,54)" fg:x="51616" fg:w="14"/><text x="95.4035%" y="319.50"></text></g><g><title>h2::proto::streams::store::VacantEntry::insert (34 samples, 0.06%)</title><rect x="95.1498%" y="325" width="0.0627%" height="15" fill="rgb(254,217,39)" fg:x="51614" fg:w="34"/><text x="95.3998%" y="335.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (18 samples, 0.03%)</title><rect x="95.1793%" y="309" width="0.0332%" height="15" fill="rgb(240,178,23)" fg:x="51630" fg:w="18"/><text x="95.4293%" y="319.50"></text></g><g><title>pthread_mutex_lock (24 samples, 0.04%)</title><rect x="95.2272%" y="325" width="0.0442%" height="15" fill="rgb(218,11,47)" fg:x="51656" fg:w="24"/><text x="95.4772%" y="335.50"></text></g><g><title>__lll_lock_wait (12 samples, 0.02%)</title><rect x="95.2493%" y="309" width="0.0221%" height="15" fill="rgb(218,51,51)" fg:x="51668" fg:w="12"/><text x="95.4993%" y="319.50"></text></g><g><title>hyper::proto::h2::server::Serving&lt;T,B&gt;::poll_server (1,175 samples, 2.17%)</title><rect x="93.1127%" y="389" width="2.1661%" height="15" fill="rgb(238,126,27)" fg:x="50509" fg:w="1175"/><text x="93.3627%" y="399.50">h..</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (639 samples, 1.18%)</title><rect x="94.1008%" y="373" width="1.1780%" height="15" fill="rgb(249,202,22)" fg:x="51045" fg:w="639"/><text x="94.3508%" y="383.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (639 samples, 1.18%)</title><rect x="94.1008%" y="357" width="1.1780%" height="15" fill="rgb(254,195,49)" fg:x="51045" fg:w="639"/><text x="94.3508%" y="367.50"></text></g><g><title>h2::proto::connection::DynConnection&lt;B&gt;::recv_frame (246 samples, 0.45%)</title><rect x="94.8253%" y="341" width="0.4535%" height="15" fill="rgb(208,123,14)" fg:x="51438" fg:w="246"/><text x="95.0753%" y="351.50"></text></g><g><title>pthread_mutex_lock (12 samples, 0.02%)</title><rect x="95.3046%" y="101" width="0.0221%" height="15" fill="rgb(224,200,8)" fg:x="51698" fg:w="12"/><text x="95.5546%" y="111.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (27 samples, 0.05%)</title><rect x="95.2788%" y="165" width="0.0498%" height="15" fill="rgb(217,61,36)" fg:x="51684" fg:w="27"/><text x="95.5288%" y="175.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (27 samples, 0.05%)</title><rect x="95.2788%" y="149" width="0.0498%" height="15" fill="rgb(206,35,45)" fg:x="51684" fg:w="27"/><text x="95.5288%" y="159.50"></text></g><g><title>hyper::body::body::Body::poll_inner (27 samples, 0.05%)</title><rect x="95.2788%" y="133" width="0.0498%" height="15" fill="rgb(217,65,33)" fg:x="51684" fg:w="27"/><text x="95.5288%" y="143.50"></text></g><g><title>h2::share::RecvStream::poll_data (23 samples, 0.04%)</title><rect x="95.2862%" y="117" width="0.0424%" height="15" fill="rgb(222,158,48)" fg:x="51688" fg:w="23"/><text x="95.5362%" y="127.50"></text></g><g><title>_mi_heap_delayed_free (18 samples, 0.03%)</title><rect x="95.3341%" y="69" width="0.0332%" height="15" fill="rgb(254,2,54)" fg:x="51714" fg:w="18"/><text x="95.5841%" y="79.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.01%)</title><rect x="95.3563%" y="53" width="0.0111%" height="15" fill="rgb(250,143,38)" fg:x="51726" fg:w="6"/><text x="95.6063%" y="63.50"></text></g><g><title>_mi_heap_realloc_zero (24 samples, 0.04%)</title><rect x="95.3286%" y="101" width="0.0442%" height="15" fill="rgb(248,25,0)" fg:x="51711" fg:w="24"/><text x="95.5786%" y="111.50"></text></g><g><title>_mi_malloc_generic (24 samples, 0.04%)</title><rect x="95.3286%" y="85" width="0.0442%" height="15" fill="rgb(206,152,27)" fg:x="51711" fg:w="24"/><text x="95.5786%" y="95.50"></text></g><g><title>_mi_page_free_collect (30 samples, 0.06%)</title><rect x="95.3728%" y="53" width="0.0553%" height="15" fill="rgb(240,77,30)" fg:x="51735" fg:w="30"/><text x="95.6228%" y="63.50"></text></g><g><title>_mi_heap_delayed_free (35 samples, 0.06%)</title><rect x="95.3728%" y="85" width="0.0645%" height="15" fill="rgb(231,5,3)" fg:x="51735" fg:w="35"/><text x="95.6228%" y="95.50"></text></g><g><title>_mi_free_delayed_block (35 samples, 0.06%)</title><rect x="95.3728%" y="69" width="0.0645%" height="15" fill="rgb(207,226,32)" fg:x="51735" fg:w="35"/><text x="95.6228%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (63 samples, 0.12%)</title><rect x="95.3286%" y="133" width="0.1161%" height="15" fill="rgb(222,207,47)" fg:x="51711" fg:w="63"/><text x="95.5786%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (63 samples, 0.12%)</title><rect x="95.3286%" y="117" width="0.1161%" height="15" fill="rgb(229,115,45)" fg:x="51711" fg:w="63"/><text x="95.5786%" y="127.50"></text></g><g><title>_mi_malloc_generic (39 samples, 0.07%)</title><rect x="95.3728%" y="101" width="0.0719%" height="15" fill="rgb(224,191,6)" fg:x="51735" fg:w="39"/><text x="95.6228%" y="111.50"></text></g><g><title>_mi_heap_delayed_free (14 samples, 0.03%)</title><rect x="95.4484%" y="101" width="0.0258%" height="15" fill="rgb(230,227,24)" fg:x="51776" fg:w="14"/><text x="95.6984%" y="111.50"></text></g><g><title>_mi_malloc_generic (17 samples, 0.03%)</title><rect x="95.4447%" y="117" width="0.0313%" height="15" fill="rgb(228,80,19)" fg:x="51774" fg:w="17"/><text x="95.6947%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (667 samples, 1.23%)</title><rect x="95.4761%" y="117" width="1.2296%" height="15" fill="rgb(247,229,0)" fg:x="51791" fg:w="667"/><text x="95.7261%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (667 samples, 1.23%)</title><rect x="95.4761%" y="101" width="1.2296%" height="15" fill="rgb(237,194,15)" fg:x="51791" fg:w="667"/><text x="95.7261%" y="111.50"></text></g><g><title>mi_malloc (630 samples, 1.16%)</title><rect x="95.5443%" y="85" width="1.1614%" height="15" fill="rgb(219,203,20)" fg:x="51828" fg:w="630"/><text x="95.7943%" y="95.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (264 samples, 0.49%)</title><rect x="96.7057%" y="117" width="0.4867%" height="15" fill="rgb(234,128,8)" fg:x="52458" fg:w="264"/><text x="96.9557%" y="127.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (40 samples, 0.07%)</title><rect x="97.1924%" y="117" width="0.0737%" height="15" fill="rgb(248,202,8)" fg:x="52722" fg:w="40"/><text x="97.4424%" y="127.50"></text></g><g><title>start_thread (1,238 samples, 2.28%)</title><rect x="95.2788%" y="389" width="2.2822%" height="15" fill="rgb(206,104,37)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="399.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,238 samples, 2.28%)</title><rect x="95.2788%" y="373" width="2.2822%" height="15" fill="rgb(223,8,27)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="383.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,238 samples, 2.28%)</title><rect x="95.2788%" y="357" width="2.2822%" height="15" fill="rgb(216,217,28)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="367.50">c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,238 samples, 2.28%)</title><rect x="95.2788%" y="341" width="2.2822%" height="15" fill="rgb(249,199,1)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="351.50">s..</text></g><g><title>tokio::runtime::task::raw::poll (1,238 samples, 2.28%)</title><rect x="95.2788%" y="325" width="2.2822%" height="15" fill="rgb(240,85,17)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="335.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::run (1,238 samples, 2.28%)</title><rect x="95.2788%" y="309" width="2.2822%" height="15" fill="rgb(206,108,45)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="319.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,238 samples, 2.28%)</title><rect x="95.2788%" y="293" width="2.2822%" height="15" fill="rgb(245,210,41)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="303.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (1,238 samples, 2.28%)</title><rect x="95.2788%" y="277" width="2.2822%" height="15" fill="rgb(206,13,37)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="287.50">t..</text></g><g><title>tokio::runtime::task::harness::poll_future (1,238 samples, 2.28%)</title><rect x="95.2788%" y="261" width="2.2822%" height="15" fill="rgb(250,61,18)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="271.50">t..</text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (1,238 samples, 2.28%)</title><rect x="95.2788%" y="245" width="2.2822%" height="15" fill="rgb(235,172,48)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="255.50">&lt;..</text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1,238 samples, 2.28%)</title><rect x="95.2788%" y="229" width="2.2822%" height="15" fill="rgb(249,201,17)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="239.50">&lt;..</text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1,238 samples, 2.28%)</title><rect x="95.2788%" y="213" width="2.2822%" height="15" fill="rgb(219,208,6)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="223.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,238 samples, 2.28%)</title><rect x="95.2788%" y="197" width="2.2822%" height="15" fill="rgb(248,31,23)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="207.50">&lt;..</text></g><g><title>&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,238 samples, 2.28%)</title><rect x="95.2788%" y="181" width="2.2822%" height="15" fill="rgb(245,15,42)" fg:x="51684" fg:w="1238"/><text x="95.5288%" y="191.50">&lt;..</text></g><g><title>&lt;tonic::codec::prost::ProstDecoder&lt;U&gt; as tonic::codec::Decoder&gt;::decode (1,211 samples, 2.23%)</title><rect x="95.3286%" y="165" width="2.2325%" height="15" fill="rgb(222,217,39)" fg:x="51711" fg:w="1211"/><text x="95.5786%" y="175.50">&lt;..</text></g><g><title>prost::encoding::message::merge_repeated (1,211 samples, 2.23%)</title><rect x="95.3286%" y="149" width="2.2325%" height="15" fill="rgb(210,219,27)" fg:x="51711" fg:w="1211"/><text x="95.5786%" y="159.50">p..</text></g><g><title>prost::encoding::string::merge (1,148 samples, 2.12%)</title><rect x="95.4447%" y="133" width="2.1163%" height="15" fill="rgb(252,166,36)" fg:x="51774" fg:w="1148"/><text x="95.6947%" y="143.50">p..</text></g><g><title>prost::encoding::decode_varint (160 samples, 0.29%)</title><rect x="97.2661%" y="117" width="0.2950%" height="15" fill="rgb(245,132,34)" fg:x="52762" fg:w="160"/><text x="97.5161%" y="127.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (92 samples, 0.17%)</title><rect x="97.3915%" y="101" width="0.1696%" height="15" fill="rgb(236,54,3)" fg:x="52830" fg:w="92"/><text x="97.6415%" y="111.50"></text></g><g><title>_mi_heap_delayed_free (29 samples, 0.05%)</title><rect x="97.5629%" y="85" width="0.0535%" height="15" fill="rgb(241,173,43)" fg:x="52923" fg:w="29"/><text x="97.8129%" y="95.50"></text></g><g><title>_mi_free_delayed_block (29 samples, 0.05%)</title><rect x="97.5629%" y="69" width="0.0535%" height="15" fill="rgb(215,190,9)" fg:x="52923" fg:w="29"/><text x="97.8129%" y="79.50"></text></g><g><title>_mi_page_free_collect (29 samples, 0.05%)</title><rect x="97.5629%" y="53" width="0.0535%" height="15" fill="rgb(242,101,16)" fg:x="52923" fg:w="29"/><text x="97.8129%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.07%)</title><rect x="97.5629%" y="149" width="0.0664%" height="15" fill="rgb(223,190,21)" fg:x="52923" fg:w="36"/><text x="97.8129%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.07%)</title><rect x="97.5629%" y="133" width="0.0664%" height="15" fill="rgb(215,228,25)" fg:x="52923" fg:w="36"/><text x="97.8129%" y="143.50"></text></g><g><title>_mi_heap_realloc_zero (36 samples, 0.07%)</title><rect x="97.5629%" y="117" width="0.0664%" height="15" fill="rgb(225,36,22)" fg:x="52923" fg:w="36"/><text x="97.8129%" y="127.50"></text></g><g><title>_mi_malloc_generic (36 samples, 0.07%)</title><rect x="97.5629%" y="101" width="0.0664%" height="15" fill="rgb(251,106,46)" fg:x="52923" fg:w="36"/><text x="97.8129%" y="111.50"></text></g><g><title>mi_page_queue_find_free_ex (7 samples, 0.01%)</title><rect x="97.6164%" y="85" width="0.0129%" height="15" fill="rgb(208,90,1)" fg:x="52952" fg:w="7"/><text x="97.8664%" y="95.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (6 samples, 0.01%)</title><rect x="97.6182%" y="69" width="0.0111%" height="15" fill="rgb(243,10,4)" fg:x="52953" fg:w="6"/><text x="97.8682%" y="79.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.03%)</title><rect x="97.6293%" y="133" width="0.0277%" height="15" fill="rgb(212,137,27)" fg:x="52959" fg:w="15"/><text x="97.8793%" y="143.50"></text></g><g><title>_mi_heap_delayed_free (15 samples, 0.03%)</title><rect x="97.6293%" y="117" width="0.0277%" height="15" fill="rgb(231,220,49)" fg:x="52959" fg:w="15"/><text x="97.8793%" y="127.50"></text></g><g><title>_mi_free_delayed_block (15 samples, 0.03%)</title><rect x="97.6293%" y="101" width="0.0277%" height="15" fill="rgb(237,96,20)" fg:x="52959" fg:w="15"/><text x="97.8793%" y="111.50"></text></g><g><title>_mi_page_free_collect (15 samples, 0.03%)</title><rect x="97.6293%" y="85" width="0.0277%" height="15" fill="rgb(239,229,30)" fg:x="52959" fg:w="15"/><text x="97.8793%" y="95.50"></text></g><g><title>_mi_heap_delayed_free (12 samples, 0.02%)</title><rect x="97.6569%" y="85" width="0.0221%" height="15" fill="rgb(219,65,33)" fg:x="52974" fg:w="12"/><text x="97.9069%" y="95.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (67 samples, 0.12%)</title><rect x="97.5611%" y="389" width="0.1235%" height="15" fill="rgb(243,134,7)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (67 samples, 0.12%)</title><rect x="97.5611%" y="373" width="0.1235%" height="15" fill="rgb(216,177,54)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (67 samples, 0.12%)</title><rect x="97.5611%" y="357" width="0.1235%" height="15" fill="rgb(211,160,20)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="367.50"></text></g><g><title>tokio::runtime::task::raw::poll (67 samples, 0.12%)</title><rect x="97.5611%" y="341" width="0.1235%" height="15" fill="rgb(239,85,39)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (67 samples, 0.12%)</title><rect x="97.5611%" y="325" width="0.1235%" height="15" fill="rgb(232,125,22)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="335.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (67 samples, 0.12%)</title><rect x="97.5611%" y="309" width="0.1235%" height="15" fill="rgb(244,57,34)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="319.50"></text></g><g><title>tokio::runtime::task::raw::poll (67 samples, 0.12%)</title><rect x="97.5611%" y="293" width="0.1235%" height="15" fill="rgb(214,203,32)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (67 samples, 0.12%)</title><rect x="97.5611%" y="277" width="0.1235%" height="15" fill="rgb(207,58,43)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="287.50"></text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (67 samples, 0.12%)</title><rect x="97.5611%" y="261" width="0.1235%" height="15" fill="rgb(215,193,15)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="271.50"></text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (67 samples, 0.12%)</title><rect x="97.5611%" y="245" width="0.1235%" height="15" fill="rgb(232,15,44)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="255.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (67 samples, 0.12%)</title><rect x="97.5611%" y="229" width="0.1235%" height="15" fill="rgb(212,3,48)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.12%)</title><rect x="97.5611%" y="213" width="0.1235%" height="15" fill="rgb(218,128,7)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="223.50"></text></g><g><title>&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (67 samples, 0.12%)</title><rect x="97.5611%" y="197" width="0.1235%" height="15" fill="rgb(226,216,39)" fg:x="52922" fg:w="67"/><text x="97.8111%" y="207.50"></text></g><g><title>&lt;tonic::codec::prost::ProstDecoder&lt;U&gt; as tonic::codec::Decoder&gt;::decode (66 samples, 0.12%)</title><rect x="97.5629%" y="181" width="0.1217%" height="15" fill="rgb(243,47,51)" fg:x="52923" fg:w="66"/><text x="97.8129%" y="191.50"></text></g><g><title>prost::encoding::message::merge_repeated (66 samples, 0.12%)</title><rect x="97.5629%" y="165" width="0.1217%" height="15" fill="rgb(241,183,40)" fg:x="52923" fg:w="66"/><text x="97.8129%" y="175.50"></text></g><g><title>prost::encoding::string::merge (30 samples, 0.06%)</title><rect x="97.6293%" y="149" width="0.0553%" height="15" fill="rgb(231,217,32)" fg:x="52959" fg:w="30"/><text x="97.8793%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.03%)</title><rect x="97.6569%" y="133" width="0.0277%" height="15" fill="rgb(229,61,38)" fg:x="52974" fg:w="15"/><text x="97.9069%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.03%)</title><rect x="97.6569%" y="117" width="0.0277%" height="15" fill="rgb(225,210,5)" fg:x="52974" fg:w="15"/><text x="97.9069%" y="127.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.03%)</title><rect x="97.6569%" y="101" width="0.0277%" height="15" fill="rgb(231,79,45)" fg:x="52974" fg:w="15"/><text x="97.9069%" y="111.50"></text></g><g><title>&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (10 samples, 0.02%)</title><rect x="97.6846%" y="229" width="0.0184%" height="15" fill="rgb(224,100,7)" fg:x="52989" fg:w="10"/><text x="97.9346%" y="239.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (10 samples, 0.02%)</title><rect x="97.6846%" y="213" width="0.0184%" height="15" fill="rgb(241,198,18)" fg:x="52989" fg:w="10"/><text x="97.9346%" y="223.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (10 samples, 0.02%)</title><rect x="97.6846%" y="197" width="0.0184%" height="15" fill="rgb(252,97,53)" fg:x="52989" fg:w="10"/><text x="97.9346%" y="207.50"></text></g><g><title>hyper::body::body::Body::poll_inner (10 samples, 0.02%)</title><rect x="97.6846%" y="181" width="0.0184%" height="15" fill="rgb(220,88,7)" fg:x="52989" fg:w="10"/><text x="97.9346%" y="191.50"></text></g><g><title>h2::share::FlowControl::release_capacity (10 samples, 0.02%)</title><rect x="97.6846%" y="165" width="0.0184%" height="15" fill="rgb(213,176,14)" fg:x="52989" fg:w="10"/><text x="97.9346%" y="175.50"></text></g><g><title>h2::proto::streams::recv::Recv::release_connection_capacity (10 samples, 0.02%)</title><rect x="97.6846%" y="149" width="0.0184%" height="15" fill="rgb(246,73,7)" fg:x="52989" fg:w="10"/><text x="97.9346%" y="159.50"></text></g><g><title>_mi_page_free_collect (914 samples, 1.68%)</title><rect x="97.8763%" y="165" width="1.6849%" height="15" fill="rgb(245,64,36)" fg:x="53093" fg:w="914"/><text x="98.1263%" y="175.50"></text></g><g><title>_mi_heap_delayed_free (1,044 samples, 1.92%)</title><rect x="97.7030%" y="197" width="1.9246%" height="15" fill="rgb(245,80,10)" fg:x="52999" fg:w="1044"/><text x="97.9530%" y="207.50">_..</text></g><g><title>_mi_free_delayed_block (959 samples, 1.77%)</title><rect x="97.8597%" y="181" width="1.7679%" height="15" fill="rgb(232,107,50)" fg:x="53084" fg:w="959"/><text x="98.1097%" y="191.50"></text></g><g><title>_mi_page_use_delayed_free (36 samples, 0.07%)</title><rect x="99.5612%" y="165" width="0.0664%" height="15" fill="rgb(253,3,0)" fg:x="54007" fg:w="36"/><text x="99.8112%" y="175.50"></text></g><g><title>_mi_malloc_generic (1,045 samples, 1.93%)</title><rect x="97.7030%" y="213" width="1.9264%" height="15" fill="rgb(212,99,53)" fg:x="52999" fg:w="1045"/><text x="97.9530%" y="223.50">_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,062 samples, 1.96%)</title><rect x="97.6846%" y="389" width="1.9578%" height="15" fill="rgb(249,111,54)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="399.50">s..</text></g><g><title>tokio::runtime::task::raw::poll (1,062 samples, 1.96%)</title><rect x="97.6846%" y="373" width="1.9578%" height="15" fill="rgb(249,55,30)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="383.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::run (1,062 samples, 1.96%)</title><rect x="97.6846%" y="357" width="1.9578%" height="15" fill="rgb(237,47,42)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="367.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,062 samples, 1.96%)</title><rect x="97.6846%" y="341" width="1.9578%" height="15" fill="rgb(211,20,18)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="351.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (1,062 samples, 1.96%)</title><rect x="97.6846%" y="325" width="1.9578%" height="15" fill="rgb(231,203,46)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="335.50">t..</text></g><g><title>tokio::runtime::task::harness::poll_future (1,062 samples, 1.96%)</title><rect x="97.6846%" y="309" width="1.9578%" height="15" fill="rgb(237,142,3)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="319.50">t..</text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (1,062 samples, 1.96%)</title><rect x="97.6846%" y="293" width="1.9578%" height="15" fill="rgb(241,107,1)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="303.50">&lt;..</text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1,062 samples, 1.96%)</title><rect x="97.6846%" y="277" width="1.9578%" height="15" fill="rgb(229,83,13)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="287.50">&lt;..</text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1,062 samples, 1.96%)</title><rect x="97.6846%" y="261" width="1.9578%" height="15" fill="rgb(241,91,40)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="271.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,062 samples, 1.96%)</title><rect x="97.6846%" y="245" width="1.9578%" height="15" fill="rgb(225,3,45)" fg:x="52989" fg:w="1062"/><text x="97.9346%" y="255.50">&lt;..</text></g><g><title>tonic::server::grpc::Grpc&lt;T&gt;::map_response (1,052 samples, 1.94%)</title><rect x="97.7030%" y="229" width="1.9393%" height="15" fill="rgb(244,223,14)" fg:x="52999" fg:w="1052"/><text x="97.9530%" y="239.50">t..</text></g><g><title>tonic::metadata::map::MetadataMap::into_sanitized_headers (7 samples, 0.01%)</title><rect x="99.6295%" y="213" width="0.0129%" height="15" fill="rgb(224,124,37)" fg:x="54044" fg:w="7"/><text x="99.8795%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::remove (7 samples, 0.01%)</title><rect x="99.6295%" y="197" width="0.0129%" height="15" fill="rgb(251,171,30)" fg:x="54044" fg:w="7"/><text x="99.8795%" y="207.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (15 samples, 0.03%)</title><rect x="99.6719%" y="357" width="0.0277%" height="15" fill="rgb(236,46,54)" fg:x="54067" fg:w="15"/><text x="99.9219%" y="367.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (32 samples, 0.06%)</title><rect x="99.6461%" y="389" width="0.0590%" height="15" fill="rgb(245,213,5)" fg:x="54053" fg:w="32"/><text x="99.8961%" y="399.50"></text></g><g><title>&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (32 samples, 0.06%)</title><rect x="99.6461%" y="373" width="0.0590%" height="15" fill="rgb(230,144,27)" fg:x="54053" fg:w="32"/><text x="99.8961%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (63 samples, 0.12%)</title><rect x="99.7050%" y="389" width="0.1161%" height="15" fill="rgb(220,86,6)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="399.50"></text></g><g><title>tokio::runtime::task::raw::poll (63 samples, 0.12%)</title><rect x="99.7050%" y="373" width="0.1161%" height="15" fill="rgb(240,20,13)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (63 samples, 0.12%)</title><rect x="99.7050%" y="357" width="0.1161%" height="15" fill="rgb(217,89,34)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="367.50"></text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (63 samples, 0.12%)</title><rect x="99.7050%" y="341" width="0.1161%" height="15" fill="rgb(229,13,5)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="351.50"></text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (63 samples, 0.12%)</title><rect x="99.7050%" y="325" width="0.1161%" height="15" fill="rgb(244,67,35)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="335.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (63 samples, 0.12%)</title><rect x="99.7050%" y="309" width="0.1161%" height="15" fill="rgb(221,40,2)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="319.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (63 samples, 0.12%)</title><rect x="99.7050%" y="293" width="0.1161%" height="15" fill="rgb(237,157,21)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="303.50"></text></g><g><title>tonic::server::grpc::Grpc&lt;T&gt;::map_response (63 samples, 0.12%)</title><rect x="99.7050%" y="277" width="0.1161%" height="15" fill="rgb(222,94,11)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="287.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (63 samples, 0.12%)</title><rect x="99.7050%" y="261" width="0.1161%" height="15" fill="rgb(249,113,6)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="271.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (63 samples, 0.12%)</title><rect x="99.7050%" y="245" width="0.1161%" height="15" fill="rgb(238,137,36)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="255.50"></text></g><g><title>_mi_malloc_generic (63 samples, 0.12%)</title><rect x="99.7050%" y="229" width="0.1161%" height="15" fill="rgb(210,102,26)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="239.50"></text></g><g><title>_mi_heap_delayed_free (63 samples, 0.12%)</title><rect x="99.7050%" y="213" width="0.1161%" height="15" fill="rgb(218,30,30)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="223.50"></text></g><g><title>_mi_free_delayed_block (63 samples, 0.12%)</title><rect x="99.7050%" y="197" width="0.1161%" height="15" fill="rgb(214,67,26)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="207.50"></text></g><g><title>_mi_page_free_collect (63 samples, 0.12%)</title><rect x="99.7050%" y="181" width="0.1161%" height="15" fill="rgb(251,9,53)" fg:x="54085" fg:w="63"/><text x="99.9550%" y="191.50"></text></g><g><title>&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 0.03%)</title><rect x="99.8212%" y="261" width="0.0258%" height="15" fill="rgb(228,204,25)" fg:x="54148" fg:w="14"/><text x="100.0712%" y="271.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (14 samples, 0.03%)</title><rect x="99.8212%" y="245" width="0.0258%" height="15" fill="rgb(207,153,8)" fg:x="54148" fg:w="14"/><text x="100.0712%" y="255.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (14 samples, 0.03%)</title><rect x="99.8212%" y="229" width="0.0258%" height="15" fill="rgb(242,9,16)" fg:x="54148" fg:w="14"/><text x="100.0712%" y="239.50"></text></g><g><title>hyper::body::body::Body::poll_inner (14 samples, 0.03%)</title><rect x="99.8212%" y="213" width="0.0258%" height="15" fill="rgb(217,211,10)" fg:x="54148" fg:w="14"/><text x="100.0712%" y="223.50"></text></g><g><title>h2::share::RecvStream::poll_data (14 samples, 0.03%)</title><rect x="99.8212%" y="197" width="0.0258%" height="15" fill="rgb(219,228,52)" fg:x="54148" fg:w="14"/><text x="100.0712%" y="207.50"></text></g><g><title>h2::proto::streams::buffer::Deque::pop_front (14 samples, 0.03%)</title><rect x="99.8212%" y="181" width="0.0258%" height="15" fill="rgb(231,92,29)" fg:x="54148" fg:w="14"/><text x="100.0712%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.02%)</title><rect x="99.8267%" y="165" width="0.0203%" height="15" fill="rgb(232,8,23)" fg:x="54151" fg:w="11"/><text x="100.0767%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (28 samples, 0.05%)</title><rect x="99.8525%" y="229" width="0.0516%" height="15" fill="rgb(216,211,34)" fg:x="54165" fg:w="28"/><text x="100.1025%" y="239.50"></text></g><g><title>mi_malloc (23 samples, 0.04%)</title><rect x="99.8617%" y="213" width="0.0424%" height="15" fill="rgb(236,151,0)" fg:x="54170" fg:w="23"/><text x="100.1117%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (32 samples, 0.06%)</title><rect x="99.8470%" y="245" width="0.0590%" height="15" fill="rgb(209,168,3)" fg:x="54162" fg:w="32"/><text x="100.0970%" y="255.50"></text></g><g><title>[unknown] (32,060 samples, 59.10%)</title><rect x="40.8572%" y="405" width="59.1022%" height="15" fill="rgb(208,129,28)" fg:x="22163" fg:w="32060"/><text x="41.1072%" y="415.50">[unknown]</text></g><g><title>tokio::runtime::thread_pool::worker::run (75 samples, 0.14%)</title><rect x="99.8212%" y="389" width="0.1383%" height="15" fill="rgb(229,78,22)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (75 samples, 0.14%)</title><rect x="99.8212%" y="373" width="0.1383%" height="15" fill="rgb(228,187,13)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="383.50"></text></g><g><title>tokio::runtime::task::raw::poll (75 samples, 0.14%)</title><rect x="99.8212%" y="357" width="0.1383%" height="15" fill="rgb(240,119,24)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="367.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (75 samples, 0.14%)</title><rect x="99.8212%" y="341" width="0.1383%" height="15" fill="rgb(209,194,42)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="351.50"></text></g><g><title>&lt;hyper::proto::h2::server::H2Stream&lt;F,B&gt; as core::future::future::Future&gt;::poll (75 samples, 0.14%)</title><rect x="99.8212%" y="325" width="0.1383%" height="15" fill="rgb(247,200,46)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="335.50"></text></g><g><title>&lt;tonic::transport::server::SvcFuture&lt;F&gt; as core::future::future::Future&gt;::poll (75 samples, 0.14%)</title><rect x="99.8212%" y="309" width="0.1383%" height="15" fill="rgb(218,76,16)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="319.50"></text></g><g><title>&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (75 samples, 0.14%)</title><rect x="99.8212%" y="293" width="0.1383%" height="15" fill="rgb(225,21,48)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (75 samples, 0.14%)</title><rect x="99.8212%" y="277" width="0.1383%" height="15" fill="rgb(239,223,50)" fg:x="54148" fg:w="75"/><text x="100.0712%" y="287.50"></text></g><g><title>tonic::server::grpc::Grpc&lt;T&gt;::map_response (61 samples, 0.11%)</title><rect x="99.8470%" y="261" width="0.1125%" height="15" fill="rgb(244,45,21)" fg:x="54162" fg:w="61"/><text x="100.0970%" y="271.50"></text></g><g><title>tonic::metadata::map::MetadataMap::into_sanitized_headers (29 samples, 0.05%)</title><rect x="99.9060%" y="245" width="0.0535%" height="15" fill="rgb(232,33,43)" fg:x="54194" fg:w="29"/><text x="100.1560%" y="255.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::remove (29 samples, 0.05%)</title><rect x="99.9060%" y="229" width="0.0535%" height="15" fill="rgb(209,8,3)" fg:x="54194" fg:w="29"/><text x="100.1560%" y="239.50"></text></g><g><title>&lt;&amp;str as http::header::map::as_header_name::Sealed&gt;::find (29 samples, 0.05%)</title><rect x="99.9060%" y="213" width="0.0535%" height="15" fill="rgb(214,25,53)" fg:x="54194" fg:w="29"/><text x="100.1560%" y="223.50"></text></g><g><title>http::header::name::parse_hdr (24 samples, 0.04%)</title><rect x="99.9152%" y="197" width="0.0442%" height="15" fill="rgb(254,186,54)" fg:x="54199" fg:w="24"/><text x="100.1652%" y="207.50"></text></g><g><title>async_page_fault (6 samples, 0.01%)</title><rect x="99.9834%" y="389" width="0.0111%" height="15" fill="rgb(208,174,49)" fg:x="54236" fg:w="6"/><text x="100.2334%" y="399.50"></text></g><g><title>mi_page_free_list_extend.isra.39 (7 samples, 0.01%)</title><rect x="99.9834%" y="405" width="0.0129%" height="15" fill="rgb(233,191,51)" fg:x="54236" fg:w="7"/><text x="100.2334%" y="415.50"></text></g><g><title>all (54,245 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(222,134,10)" fg:x="0" fg:w="54245"/><text x="0.2500%" y="447.50"></text></g><g><title>tokio-runtime-w (32,091 samples, 59.16%)</title><rect x="40.8406%" y="421" width="59.1594%" height="15" fill="rgb(230,226,20)" fg:x="22154" fg:w="32091"/><text x="41.0906%" y="431.50">tokio-runtime-w</text></g></svg></svg>